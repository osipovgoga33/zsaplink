<?xml version="1.0" encoding="utf-8"?>
<nugget name="C:\Projects\SAPlink-plugins\build\SAPlink-plugins_Daily.nugg">
 <CLAS CLSNAME="ZSAPLINK_BSP" VERSION="1" LANGU="E" DESCRIPT="SAPlink - BSP plugin" CATEGORY="00" EXPOSURE="2" STATE="1" RELEASE="0" CLSCCINCL="X" FIXPT="X" UNICODE="X" CLSBCCAT="00" DURATION_TYPE="0 " RISK_LEVEL="0 " REFCLSNAME="ZSAPLINK">
  <localImplementation>*&quot;* use this source file for the definition and implementation of
*&quot;* local helper classes, interface definitions and type
*&quot;* declarations</localImplementation>
  <localTypes>*&quot;* use this source file for any type of declarations (class
*&quot;* definitions, interfaces or type declarations) you need for
*&quot;* components in the private section</localTypes>
  <localMacros>*&quot;* use this source file for any macro definitions you need
*&quot;* in the implementation part of the class</localMacros>
  <inheritance CLSNAME="ZSAPLINK_BSP" REFCLSNAME="ZSAPLINK" VERSION="1" STATE="1">
   <redefinition CLSNAME="ZSAPLINK_BSP" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="CHECKEXISTS" EXPOSURE="2"/>
   <redefinition CLSNAME="ZSAPLINK_BSP" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="CREATEIXMLDOCFROMOBJECT" EXPOSURE="2"/>
   <redefinition CLSNAME="ZSAPLINK_BSP" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="CREATEOBJECTFROMIXMLDOC" EXPOSURE="2"/>
   <redefinition CLSNAME="ZSAPLINK_BSP" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="DELETEOBJECT" EXPOSURE="1"/>
   <redefinition CLSNAME="ZSAPLINK_BSP" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="GETOBJECTTYPE" EXPOSURE="1"/>
  </inheritance>
  <method CLSNAME="ZSAPLINK" CMPNAME="CHECKEXISTS" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>method CHECKEXISTS.
*/---------------------------------------------------------------------\
*|   This file is part of the SAPlink-plugins.                         |
*|                                                                     |
*|   The code of this project is provided to you under the current     |
*|   version of the SAP Code Exchange Terms of Use. You can find the   |
*|   text on the SAP Code Exchange webpage at http://www.sdn.sap.com   |
*|                                                                     |
*|   SAPlink is provided to you AS IS with no guarantee, warranty or   |
*|   support.                                                          |
*\---------------------------------------------------------------------/

data _bspName TYPE O2APPLNAME.

  _bspName = objName.
  call method cl_o2_api_application=&gt;check_exist
    exporting
      p_application = _bspName
    importing
      p_exists      = exists.

endmethod.</source>
  </method>
  <method CLSNAME="ZSAPLINK" CMPNAME="CREATEIXMLDOCFROMOBJECT" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>method CREATEIXMLDOCFROMOBJECT.
*/---------------------------------------------------------------------\
*|   This file is part of the SAPlink-plugins.                         |
*|                                                                     |
*|   The code of this project is provided to you under the current     |
*|   version of the SAP Code Exchange Terms of Use. You can find the   |
*|   text on the SAP Code Exchange webpage at http://www.sdn.sap.com   |
*|                                                                     |
*|   SAPlink is provided to you AS IS with no guarantee, warranty or   |
*|   support.                                                          |
*\---------------------------------------------------------------------/

data _bspName TYPE O2APPLNAME.
data bspApp type ref to CL_O2_API_APPLICATION.
data bspAttributes type O2APPLATTR.
data rc type sysubrc.
data sourceString type string.
data navGraph type o2applgrap_table.
data navLine type O2APPLGRAP.

*xml nodes
data rootNode type ref to if_ixml_element.
data navNode type ref to if_ixml_element.
data pageNode type ref to if_ixml_element.
data layoutNode type ref to if_ixml_element.
data eventNode type ref to if_ixml_element.
data parameterNode type ref to if_ixml_element.
data typeDefNode type ref to if_ixml_element.

*page data
data bspPages type O2PAGELIST.
data bspPage type O2PAGATTR.
data pageKey type O2PAGKEY.
data pageAPI type ref to CL_O2_API_PAGES.
data pageAttributes type O2PAGATTR.
data pageContent TYPE O2PAGELINE_TABLE.
data pageXML TYPE XSTRING.
data pageGUIDS TYPE BSP_GUIDS.
data eventHandlers type O2PAGEVH_TABLETYPE.
data eventHandler type O2PAGEVHS.
data eventAttributes type O2PAGEVH.
data eventContent type RSWSOURCET.
data typeDefinitionSource type RSWSOURCET.
data pageParameters TYPE O2PAGPAR_TABLETYPE.
data pageParameter type O2PAGPARS.

  _bspName = objName.

  call method CL_O2_API_APPLICATION=&gt;Load
    exporting
      P_APPLICATION_NAME = _bspName
    importing
      P_APPLICATION = bspApp
    exceptions
      OBJECT_NOT_EXISTING = 1
      PERMISSION_FAILURE  = 2
      ERROR_OCCURED       = 3.
  if sy-subrc &lt;&gt; 0.
    case sy-subrc.
      when 1.
        raise exception type zcx_saplink
          exporting textid = zcx_saplink=&gt;not_found.
      when 2.
        raise exception type zcx_saplink
          exporting textid = zcx_saplink=&gt;not_authorized.
      when 3.
        raise exception type zcx_saplink
          exporting textid = zcx_saplink=&gt;system_error.
    endcase.
  endif.

  call method bspApp-&gt;get_attributes
    exporting
      p_version = &apos;A&apos;
    importing
      p_attributes = bspAttributes.

* Create parent node
  data _objType type string.
*  _objType = objType.
  _objType = getObjectType( ).
  rootNode = xmlDoc-&gt;create_element( _objType ).
  setAttributesFromStructure( node = rootNode structure = bspAttributes
  ).

* navigation data
  CALL METHOD bspApp-&gt;get_navgraph
    EXPORTING
      P_VERSION      = &apos;A&apos;
    IMPORTING
      P_NAVGRAPH     = navGraph
    EXCEPTIONS
      OBJECT_INVALID = 1
      OBJECT_DELETED = 2
      ERROR_OCCURED  = 3
      others         = 4
        .

  loop at navGraph into navLine.
    navNode = xmlDoc-&gt;create_element( &apos;navgraph&apos; ).
    setAttributesFromStructure( node = navNode structure = navLine ).
*   add navigation graph entry
    rc = rootNode-&gt;append_child( navNode ).
  endloop.

*/-----------------------Create nodes for pages-----------------------\
* Get BSP pages
  call method CL_O2_API_PAGES=&gt;GET_ALL_PAGES
    exporting
      P_APPLNAME = _bspName
      P_VERSION = &apos;A&apos;
    importing
      P_PAGES = bspPages.

  loop at bspPages into bspPage.
    pageNode = xmlDoc-&gt;create_element( &apos;page&apos; ).

*   page header data
    pageKey-APPLNAME = _bspName.
    pageKey-PAGEKEY = bspPage-PAGEKEY.
    clear pageAPI.
    call method CL_O2_API_PAGES=&gt;load
          exporting
            P_PAGEKEY = pageKey
          importing
            P_PAGE = pageAPI.

*   page attributes
    CALL METHOD pageAPI-&gt;get_attrs
      IMPORTING
        P_ATTRS      = pageAttributes
      EXCEPTIONS
        PAGE_DELETED = 1
        others       = 2
        .
    setAttributesFromStructure( node = pageNode structure =
    pageAttributes ).

    if pageAttributes-pagetype = &apos;C&apos;.  &quot;controller pages
*get/set controller class here if needed (pageAttributes-implclass)
    else.                              &quot;non-controller pages
*     page layout
      call method pageAPI-&gt;GET_PAGE
        importing
          P_CONTENT = pageContent
          P_XML_SOURCE = pageXML
          P_OTR_GUIDS = pageGUIDS.

      if pageContent is not initial.
        layoutNode = xmlDoc-&gt;create_element( &apos;layout&apos; ).
        sourceString = buildSourceString( pageTable = pageContent ).
        if sourceString is not initial.
          rc = layoutNode-&gt;IF_IXML_NODE~SET_VALUE( sourceString ).
        endif.
        rc = pageNode-&gt;append_child( layoutNode ).
      endif.

*     event handlers
      call method pageAPI-&gt;GET_EVENT_HANDLERS
        importing
          P_EV_HANDLER = eventHandlers.

      loop at eventHandlers into eventHandler.
        eventNode = xmlDoc-&gt;create_element( &apos;event&apos; ).
        move-corresponding eventHandler to eventAttributes.
        setAttributesFromStructure( node = eventNode structure =
        eventAttributes ).

        sourceString = buildSourceString( sourceTable =
        eventHandler-source ).
        if sourceString is not initial.
          rc = eventNode-&gt;IF_IXML_NODE~SET_VALUE( sourceString ).
        endif.
        rc = pageNode-&gt;append_child( eventNode ).
      endloop.

*     page parameters
      refresh pageParameters.
      CALL METHOD pageAPI-&gt;get_parameters
        IMPORTING
          P_PARAMETERS = pageParameters
        EXCEPTIONS
          PAGE_DELETED = 1
          INVALID_CALL = 2
          others       = 3.

      loop at pageParameters into pageParameter.
        parameterNode = xmlDoc-&gt;create_element( &apos;parameter&apos; ).
        setAttributesFromStructure( node = parameterNode structure =
        pageParameter ).
        rc = pageNode-&gt;append_child( parameterNode ).
      endloop.

*     type definitions
      CALL METHOD pageAPI-&gt;get_type_source
        IMPORTING
          P_SOURCE     = typeDefinitionSource
        EXCEPTIONS
          PAGE_DELETED = 1
          INVALID_CALL = 2
          others       = 3
              .

      if typeDefinitionSource is not initial.
        typeDefNode = xmlDoc-&gt;create_element( &apos;typedef&apos; ).
        sourceString = buildSourceString( sourceTable =
        typeDefinitionSource ).
        if sourceString is not initial.
          rc = typeDefNode-&gt;IF_IXML_NODE~SET_VALUE( sourceString ).
        endif.
        rc = pageNode-&gt;append_child( typeDefNode ).
      endif.
    endif.                             &quot;controller/non-controller pages

*   add page node
    rc = rootNode-&gt;append_child( pageNode ).
  endloop.
*\--------------------------------------------------------------------/
  rc = xmldoc-&gt;append_child( rootNode ).
  ixmlDocument = xmlDoc.
endmethod.</source>
  </method>
  <method CLSNAME="ZSAPLINK" CMPNAME="CREATEOBJECTFROMIXMLDOC" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>method CREATEOBJECTFROMIXMLDOC.
*/---------------------------------------------------------------------\
*|   This file is part of the SAPlink-plugins.                         |
*|                                                                     |
*|   The code of this project is provided to you under the current     |
*|   version of the SAP Code Exchange Terms of Use. You can find the   |
*|   text on the SAP Code Exchange webpage at http://www.sdn.sap.com   |
*|                                                                     |
*|   SAPlink is provided to you AS IS with no guarantee, warranty or   |
*|   support.                                                          |
*\---------------------------------------------------------------------/

  &quot;data _bspName TYPE O2APPLNAME.
  data bspAttributes type O2APPLATTR.
  data flag type char1.
  data transReq type trkorr.
  data nodes type o2applnode_table.
  data navGraph type o2applgrap_table.
  data navLine type O2APPLGRAP.
  data application type ref to cl_o2_api_application.
  data nameSpace type skwf_urlp.
  data folderName type string.
  data folderDesc type sdok_descr.
  data rootNode type ref to if_ixml_element.
  data pageNode type ref to if_ixml_element.
  data node type ref to if_ixml_element.
  data filter type ref to if_ixml_node_filter.
  data iterator type ref to if_ixml_node_iterator.
  data pageIterator type ref to if_ixml_node_iterator.
  data ixmlNode type ref to if_ixml_node.
  data source type string.
  data trobjName type trobj_name.
  data objectName type SEU_OBJKEY.
  data obj_name type E071-OBJ_NAME.
  data l_nodeguid type ICFNODGUID.
  data l_icfdocu  type ICF_DOCU.
  data l_icfname  type ICFNAME.
  data _devclass type devclass.
  data checkExists type flag.

  &quot; page data
  data bspPages type O2PAGELIST.
  data bspPage type O2PAGATTR.
  data pageAttributes type O2PAGATTR.
  data newPage TYPE REF TO CL_O2_API_PAGES.
  data pageContent TYPE O2PAGELINE_TABLE.
  data eventHandlers type O2PAGEVH_TABLETYPE.
  data eventHandler type O2PAGEVHS.
  data eventAttributes type O2PAGEVH.
  data pageParameters TYPE O2PAGPAR_TABLETYPE.
  data pageParameter type O2PAGPARS.
  data typeDefinitionSource type RSWSOURCET.
  data _objType type string.

  _devclass = devclass.
  _objType = getObjectType( ).

  xmlDoc = ixmlDocument.
  rootNode = xmlDoc-&gt;find_from_name( _objType ).

  call method GETSTRUCTUREFROMATTRIBUTES
        exporting
          node = rootNode
        changing
          structure = bspAttributes.

  objName = bspAttributes-applname.
  bspAttributes-devclass = _devclass.
** check bsp does not exist
*  _bspName = bspAttributes-applname.
*  call method cl_o2_api_application=&gt;check_exist
*    exporting
*      p_application = _bspName
*    importing
*      p_exists      = flag.
*  if flag is not initial and overwrite &lt;&gt; &apos;X&apos;.
*    raise exception type zcx_saplink
*      exporting textid = zcx_saplink=&gt;existing.
*  endif.
  checkExists = checkexists( ).
  if checkExists is not initial.
    if overwrite is initial.
      raise exception type zcx_saplink
        exporting textid = zcx_saplink=&gt;existing.
    else.
*     delete object for new install
      deleteobject( ).
    endif.
  endif.

* retrieve navigation modeler details
  free: filter, iterator, node.
  filter = xmlDoc-&gt;create_filter_name( &apos;navgraph&apos; ).
  iterator = xmlDoc-&gt;create_iterator_filtered( filter ).
  node ?= iterator-&gt;get_next( ).

  while node is not initial.
    clear navLine.
    call method GETSTRUCTUREFROMATTRIBUTES
          exporting
            node = node
          changing
            structure = navLine.
    append navLine to navGraph.
    node ?= iterator-&gt;get_next( ).
  endwhile.

****************Create application****************
* create bsp
  call method cl_o2_api_application=&gt;create_new
    EXPORTING
      p_application_data      = bspAttributes
      p_nodes                 = nodes
      p_navgraph              = navGraph
    IMPORTING
      p_application           = application
    EXCEPTIONS
      object_already_existing = 1
      object_just_created     = 2
      not_authorized          = 3
      undefined_name          = 4
      author_not_existing     = 5
      action_cancelled        = 6
      error_occured           = 7
      invalid_parameter       = 8.
  if sy-subrc &lt;&gt; 0.
    case sy-subrc.
      when 1.
        if overwrite &lt;&gt; &apos;X&apos;.
          raise exception type zcx_saplink
            exporting textid = zcx_saplink=&gt;existing.
        endif.
      when 3.
        raise exception type zcx_saplink
          exporting textid = zcx_saplink=&gt;not_authorized.
      when others.
        raise exception type zcx_saplink
          exporting textid = zcx_saplink=&gt;system_error.
    endcase.
  endif.

* save bsp
  call method application-&gt;save
    IMPORTING
      p_devclass            = _devclass
    CHANGING
      p_transport_request   = transReq
    EXCEPTIONS
*      object_invalid        = 1
*      object_not_changeable = 2
*      action_cancelled      = 3
      permission_failure    = 4.
*      not_changed           = 5
*      error_occured         = 6.

  if sy-subrc &lt;&gt; 0.
    case sy-subrc.
      when 4.
        raise exception type zcx_saplink
          exporting textid = zcx_saplink=&gt;not_authorized.
      when others.
        raise exception type zcx_saplink
          exporting textid = zcx_saplink=&gt;system_error.
    endcase.
  endif.

* put bsp in worklist
  trobjName = objName.
  call function &apos;RS_INSERT_INTO_WORKING_AREA&apos;
    EXPORTING
      object            = &apos;WAPD&apos;
      obj_name          = trobjName
    EXCEPTIONS
      wrong_object_name = 1.
  if sy-subrc &lt;&gt; 0.
    raise exception type zcx_saplink
      exporting textid = zcx_saplink=&gt;system_error.
  endif.

* reset
  call method application-&gt;set_changeable
    EXPORTING
      p_changeable                = &apos; &apos;
      p_complete_application      = &apos;X&apos;
    EXCEPTIONS
      action_cancelled            = 1
      object_locked_by_other_user = 2
      permission_failure          = 3
      object_already_changeable   = 4
      object_already_unlocked     = 5
      object_just_created         = 6
      object_deleted              = 7
      object_modified             = 8
      object_not_existing         = 9
      object_invalid              = 10
      error_occured               = 11.
  if sy-subrc ne 0.
    case sy-subrc.
      when 3.
        raise exception type zcx_saplink
          exporting textid = zcx_saplink=&gt;not_authorized.
      when others.
        raise exception type zcx_saplink
          exporting textid = zcx_saplink=&gt;system_error.
    endcase.
  endif.

* create application folder in mime repository
  nameSpace = &apos;SAP&apos;.
  folderName = bspAttributes-applext.
  folderDesc = bspAttributes-text.

  call method cl_wb_mime_repository=&gt;create_appl_folder
    EXPORTING
      folder_name          = folderName
      folder_desc          = folderDesc
      name_space           = nameSpace
    CHANGING
      dev_package          = _devclass
      corr_number          = transReq
    EXCEPTIONS
      no_folder_name       = 1
      folder_exists        = 0
      name_space_not_found = 3
      error_occured        = 4
      others               = 5.
** if this doesnt work, no biggie...it will create when BSP opened
*  if sy-subrc &lt;&gt; 0.
**raise error
*    exit.
*  endif.

****************Create pages****************
  free: filter, iterator, node.
  filter = xmlDoc-&gt;create_filter_name( &apos;page&apos; ).
  pageIterator = xmlDoc-&gt;create_iterator_filtered( filter ).
  pageNode ?= pageIterator-&gt;get_next( ).

  while pageNode is not initial.
    free newPage.
*   get page data
    clear pageAttributes.
    call method GETSTRUCTUREFROMATTRIBUTES
          exporting
            node = pageNode
          changing
            structure = pageAttributes.

*   create new page
    CALL METHOD cl_o2_api_pages=&gt;create_new_page
      EXPORTING
        p_pageattrs           = pageAttributes
      IMPORTING
        P_PAGE                = newPage.
*      EXCEPTIONS
*        OBJECT_ALREADY_EXISTS = 1
*        INVALID_NAME          = 2
*        ERROR_OCCURED         = 3
*        O2APPL_NOT_EXISTING   = 4
*        others                = 5
*            .
*    if sy-subrc &lt;&gt; 0.
**raise error
*      exit.
*    endif.

    if pageAttributes-pagetype = &apos;C&apos;.  &quot;controller pages
*get/set controller class here if needed (pageAttributes-implclass)
    else.                              &quot;non-controller pages
*     get page content
      refresh pageContent.
      free ixmlNode. clear source.
      ixmlNode = pageNode-&gt;find_from_name( &apos;layout&apos; ).
      if ixmlNode is not initial.
        source = ixmlNode-&gt;get_value( ).
        pageContent = BUILDTABLEFROMSTRING( source ).
      endif.

*     create page content
      if pageContent is not initial.
        CALL METHOD newPage-&gt;set_page
          EXPORTING
            p_content    = pageContent.
*          EXCEPTIONS
*            PAGE_DELETED = 1
*            INVALID_CALL = 2
*            others       = 3
*                .
*        if sy-subrc &lt;&gt; 0.
**    raise error
*          exit.
*        endif.
      endif.

*     get event handlers
      free: filter, iterator, node.
      filter = pageNode-&gt;create_filter_name( &apos;event&apos; ).
      iterator = pageNode-&gt;create_iterator_filtered( filter ).
      node ?= iterator-&gt;get_next( ).

      refresh eventHandlers.
      while node is not initial.
        clear eventHandler.
        call method GETSTRUCTUREFROMATTRIBUTES
              exporting
                node = node
              changing
                structure = eventAttributes.
        move-corresponding eventAttributes to eventHandler.
        source = node-&gt;get_value( ).
        if source is not initial.
          eventHandler-source = BUILDTABLEFROMSTRING( source ).
        endif.
        append eventHandler to eventHandlers.
        node ?= iterator-&gt;get_next( ).
      endwhile.

*     create event handlers
      if eventHandlers is not initial.
        CALL METHOD newPage-&gt;set_event_handlers
          EXPORTING
            p_ev_handler = eventHandlers.
*          EXCEPTIONS
*            PAGE_DELETED = 1
*            INVALID_CALL = 2
*            others       = 3
*                .
*        if sy-subrc &lt;&gt; 0.
**    raise error
*          exit.
*        endif.
      endif.

*     get page parameters
      free: filter, iterator, node.
      filter = pageNode-&gt;create_filter_name( &apos;parameter&apos; ).
      iterator = pageNode-&gt;create_iterator_filtered( filter ).
      node ?= iterator-&gt;get_next( ).

      refresh pageParameters.
      while node is not initial.
        clear pageParameter.
        call method GETSTRUCTUREFROMATTRIBUTES
              exporting
                node = node
              changing
                structure = pageParameter.

        append pageParameter to pageParameters.
        node ?= iterator-&gt;get_next( ).
      endwhile.

*     create page parameters
      if pageParameters is not initial.
        CALL METHOD newPage-&gt;set_parameters
          EXPORTING
            p_parameters      = pageParameters.
*          EXCEPTIONS
*            PAGE_DELETED      = 1
*            INVALID_PARAMETER = 2
*            INVALID_CALL      = 3
*            others            = 4
*                .
*        if sy-subrc &lt;&gt; 0.
**    raise error
*          exit.
*        endif.
      endif.

*     get type definitions
      refresh typeDefinitionSource.
      free ixmlNode. clear source.
      ixmlNode = pageNode-&gt;find_from_name( &apos;typedef&apos; ).
      if ixmlNode is not initial.
        source = ixmlNode-&gt;get_value( ).
        typeDefinitionSource = BUILDTABLEFROMSTRING( source ).
      endif.

*     create type definition source code
      if typeDefinitionSource is not initial.
        CALL METHOD newPage-&gt;set_type_source
          EXPORTING
            p_source     = typeDefinitionSource.
*          EXCEPTIONS
*            PAGE_DELETED = 1
*            INVALID_CALL = 2
*            others       = 3
*                .
*        if sy-subrc &lt;&gt; 0.
**    raise error
*          exit.
*        endif.
      endif.
    endif.                             &quot;controller/non-controller pages

*   put page in worklist
    clear: objectName, obj_name.
    objectName = cl_wb_object_type=&gt;get_concatenated_key_from_id(
           p_key_component1 = pageAttributes-applname
           p_key_component2 = pageAttributes-pagekey
           p_external_id    = &apos;WG &apos; ).

    obj_name = objectName.
    translate obj_name to upper case.

    CALL FUNCTION &apos;RS_INSERT_INTO_WORKING_AREA&apos;
        EXPORTING
          OBJECT                  = &apos;WAPP&apos;
          OBJ_NAME                = obj_name.
*        EXCEPTIONS
*          OTHERS                  = 1.

    CALL FUNCTION &apos;RS_WORKING_AREA_INIT&apos;.

*   save page
    CALL METHOD newPage-&gt;save
      EXPORTING
*        P_SAVE_ACTIVE      = &apos;X&apos;
        P_WITH_ALL_TEXTS   = &apos;X&apos;.
*      EXCEPTIONS
*        NOT_CHANGED        = 1
*        ERROR_OCCURED      = 2
*        INVALID_PARAMETERS = 3
*        others             = 4
*            .
*    if sy-subrc &lt;&gt; 0.
**raise error
*      exit.
*    endif.

    pageNode ?= pageIterator-&gt;get_next( ).
  endwhile. &quot;pageNode

****************Create SICF node****************
  CALL FUNCTION &apos;HTTP_GET_NODEGUID&apos;
    EXPORTING
      parguid        = &apos;5MR7OICIELJY8B1AFT2X1CCKV&apos;
      &quot;GUID of node &quot;/sap/bc/bsp&quot;
      nodename       = &apos;SAP&apos;
    IMPORTING
      nodeguid       = l_nodeguid
    EXCEPTIONS
      node_not_found = 1
      OTHERS         = 2.

  l_icfname = bspAttributes-applname.
  l_icfdocu = bspAttributes-text.
  translate l_icfname to lower case.

  CALL FUNCTION &apos;HTTPTREE_INSERT_NODE&apos;
    EXPORTING
      p_icf_name                      = l_icfname
      p_icfparguid                    = l_nodeguid
      p_icfdocu                       = l_icfdocu
      p_doculang                      = sy-langu
      p_icfactive                     = &apos;X&apos;         &quot;activate service
      p_package                       = devclass
   EXCEPTIONS
      NO_NEW_VIRTUAL_HOST             = 1
      SPECIAL_SERVICE_ERROR           = 2
      PARENT_NOT_EXISTING             = 3
      ENQUEUE_ERROR                   = 4
      NODE_ALREADY_EXISTING           = 5
      EMPTY_DOCU                      = 6
      DOCULANG_NOT_INSTALLED          = 7
      SECURITY_INFO_ERROR             = 8
      USER_PASSWORD_ERROR             = 9
      PASSWORD_ENCRYPTION_ERROR       = 10
      INVALID_URL                     = 11
      INVALID_OTR_CONCEPT             = 12
      FORMFLG401_ERROR                = 13
      HANDLER_ERROR                   = 14
      TRANSPORT_ERROR                 = 15
      TADIR_ERROR                     = 16
      PACKAGE_NOT_FOUND               = 17
      OTHERS                          = 18
            .

* i guess if we made it this far, we will assume success
* successful install
  name = objName.

endmethod.</source>
  </method>
  <method CLSNAME="ZSAPLINK" CMPNAME="DELETEOBJECT" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>method DELETEOBJECT.
*/---------------------------------------------------------------------\
*|   This file is part of the SAPlink-plugins.                         |
*|                                                                     |
*|   The code of this project is provided to you under the current     |
*|   version of the SAP Code Exchange Terms of Use. You can find the   |
*|   text on the SAP Code Exchange webpage at http://www.sdn.sap.com   |
*|                                                                     |
*|   SAPlink is provided to you AS IS with no guarantee, warranty or   |
*|   support.                                                          |
*\---------------------------------------------------------------------/

data bspName type o2applname.
data bspAttributes type O2APPLATTR.
data bspExt type o2applext.
data bspApp type ref to cl_o2_api_application.
data nameSpace type skwf_urlp.
data folderName type string.
data objectName type SEU_OBJKEY.
data obj_name type E071-OBJ_NAME.
data l_nodeguid type ICFNODGUID.
data l_icfname  type ICFNAME.

data bspPages type o2pagename_table.
data bspPage type o2pagename.
data pagekey type o2pagkey.

  bspName = objName.

* save external name for later
  call method cl_o2_api_application=&gt;get_application_external_name
    EXPORTING
      p_application_key   = bspName
      p_version           = &apos;A&apos;
    IMPORTING
      p_application_name  = bspExt
    EXCEPTIONS
      object_not_existing = 1.
  if sy-subrc &lt;&gt; 0.
    bspExt = bspName.
  endif.

* load bsp
  call method cl_o2_api_application=&gt;load
    EXPORTING
      p_application_name  = bspName
    IMPORTING
      p_application       = bspApp
    EXCEPTIONS
      object_not_existing = 1
      permission_failure  = 2
      error_occured       = 3.
  if sy-subrc &lt;&gt; 0.
    case sy-subrc.
      when 3.
        raise exception type zcx_saplink
          exporting textid = zcx_saplink=&gt;not_authorized.
      when 9.
        raise exception type zcx_saplink
          exporting textid = zcx_saplink=&gt;not_found.
      when others.
        raise exception type zcx_saplink
          exporting textid = zcx_saplink=&gt;system_error.
    endcase.
  endif.

* set bsp changeable
  call method bspApp-&gt;set_changeable
    EXPORTING
      p_changeable                = &apos;X&apos;
      p_complete_application      = &apos;X&apos;
    EXCEPTIONS
      action_cancelled            = 1
      object_locked_by_other_user = 2
      permission_failure          = 3
      object_already_changeable   = 0
      object_already_unlocked     = 5
      object_just_created         = 6
      object_deleted              = 7
      object_modified             = 8
      object_not_existing         = 9
      object_invalid              = 10
      error_occured               = 11.
  if sy-subrc &lt;&gt; 0.
    case sy-subrc.
      when 2.
        raise exception type zcx_saplink
          exporting textid = zcx_saplink=&gt;locked.
      when 3.
        raise exception type zcx_saplink
          exporting textid = zcx_saplink=&gt;not_authorized.
      when 9.
        raise exception type zcx_saplink
          exporting textid = zcx_saplink=&gt;not_found.
      when others.
        raise exception type zcx_saplink
          exporting textid = zcx_saplink=&gt;system_error.
    endcase.
  endif.

* delete BSP pages
  call method cl_o2_api_application=&gt;get_all_pages_static
    EXPORTING
      p_application_key = bspName
    IMPORTING
      p_pages           = bspPages
    EXCEPTIONS
      object_not_found  = 1.

  loop at bspPages into bspPage.
    pageKey-applname = bspPage-applname.
    pageKey-pagekey  = bspPage-pagekey.
    call method cl_o2_page=&gt;delete_page_for_application
      EXPORTING
        p_pagekey           = pageKey
      EXCEPTIONS
        object_not_existing = 1
        error_occured       = 2.
  endloop.

* delete bsp
  call method bspApp-&gt;delete
    EXCEPTIONS
      object_not_empty      = 1
      object_not_changeable = 2
      object_invalid        = 3
      action_cancelled      = 4
      permission_failure    = 5
      error_occured         = 6.
   if sy-subrc &lt;&gt; 0.
    case sy-subrc.
      when 5.
        raise exception type zcx_saplink
          exporting textid = zcx_saplink=&gt;not_authorized.
      when others.
        raise exception type zcx_saplink
          exporting textid = zcx_saplink=&gt;system_error.
    endcase.
  endif.

* reset lock
  objectName = bspName.
  call method cl_o2_api_application=&gt;call_access_permission
    EXPORTING
      p_mode                 = &apos;FREE&apos;
      p_object               = objectName
      p_complete_application = &apos;X&apos;
    EXCEPTIONS
      action_canceled        = 1
      enqueued_by_user       = 2
      locked_by_author       = 3
      permission_failure     = 4
      error_occured          = 5.

* remove from working area
  obj_name = objectName.
  call function &apos;RS_DELETE_FROM_WORKING_AREA&apos;
    EXPORTING
      object    = &apos;WAPD&apos;
      obj_name  = obj_name
      immediate = &apos;X&apos;.

* delete folder in mime repository
  nameSpace = &apos;SAP&apos;.
  folderName = bspExt.

  call method cl_wb_mime_repository=&gt;delete_appl_folder
    EXPORTING
      folder_name          = folderName
      name_space           = nameSpace
    EXCEPTIONS
      no_folder_name       = 1
      folder_not_found     = 2
      name_space_not_found = 3
      error_occured        = 4
      others               = 5.

****************Delete SICF node****************
  CALL FUNCTION &apos;HTTP_GET_NODEGUID&apos;
    EXPORTING
      parguid        = &apos;5MR7OICIELJY8B1AFT2X1CCKV&apos;
      &quot;GUID of node &quot;/sap/bc/bsp&quot;
      nodename       = &apos;SAP&apos;
    IMPORTING
      nodeguid       = l_nodeguid
    EXCEPTIONS
      node_not_found = 1
      OTHERS         = 2.

  l_icfname = bspName.
  translate l_icfname to lower case.

  call function &apos;HTTPTREE_DELETE_NODE&apos;
    exporting
      p_icf_name                        = l_icfname
      p_icfparguid                      = l_nodeguid
    exceptions
      no_virtual_host_delete            = 1
      special_service_error             = 2
      enqueue_error                     = 3
      node_not_existing                 = 4
      node_has_childs                   = 5
      node_is_aliased                   = 6
      node_not_in_original_system       = 7
      transport_error                   = 8
      tadir_error                       = 9
      db_error                          = 10
      others                            = 11.
endmethod.</source>
  </method>
  <method CLSNAME="ZSAPLINK" CMPNAME="GETOBJECTTYPE" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>method GETOBJECTTYPE.
*/---------------------------------------------------------------------\
*|   This file is part of the SAPlink-plugins.                         |
*|                                                                     |
*|   The code of this project is provided to you under the current     |
*|   version of the SAP Code Exchange Terms of Use. You can find the   |
*|   text on the SAP Code Exchange webpage at http://www.sdn.sap.com   |
*|                                                                     |
*|   SAPlink is provided to you AS IS with no guarantee, warranty or   |
*|   support.                                                          |
*\---------------------------------------------------------------------/

  objecttype = &apos;WAPA&apos;. &quot;BSP Application

endmethod.</source>
  </method>
 </CLAS>
 <CLAS CLSNAME="ZSAPLINK_WTAG" VERSION="1" LANGU="E" DESCRIPT="SAPlink - BSP plugin" CATEGORY="00" EXPOSURE="2" STATE="1" RELEASE="0" CLSCCINCL="X" FIXPT="X" UNICODE="X" CLSBCCAT="00" DURATION_TYPE="0 " RISK_LEVEL="0 " REFCLSNAME="ZSAPLINK">
  <localImplementation>*&quot;* local class implementation for public class
*&quot;* use this source file for the implementation part of
*&quot;* local helper classes</localImplementation>
  <localTypes>*&quot;* use this source file for any type declarations (class
*&quot;* definitions, interfaces or data types) you need for method
*&quot;* implementation or private method&apos;s signature</localTypes>
  <localMacros>*&quot;* use this source file for any macro definitions you need
*&quot;* in the implementation part of the class</localMacros>
  <inheritance CLSNAME="ZSAPLINK_WTAG" REFCLSNAME="ZSAPLINK" VERSION="1" STATE="1">
   <redefinition CLSNAME="ZSAPLINK_WTAG" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="CHECKEXISTS" EXPOSURE="2"/>
   <redefinition CLSNAME="ZSAPLINK_WTAG" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="CREATEIXMLDOCFROMOBJECT" EXPOSURE="2"/>
   <redefinition CLSNAME="ZSAPLINK_WTAG" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="CREATEOBJECTFROMIXMLDOC" EXPOSURE="2"/>
   <redefinition CLSNAME="ZSAPLINK_WTAG" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="DELETEOBJECT" EXPOSURE="1"/>
   <redefinition CLSNAME="ZSAPLINK_WTAG" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="GETOBJECTTYPE" EXPOSURE="1"/>
  </inheritance>
  <method CLSNAME="ZSAPLINK_WTAG" CMPNAME="ACCESS_PERMISSION" VERSION="1" LANGU="E" DESCRIPT="Call RS_ACCESS_PERMISSION" EXPOSURE="0" STATE="1" EDITORDER="2 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="1" MTDNEWEXC="X" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZSAPLINK_WTAG" CMPNAME="ACCESS_PERMISSION" SCONAME="P_OBJECT_KEY" VERSION="1" LANGU="E" DESCRIPT="Object Key" CMPTYPE="1" MTDTYPE="0" EDITORDER="3 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="C"/>
   <parameter CLSNAME="ZSAPLINK_WTAG" CMPNAME="ACCESS_PERMISSION" SCONAME="P_MODE" VERSION="1" LANGU="E" DESCRIPT="Operation &apos;FREE&apos; | &apos;INSERT&apos;" CMPTYPE="1" MTDTYPE="0" EDITORDER="4 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="STRING" PARVALUE="&apos;INSERT&apos;" PAROPTIONL="X"/>
   <parameter CLSNAME="ZSAPLINK_WTAG" CMPNAME="ACCESS_PERMISSION" SCONAME="P_NO_DIALOG" VERSION="1" LANGU="E" DESCRIPT="Single-Character Flag" CMPTYPE="1" MTDTYPE="0" EDITORDER="5 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="CHAR1" PARVALUE="&apos;X&apos;" PAROPTIONL="X"/>
   <parameter CLSNAME="ZSAPLINK_WTAG" CMPNAME="ACCESS_PERMISSION" SCONAME="P_OBJECTTYPE" VERSION="1" LANGU="E" DESCRIPT="Object Type" CMPTYPE="1" MTDTYPE="0" EDITORDER="6 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="TROBJTYPE"/>
   <parameter CLSNAME="ZSAPLINK_WTAG" CMPNAME="ACCESS_PERMISSION" SCONAME="P_DEVCLASS" VERSION="1" LANGU="E" DESCRIPT="Package" CMPTYPE="1" MTDTYPE="0" EDITORDER="7 " DISPID="0 " PARDECLTYP="1" PARPASSTYP="1" TYPTYPE="1" TYPE="DEVCLASS"/>
   <parameter CLSNAME="ZSAPLINK_WTAG" CMPNAME="ACCESS_PERMISSION" SCONAME="P_TRANSPORT_KEY" VERSION="1" LANGU="E" DESCRIPT="Complete Key of a Transport Object" CMPTYPE="1" MTDTYPE="0" EDITORDER="8 " DISPID="0 " PARDECLTYP="1" PARPASSTYP="1" TYPTYPE="1" TYPE="TRKEY"/>
   <parameter CLSNAME="ZSAPLINK_WTAG" CMPNAME="ACCESS_PERMISSION" SCONAME="P_CORR_NUM" VERSION="1" LANGU="E" DESCRIPT="Request/Task" CMPTYPE="1" MTDTYPE="0" EDITORDER="9 " DISPID="0 " PARDECLTYP="1" PARPASSTYP="1" TYPTYPE="1" TYPE="TRKORR"/>
   <parameter CLSNAME="ZSAPLINK_WTAG" CMPNAME="ACCESS_PERMISSION" SCONAME="P_MASTER_LANG" VERSION="1" LANGU="E" DESCRIPT="SAP R/3 System, Current Language" CMPTYPE="1" MTDTYPE="0" EDITORDER="10 " DISPID="0 " PARDECLTYP="1" PARPASSTYP="1" TYPTYPE="1" TYPE="SYLANGU"/>
   <parameter CLSNAME="ZSAPLINK_WTAG" CMPNAME="ACCESS_PERMISSION" SCONAME="P_MODIFY_LANG" VERSION="1" LANGU="E" DESCRIPT="SAP R/3 System, Current Language" CMPTYPE="1" MTDTYPE="0" EDITORDER="11 " DISPID="0 " PARDECLTYP="1" PARPASSTYP="1" TYPTYPE="1" TYPE="SY-LANGU"/>
   <exception CLSNAME="ZSAPLINK_WTAG" CMPNAME="ACCESS_PERMISSION" SCONAME="ZCX_SAPLINK" VERSION="1" LANGU="E" DESCRIPT="SAPlink exception class" MTDTYPE="0" EDITORDER="1 "/>
   <source>METHOD ACCESS_PERMISSION .

*  DATA:
*    l_uname TYPE syuname,
*    l_uname2 TYPE syuname,
*    l_tlibid TYPE o2tlibid.

* check object name
  CALL FUNCTION &apos;RS_ACCESS_PERMISSION&apos;
    EXPORTING
      authority_check          = &apos;X&apos;
      global_lock              = &apos;X&apos;
      mode                     = p_mode
      object                   = p_object_key
      object_class             = p_objecttype
      suppress_language_check  = p_no_dialog
      suppress_language_dialog = p_no_dialog
    IMPORTING
      devclass                 = p_devclass
      new_master_language      = p_master_lang
      korrnum                  = p_corr_num
      transport_key            = p_transport_key
      modification_language    = p_modify_lang
    EXCEPTIONS
      canceled_in_corr         = 1
      enqueued_by_user         = 2
      enqueue_system_failure   = 3
      illegal_parameter_values = 4
      locked_by_author         = 5
      no_modify_permission     = 6
      no_show_permission       = 7
      permission_failure       = 8
      request_language_denied  = 9
      OTHERS                   = 10.

  case sy-subrc.
    when 0.
    when 2 or 5.
      raise exception type zcx_saplink
        exporting textid = zcx_saplink=&gt;locked.
    when 6 or 7 or 8 or 9.
      raise exception type zcx_saplink
        exporting textid = zcx_saplink=&gt;not_authorized.
    when others.
      raise exception type zcx_saplink
        exporting textid = zcx_saplink=&gt;system_error.
  endcase.
ENDMETHOD.                    &quot;access_permission</source>
  </method>
  <method CLSNAME="ZSAPLINK" CMPNAME="CHECKEXISTS" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/

*      Plugin created by:
*      Phil Young
*      ptyoun01@gmail.com

method CHECKEXISTS .

  data P_TLIBID TYPE O2TLIBID.

  P_TLIBID = objName.
  exists = cl_o2_taglib_manager=&gt;exists_on_db( p_tlibid ).

endmethod.</source>
  </method>
  <method CLSNAME="ZSAPLINK_WTAG" CMPNAME="CORR_INSERT" VERSION="1" LANGU="E" DESCRIPT="Insert Correction" EXPOSURE="0" STATE="1" EDITORDER="1 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" MTDNEWEXC="X" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZSAPLINK_WTAG" CMPNAME="CORR_INSERT" SCONAME="P_AUTHOR" VERSION="1" LANGU="E" DESCRIPT="SAP System, User Logon Name" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="SYUNAME"/>
   <parameter CLSNAME="ZSAPLINK_WTAG" CMPNAME="CORR_INSERT" SCONAME="P_DEVCLASS" VERSION="1" LANGU="E" DESCRIPT="Package" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="DEVCLASS"/>
   <exception CLSNAME="ZSAPLINK_WTAG" CMPNAME="CORR_INSERT" SCONAME="ZCX_SAPLINK" VERSION="1" LANGU="E" DESCRIPT="SAPlink exception class" MTDTYPE="0" EDITORDER="1 "/>
   <source>*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/
method CORR_INSERT .

data myTROBJTYPE type TROBJTYPE.

myTROBJTYPE = getobjecttype( ).


  CALL FUNCTION &apos;RS_CORR_INSERT&apos;
       EXPORTING
            AUTHOR              = p_author
            GLOBAL_LOCK         = &apos;X&apos;
            OBJECT              = objName
            OBJECT_CLASS        = myTROBJTYPE
            DEVCLASS            = p_devClass
*            KORRNUM             = CORRNUMBER_LOCAL
            MASTER_LANGUAGE     = sy-langu
*            PROGRAM             = PROGRAM_LOCAL
            MODE                = &apos;INSERT&apos;
*       IMPORTING
*            AUTHOR              = UNAME
*            KORRNUM             = CORRNUMBER_LOCAL
*            DEVCLASS            = DEVCLASS_LOCAL
       EXCEPTIONS
            CANCELLED           = 1
            PERMISSION_FAILURE  = 2
            UNKNOWN_OBJECTCLASS = 3.

  if sy-subrc &lt;&gt; 0.
    case sy-subrc.
      when 2.
        raise exception type zcx_saplink
          exporting
            textid = zcx_saplink=&gt;not_authorized.
      when others.
        raise exception type zcx_saplink
          exporting
            textid = zcx_saplink=&gt;system_error.
    endcase.
  endif.

endmethod.</source>
  </method>
  <method CLSNAME="ZSAPLINK" CMPNAME="CREATEIXMLDOCFROMOBJECT" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/

*      Plugin created by:
*      Phil Young
*      ptyoun01@gmail.com

method CREATEIXMLDOCFROMOBJECT .

data rc type sysubrc.

data: my_wtag type ref to CL_O2_TAG_LIBRARY,
      l_tlibid TYPE o2tlibid.

data P_TLIB_EDIT TYPE O2TLIBEDIT.

*xml nodes
data rootNode type ref to if_ixml_element.

l_tlibid = objName.

CALL METHOD CL_O2_TAG_LIBRARY=&gt;GET_INSTANCE
  EXPORTING
    P_TLIBID      = l_tlibid
    P_STATE       = &apos;A&apos;
  RECEIVING
    P_TLIB_REF    = my_wtag
    .

CALL METHOD MY_WTAG-&gt;GET_TAGLIB
  RECEIVING
    P_TLIB_EDIT = P_TLIB_EDIT
    .

* Create parent node
  data _objType type string.
  _objType = getObjectType( ).
  rootNode = xmlDoc-&gt;create_element( _objType ).
  WTAG_SETATTRIBUTESFROMSTR( node = rootNode structure = P_TLIB_EDIT
  ).


*\--------------------------------------------------------------------/
  rc = xmldoc-&gt;append_child( rootNode ).
  ixmlDocument = xmlDoc.
endmethod.</source>
  </method>
  <method CLSNAME="ZSAPLINK" CMPNAME="CREATEOBJECTFROMIXMLDOC" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/

*      Plugin created by:
*      Phil Young
*      ptyoun01@gmail.com

method CREATEOBJECTFROMIXMLDOC .

  types:
    TT_TLINE type standard table of TLINE .
  types:
    t_t_tag TYPE HASHED TABLE OF o2tag
      WITH UNIQUE KEY tlibid tagid .
  types:
    t_t_tagt TYPE HASHED TABLE OF tagt
      WITH UNIQUE KEY tlibid tagid .
  types:
    t_t_tagatt TYPE HASHED TABLE OF o2tagatt
      WITH UNIQUE KEY tlibid tagid attid .
  types:
    t_t_tagattt TYPE HASHED TABLE OF tagattt
      WITH UNIQUE KEY tlibid tagid attid .
  types:
    t_t_tline TYPE STANDARD TABLE OF tline
      WITH DEFAULT KEY .

data rootNode type ref to if_ixml_element.
data _devclass type devclass.
data _objType type string.
data P_TLIB_EDIT TYPE O2TLIBEDIT.
data checkExists type flag.
data l_cx_ref TYPE REF TO zcx_saplink.

  _devclass = devclass.
  _objType = getObjectType( ).

  xmlDoc = ixmlDocument.
  rootNode = xmlDoc-&gt;find_from_name( _objType ).

*  call method GETSTRUCTUREFROMATTRIBUTES
  call method WTAG_GETSTRUCTUREFROMATTR
        exporting
          node = rootNode
        changing
          structure = P_TLIB_EDIT.

  objName = P_TLIB_EDIT-TLIBID.
  checkExists = checkexists( ).
  if checkExists is not initial.
    if overwrite is initial.
      raise exception type zcx_saplink
        exporting textid = zcx_saplink=&gt;existing.
    else.
*     delete object for new install
      TRY.
        deleteobject( ).

        CATCH ZCX_SAPLINK into l_cx_ref.
          raise exception l_cx_ref.
      ENDTRY.
    endif.
  endif.

*TYPES:
*
*    t_t_tag TYPE HASHED TABLE OF o2tag
*      WITH UNIQUE KEY tlibid tagid,
*
*    t_t_tagt TYPE HASHED TABLE OF tagt
*      WITH UNIQUE KEY tlibid tagid,
*
*    t_t_tagatt TYPE HASHED TABLE OF o2tagatt
*      WITH UNIQUE KEY tlibid tagid attid,
*
*    t_t_tagattt TYPE HASHED TABLE OF tagattt
*      WITH UNIQUE KEY tlibid tagid attid,
*
*    t_t_tline TYPE STANDARD TABLE OF tline
*      WITH DEFAULT KEY.
*
*TYPES: BEGIN OF t_s_docu,
*        tlibid TYPE o2tlibid,
*        tagid TYPE o2tagid,
*        dokhl TYPE dokhl,
*        dokil TYPE dokil,
*        docu TYPE t_t_tline,
*      END OF t_s_docu,
*
*      t_t_docu TYPE HASHED TABLE OF t_s_docu
*        WITH UNIQUE KEY tlibid tagid.

data wa_o2taglib type o2taglib.
data wa_taglibt type taglibt.
data it_tag type t_t_tag.
data wa_tag like line of it_tag.
data it_tagt type t_t_tagt.
data wa_tagt like line of it_tagt.
data it_tagatt type t_t_tagatt.
data wa_tagatt like line of it_tagatt.
data it_tagattt type t_t_tagattt.
data wa_tagattt like line of it_tagattt.

data wa_tags type O2TAGEDIT.
data wa_attributes type O2ATTEDIT.

data state type r3state value &apos;I&apos;.

* build tables / structures

*extension
move-corresponding P_TLIB_EDIT to wa_o2taglib.
wa_o2taglib-state = state.
wa_o2taglib-author = sy-uname.
wa_o2taglib-createdon = sy-datum.
wa_o2taglib-changedby = sy-uname.
wa_o2taglib-changedon = sy-datum.
wa_o2taglib-stamp = sy-uzeit.

move-corresponding P_TLIB_EDIT to wa_taglibt.
wa_taglibt-state = state.
wa_taglibt-langu = sy-langu.

* elements
loop at P_TLIB_EDIT-TAGS into wa_tags.
  wa_tag-tlibid = P_TLIB_EDIT-TLIBID.
  move-corresponding wa_tags to wa_tag.
  wa_tag-state = state.
  wa_tag-author = sy-uname.
  wa_tag-createdon = sy-datum.
  wa_tag-changedby = sy-uname.
  wa_tag-changedon = sy-datum.
  insert wa_tag into table it_tag.

  move-corresponding wa_tag to wa_tagt.
  wa_tagt-langu = sy-langu.
  wa_tagt-descript = wa_tags-descript.
  insert wa_tagt into table it_tagt.

* attributes
  loop at wa_tags-attributes into wa_attributes.
    move-corresponding wa_attributes to wa_tagatt.
    wa_tagatt-tlibid = P_TLIB_EDIT-TLIBID.
    wa_tagatt-state = state.
    wa_tagatt-tagid = wa_tags-tagid.
    insert wa_tagatt into table it_tagatt.

    move-corresponding wa_tagatt to wa_tagattt.
    wa_tagattt-descript = wa_attributes-descript.
    wa_tagattt-langu = sy-langu.
    insert wa_tagattt into table it_tagattt.

    clear wa_tagattt.
    clear wa_tagatt.
  endloop.

  clear wa_tag.
  clear wa_tagt.
endloop.

* put bsp extension in worklist
data TROBJTYPE type TROBJTYPE.
data trobjName type trobj_name.

TROBJTYPE = GETOBJECTTYPE( ).
trobjName = objName.

TRY.
  CALL METHOD CORR_INSERT
    EXPORTING
      P_AUTHOR    = sy-uname
      P_DEVCLASS  = devclass
      .
  CATCH ZCX_SAPLINK into l_cx_ref.
    raise exception l_cx_ref.
ENDTRY.

TRY.
  CALL METHOD ZSAPLINK_WTAG=&gt;ACCESS_PERMISSION
    EXPORTING
      P_OBJECT_KEY    = trobjName
      P_MODE          = &apos;INSERT&apos;
      P_NO_DIALOG     = &apos;X&apos;
      P_OBJECTTYPE    = TROBJTYPE
*    IMPORTING
*      P_DEVCLASS      =
*      P_TRANSPORT_KEY =
*      P_CORR_NUM      =
*      P_MASTER_LANG   =
*      P_MODIFY_LANG   =
      .
  CATCH ZCX_SAPLINK into l_cx_ref.
    raise exception l_cx_ref.
ENDTRY.



  call function &apos;RS_INSERT_INTO_WORKING_AREA&apos;
    EXPORTING
      object            = TROBJTYPE
      obj_name          = trobjName
    EXCEPTIONS
      wrong_object_name = 1.
  if sy-subrc &lt;&gt; 0.
    raise exception type zcx_saplink
      exporting textid = zcx_saplink=&gt;system_error.
  endif.


* update database tables

* extension
  INSERT INTO o2taglib VALUES wa_o2taglib.
  IF wa_taglibt IS NOT INITIAL.
    INSERT INTO taglibt VALUES wa_taglibt.
  ENDIF.
  IF sy-subrc &lt;&gt; 0.
    raise exception type zcx_saplink
      exporting textid = zcx_saplink=&gt;system_error.
  ENDIF.

* elements
  INSERT o2tag FROM TABLE it_tag.
  IF it_tagt[] IS NOT INITIAL.
    INSERT tagt FROM TABLE it_tagt.
  ENDIF.
  IF sy-subrc &lt;&gt; 0.
    raise exception type zcx_saplink
      exporting textid = zcx_saplink=&gt;system_error.
  ENDIF.

* element attributes
  IF it_tagatt[] IS NOT INITIAL.
    INSERT o2tagatt FROM TABLE it_tagatt.
  ENDIF.
  IF it_tagattt[] IS NOT INITIAL.
    INSERT tagattt FROM TABLE it_tagattt.
  ENDIF.
  IF sy-subrc &lt;&gt; 0.
    raise exception type zcx_saplink
      exporting textid = zcx_saplink=&gt;system_error.
  ENDIF.

  CALL METHOD ZSAPLINK_WTAG=&gt;UPDATE_OBJECT_LISTS
    EXPORTING
      P_TLIBID    = P_TLIB_EDIT-TLIBID
      P_OPERATION = &apos;INSERT&apos;
      .

  TRY.
    CALL METHOD ZSAPLINK_WTAG=&gt;ACCESS_PERMISSION
      EXPORTING
        P_OBJECT_KEY    = trobjName
        P_MODE          = &apos;FREE&apos;
        P_NO_DIALOG     = &apos;X&apos;
        P_OBJECTTYPE    = TROBJTYPE
*      IMPORTING
*        P_DEVCLASS      =
*        P_TRANSPORT_KEY =
*        P_CORR_NUM      =
*        P_MASTER_LANG   =
*        P_MODIFY_LANG   =
        .
    CATCH ZCX_SAPLINK into l_cx_ref.
      raise exception l_cx_ref.
  ENDTRY.

  name = objName.

*CL_O2_TAGLIB_MANAGER-IMPORT_EXTENSION
endmethod.</source>
  </method>
  <method CLSNAME="ZSAPLINK" CMPNAME="DELETEOBJECT" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/

*      Plugin created by:
*      Phil Young
*      ptyoun01@gmail.com

method DELETEOBJECT .
data myTLIBID type O2TLIBID.
data l_cx_ref TYPE REF TO zcx_saplink.
data TROBJTYPE type TROBJTYPE.
data trobjName type trobj_name.

TROBJTYPE = GETOBJECTTYPE( ).
trobjName = objName.

myTLIBID = objName.

TRY.
  CALL METHOD ZSAPLINK_WTAG=&gt;ACCESS_PERMISSION
    EXPORTING
      P_OBJECT_KEY    = trobjName
      P_MODE          = &apos;MODIFY&apos;
      P_NO_DIALOG     = &apos;X&apos;
      P_OBJECTTYPE    = TROBJTYPE
*    IMPORTING
*      P_DEVCLASS      =
*      P_TRANSPORT_KEY =
*      P_CORR_NUM      =
*      P_MASTER_LANG   =
*      P_MODIFY_LANG   =
      .
  CATCH ZCX_SAPLINK into l_cx_ref.
    raise exception l_cx_ref.
ENDTRY.

* update database tables

* extension
delete from o2taglib where TLIBID = myTLIBID.
delete from taglibt where TLIBID = myTLIBID.

* elements
delete from o2tag where TLIBID = myTLIBID.
delete from tagt where TLIBID = myTLIBID.

* element attributes
delete from o2tagatt where TLIBID = myTLIBID.
delete from tagattt where TLIBID = myTLIBID.

TRY.
  CALL METHOD ZSAPLINK_WTAG=&gt;ACCESS_PERMISSION
    EXPORTING
      P_OBJECT_KEY    = trobjName
      P_MODE          = &apos;FREE&apos;
      P_NO_DIALOG     = &apos;X&apos;
      P_OBJECTTYPE    = TROBJTYPE
*    IMPORTING
*      P_DEVCLASS      =
*      P_TRANSPORT_KEY =
*      P_CORR_NUM      =
*      P_MASTER_LANG   =
*      P_MODIFY_LANG   =
      .
  CATCH ZCX_SAPLINK into l_cx_ref.
    raise exception l_cx_ref.
ENDTRY.

* remove entry from working area
  delete_from_working_area( p_tlibid = myTLIBID
                            p_global = &apos;X&apos;
                            p_objecttype = TROBJTYPE ).

* this call also deletes $TMP TADIR entries
  update_object_lists( p_tlibid    = myTLIBID
                       p_operation = &apos;DELETE&apos; ).

endmethod.</source>
  </method>
  <method CLSNAME="ZSAPLINK_WTAG" CMPNAME="DELETE_FROM_WORKING_AREA" VERSION="1" LANGU="E" DESCRIPT="Delete BSP Extension from Worklist" EXPOSURE="0" STATE="1" EDITORDER="3 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="1" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZSAPLINK_WTAG" CMPNAME="DELETE_FROM_WORKING_AREA" SCONAME="P_TLIBID" VERSION="1" LANGU="E" DESCRIPT="Tag Library: ID" CMPTYPE="1" MTDTYPE="0" EDITORDER="12 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="O2TLIBID"/>
   <parameter CLSNAME="ZSAPLINK_WTAG" CMPNAME="DELETE_FROM_WORKING_AREA" SCONAME="P_GLOBAL" VERSION="1" LANGU="E" DESCRIPT="&apos;X&apos;: ACTUALIZE_WORKING_AREA=&apos;X&apos;" CMPTYPE="1" MTDTYPE="0" EDITORDER="13 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="XFELD"/>
   <parameter CLSNAME="ZSAPLINK_WTAG" CMPNAME="DELETE_FROM_WORKING_AREA" SCONAME="P_OBJECTTYPE" VERSION="1" LANGU="E" DESCRIPT="Object Type" CMPTYPE="1" MTDTYPE="0" EDITORDER="14 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="TROBJTYPE"/>
   <source>METHOD DELETE_FROM_WORKING_AREA .

  DATA:
    l_obj_name TYPE trobj_name.

  CALL FUNCTION &apos;RS_WORKING_AREA_INIT&apos;.

  l_obj_name = p_tlibid.

  CALL FUNCTION &apos;RS_DELETE_FROM_WORKING_AREA&apos;
    EXPORTING
      object                 = p_objecttype
      obj_name               = l_obj_name
      immediate              = &apos;X&apos;
      actualize_working_area = p_global.

ENDMETHOD.                    &quot;delete_from_working_area</source>
  </method>
  <method CLSNAME="ZSAPLINK" CMPNAME="GETOBJECTTYPE" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/
method GETOBJECTTYPE .

  objecttype = &apos;WTAG&apos;. &quot;BSP Extension

endmethod.</source>
  </method>
  <method CLSNAME="ZSAPLINK_WTAG" CMPNAME="UPDATE_OBJECT_LISTS" VERSION="1" LANGU="E" DESCRIPT="Updating Object Lists" EXPOSURE="0" STATE="1" EDITORDER="4 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="1" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZSAPLINK_WTAG" CMPNAME="UPDATE_OBJECT_LISTS" SCONAME="P_TLIBID" VERSION="1" LANGU="E" DESCRIPT="BSP Extension: ID" CMPTYPE="1" MTDTYPE="0" EDITORDER="15 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="O2TLIBID"/>
   <parameter CLSNAME="ZSAPLINK_WTAG" CMPNAME="UPDATE_OBJECT_LISTS" SCONAME="P_OPERATION" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="16 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="C"/>
   <source>METHOD UPDATE_OBJECT_LISTS .

  DATA:
    l_tree_log TYPE REF TO cl_wb_tree_log,
    l_treelog_entry TYPE treelog,
    l_treelog_tab TYPE treelog_tab.

  CALL FUNCTION &apos;RS_TREE_OBJECT_PLACEMENT&apos;
    EXPORTING
      object    = p_tlibid
      type      = swbm_c_type_o2_taglibrary
      operation = p_operation.

  CREATE OBJECT l_tree_log.

  CONCATENATE &apos;TL_&apos; p_tlibid INTO l_treelog_entry-tname.
  l_treelog_entry-type = swbm_c_type_o2_taglibrary.
  l_treelog_entry-name = p_tlibid.
  APPEND l_treelog_entry TO l_treelog_tab.

  CALL METHOD l_tree_log-&gt;raise_entry_changed
    EXPORTING
      p_treelog = l_treelog_tab.

ENDMETHOD.                    &quot;update_object_lists</source>
  </method>
  <method CLSNAME="ZSAPLINK_WTAG" CMPNAME="WTAG_GETSTRUCTUREFROMATTR" VERSION="1" LANGU="E" DESCRIPT="Updates a structure with node attributes" EXPOSURE="1" STATE="1" EDITORDER="2 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZSAPLINK_WTAG" CMPNAME="WTAG_GETSTRUCTUREFROMATTR" SCONAME="NODE" VERSION="1" LANGU="E" DESCRIPT="IF_IXML_ELEMENT" CMPTYPE="1" MTDTYPE="0" EDITORDER="3 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="3" TYPE="IF_IXML_ELEMENT"/>
   <parameter CLSNAME="ZSAPLINK_WTAG" CMPNAME="WTAG_GETSTRUCTUREFROMATTR" SCONAME="STRUCTURE" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="4 " DISPID="0 " PARDECLTYP="2" PARPASSTYP="1" TYPTYPE="1" TYPE="DATA"/>
   <source>*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/
method WTAG_GETSTRUCTUREFROMATTR .
data attributeList type ref to IF_IXML_NAMED_NODE_MAP.
data nodeIterator type ref to IF_IXML_NODE_ITERATOR.
data attributeNode type ref to if_ixml_node.
data value type string.
data name type string.
field-symbols &lt;value&gt; type any.
************************************************************************
data tableDescr type ref to cl_abap_tabledescr.
data structDescr type ref to cl_abap_structdescr.
data typeDescr type ref to cl_abap_typedescr.
data childNode type ref to if_ixml_element.
data filter type ref to if_ixml_node_filter.
data iterator type ref to if_ixml_node_iterator.
data childName type string.
data it_foo type ref to data.
data wa_foo type ref to data.
field-symbols: &lt;tab&gt; type any table.
field-symbols: &lt;row&gt; type any.

************************************************************************

  clear structure.
  attributeList = node-&gt;GET_ATTRIBUTES( ).
  nodeIterator = attributeList-&gt;create_iterator( ).
  attributeNode = nodeIterator-&gt;get_next( ).
  while attributeNode is not initial.
    name = attributeNode-&gt;get_name( ).
    if name = &apos;VERSION&apos;.
      value = &apos;0&apos;.
    else.
      value = attributeNode-&gt;get_value( ).
    endif.
    assign component name of structure structure to &lt;value&gt;.
    if sy-subrc = 0.
************************************************************************
      typeDescr = cl_abap_typedescr=&gt;DESCRIBE_BY_DATA(
        p_data = &lt;value&gt; ).
      try.
        tableDescr ?= typeDescr.
        catch CX_SY_MOVE_CAST_ERROR.
      endtry.
      try.
        structDescr ?= typeDescr.
        catch CX_SY_MOVE_CAST_ERROR.
      endtry.
      if tableDescr is initial and structDescr is initial.
        &lt;value&gt; = value.
      elseif tableDescr is initial.
        childNode ?= Node-&gt;get_first_child( ).
        while childNode is not initial.
          childName = childNode-&gt;GET_NAME( ).
          if childName = name.
            call method WTAG_GETSTRUCTUREFROMATTR
                  exporting
                    node = childNode
                  changing
                    structure = &lt;value&gt;.
            exit.
          endif.
          childNode ?= childNode-&gt;get_next( ).
        endwhile.
      else.
        create data it_foo type handle tableDescr.
        assign it_foo-&gt;* to &lt;tab&gt;.
        create data wa_foo like line of &lt;tab&gt;.
        assign wa_foo-&gt;* to &lt;row&gt;.

        free childNode.
        childNode ?= Node-&gt;get_first_child( ).
        while childNode is not initial.
          childName = childNode-&gt;GET_NAME( ).
          if childName = name.
            clear &lt;row&gt;.
            call method WTAG_GETSTRUCTUREFROMATTR
                  exporting
                    node = childNode
                  changing
                    structure = &lt;row&gt;.
            insert &lt;row&gt; into table &lt;tab&gt;.
          endif.
          childNode ?= childNode-&gt;get_next( ).
        endwhile.
        &lt;value&gt; = &lt;tab&gt;.
      endif.

      clear tableDescr.
      clear structDescr.
      clear typedescr.
      clear it_foo.
      clear wa_foo.
************************************************************************
    endif.
    attributeNode = nodeIterator-&gt;get_next( ).
  endwhile.

endmethod.</source>
  </method>
  <method CLSNAME="ZSAPLINK_WTAG" CMPNAME="WTAG_SETATTRIBUTESFROMSTR" VERSION="1" LANGU="E" DESCRIPT="Creates an XML Attribute list from any structure" EXPOSURE="1" STATE="1" EDITORDER="1 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZSAPLINK_WTAG" CMPNAME="WTAG_SETATTRIBUTESFROMSTR" SCONAME="NODE" VERSION="1" LANGU="E" DESCRIPT="xml Element" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="3" TYPE="IF_IXML_ELEMENT"/>
   <parameter CLSNAME="ZSAPLINK_WTAG" CMPNAME="WTAG_SETATTRIBUTESFROMSTR" SCONAME="STRUCTURE" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="DATA"/>
   <source>*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/
method WTAG_SETATTRIBUTESFROMSTR .

data int type i.
int = int.
data structDescr type ref to cl_abap_structDescr.
data aComponent type abap_compdescr.
field-symbols &lt;fieldValue&gt; type any.
data rc type sysubrc.
data sName type string.
data sValue type string.
****************************************************************
data tableDescr type ref to cl_abap_tabledescr.
data structDescr2 type ref to cl_abap_structdescr.
data typeDescr type ref to cl_abap_typedescr.
data childNode type ref to if_ixml_element.
data childName type string.
data it_foo type ref to data.
field-symbols: &lt;tab&gt; type any table.
field-symbols: &lt;row&gt; type any.
****************************************************************

  structDescr ?= cl_abap_structDescr=&gt;describe_by_data( structure ).
  loop at structDescr-&gt;components into aComponent.
    assign component aComponent-name of structure
      structure to &lt;fieldValue&gt;.
    if sy-subrc = 0.
      sName = aComponent-name.
*      sValue = &lt;fieldValue&gt;.
*     for certain attributes, set to a standard for exporting
      case sName.
        when &apos;VERSION&apos;. &quot;version should always export as inactive
          sValue = &apos;0&apos;.
        when &apos;DEVCLASS&apos;. &quot;development class should always be $TMP
          sValue = &apos;$TMP&apos;.
        when others.
**********************************************************
  typeDescr = cl_abap_typedescr=&gt;DESCRIBE_BY_DATA(
    p_data = &lt;fieldValue&gt; ).
  try.
    tableDescr ?= typeDescr.
    catch CX_SY_MOVE_CAST_ERROR.
  endtry.
  try.
    structDescr2 ?= typeDescr.
    catch CX_SY_MOVE_CAST_ERROR.
  endtry.
  if tableDescr is initial and structDescr2 is initial.
    sValue = &lt;fieldValue&gt;.
  elseif tableDescr is initial.
    sValue = &apos;$$STRUCTURE$$&apos;.
    childName = aComponent-name.
    childNode = xmlDoc-&gt;create_element( childName ).
    WTAG_SETATTRIBUTESFROMSTR( node = childNode
                                structure = &lt;fieldValue&gt; ).
    rc = Node-&gt;append_child( childNode ).

  else.
    sValue = &apos;$$TABLE$$&apos;.
    create data it_foo type handle tableDescr.
*    get reference of &lt;fieldvalue&gt; into it_foo.
    assign it_foo-&gt;* to &lt;tab&gt;.
    &lt;tab&gt; = &lt;fieldValue&gt;.
    loop at &lt;tab&gt; assigning &lt;row&gt;.
      childName = aComponent-name.
      childNode = xmlDoc-&gt;create_element( childName ).
      WTAG_SETATTRIBUTESFROMSTR( node = childNode
                                  structure = &lt;row&gt; ).
      rc = Node-&gt;append_child( childNode ).
    endloop.
  endif.
  clear it_foo.
  clear tableDescr.
  clear structDescr2.
  clear typedescr.

*          sValue = &lt;fieldValue&gt;.
**********************************************************

      endcase.
      if sValue is not initial.
        rc = Node-&gt;set_attribute( name = sName value = sValue ).
      endif.
    else.
* WHAT?&gt;!??
    endif.
  endloop.
endmethod.</source>
  </method>
 </CLAS>
 <CLAS CLSNAME="ZSAPLINK_DOCUMENTATION" VERSION="1" LANGU="E" DESCRIPT="SAPlink - Documentation" CATEGORY="00" EXPOSURE="2" STATE="1" RELEASE="0" CLSFINAL="X" CLSCCINCL="X" FIXPT="X" UNICODE="X" CLSBCCAT="00" DURATION_TYPE="0 " RISK_LEVEL="0 " REFCLSNAME="ZSAPLINK">
  <localImplementation>*&quot;* local class implementation for public class
*&quot;* use this source file for the implementation part of
*&quot;* local helper classes</localImplementation>
  <localTypes>*&quot;* use this source file for any type declarations (class
*&quot;* definitions, interfaces or data types) you need for method
*&quot;* implementation or private method&apos;s signature</localTypes>
  <localMacros>*&quot;* use this source file for any macro definitions you need
*&quot;* in the implementation part of the class</localMacros>
  <inheritance CLSNAME="ZSAPLINK_DOCUMENTATION" REFCLSNAME="ZSAPLINK" VERSION="1" STATE="1">
   <redefinition CLSNAME="ZSAPLINK_DOCUMENTATION" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="CHECKEXISTS" EXPOSURE="2"/>
   <redefinition CLSNAME="ZSAPLINK_DOCUMENTATION" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="CREATEIXMLDOCFROMOBJECT" EXPOSURE="2"/>
   <redefinition CLSNAME="ZSAPLINK_DOCUMENTATION" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="CREATEOBJECTFROMIXMLDOC" EXPOSURE="2"/>
   <redefinition CLSNAME="ZSAPLINK_DOCUMENTATION" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="DELETEOBJECT" EXPOSURE="1"/>
   <redefinition CLSNAME="ZSAPLINK_DOCUMENTATION" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="GETOBJECTTYPE" EXPOSURE="1"/>
  </inheritance>
  <method CLSNAME="ZSAPLINK" CMPNAME="CHECKEXISTS" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/
METHOD checkexists.

*      Plugin created by:
*      Rich Heilman
*      rich.heilman.jr@gmail.com
  DATA xdokhl TYPE dokhl.
  DATA xdoc_object(62) TYPE c.
  DATA xdocu_id TYPE dokhl-id.
  DATA xdocu_obj TYPE dokhl-object.

  xdoc_object = objname.
  xdocu_id  = xdoc_object(2).
  xdocu_obj = xdoc_object+2(60).

  CLEAR xdokhl.
  SELECT SINGLE * INTO xdokhl FROM dokhl
             WHERE id = xdocu_id
               AND object = xdocu_obj.
  IF sy-subrc =  0.
    exists = &apos;X&apos;.
  ENDIF.

ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZSAPLINK" CMPNAME="CREATEIXMLDOCFROMOBJECT" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/
METHOD createixmldocfromobject.

*      Plugin created by:
*      Rich Heilman
*      rich.heilman.jr@gmail.com

  DATA root_node     TYPE REF TO if_ixml_element.
  DATA txtlines_node TYPE REF TO if_ixml_element.
  DATA rc            TYPE sysubrc.
  DATA _objtype      TYPE string.

  DATA: BEGIN OF xdokhl,
        objname(62) TYPE c,
        id          TYPE dokhl-id,
        object      TYPE dokhl-object,
        typ         TYPE dokhl-typ,
        dokversion  TYPE dokhl-dokversion,
        END OF xdokhl.

  DATA ilines TYPE TABLE OF tline.
  DATA xlines LIKE LINE OF ilines.

  DATA _docuname TYPE e071-obj_name.
  DATA xdocu_id  TYPE dokhl-id.
  DATA xdocu_obj TYPE dokhl-object.

  _docuname = objname.

* Separate id and object from combined object name
  xdocu_id  = _docuname(2).
  xdocu_obj = _docuname+2(60).

* Check against database
  CLEAR xdokhl.
  SELECT SINGLE id object typ dokversion
        INTO (xdokhl-id, xdokhl-object, xdokhl-typ, xdokhl-dokversion)
           FROM dokhl
             WHERE id = xdocu_id
                AND object = xdocu_obj.
  IF sy-subrc &lt;&gt; 0.
    RAISE EXCEPTION TYPE zcx_saplink
     EXPORTING textid = zcx_saplink=&gt;error_message
               msg    = `Documentation object not found, use full ` &amp;
                        `object name including ID and Object(example DTZTEST`.
  ENDIF.

 xdokhl-objname = _docuname.

* Create parent node
  _objtype  = getobjecttype( ).
  root_node = xmldoc-&gt;create_element( _objtype ).
  me-&gt;setattributesfromstructure( node = root_node structure = xdokhl  ).

* Read the documentation text
  CALL FUNCTION &apos;DOCU_READ&apos;
    EXPORTING
      id      = xdokhl-id
      langu   = sy-langu
      object  = xdokhl-object
      typ     = xdokhl-typ
      version = xdokhl-dokversion
    TABLES
      line    = ilines.

* Write records to XML node
  LOOP AT ilines INTO xlines.
    txtlines_node = xmldoc-&gt;create_element( `TextLines` ).
    me-&gt;setattributesfromstructure( node = txtlines_node structure = xlines ).
    rc = root_node-&gt;append_child( txtlines_node ).
  ENDLOOP.

* Add node
  rc = xmldoc-&gt;append_child( root_node ).
  ixmldocument = xmldoc.

ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZSAPLINK" CMPNAME="CREATEOBJECTFROMIXMLDOC" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/
METHOD createobjectfromixmldoc.

*      Plugin created by:
*      Rich Heilman
*      rich.heilman.jr@gmail.com

  DATA root_node        TYPE REF TO if_ixml_element.
  DATA txtline_node     TYPE REF TO if_ixml_element.
  DATA txtline_filter   TYPE REF TO if_ixml_node_filter.
  DATA txtline_iterator TYPE REF TO if_ixml_node_iterator.

  DATA: BEGIN OF xdokhl,
        objname(62) TYPE c,
        id          TYPE dokhl-id,
        object      TYPE dokhl-object,
        typ         TYPE dokhl-typ,
        dokversion  TYPE dokhl-dokversion,
        END OF xdokhl.

  DATA: ilines  TYPE TABLE OF tline.
  DATA: objname TYPE e071-obj_name.
  DATA _objtype TYPE string.

  FIELD-SYMBOLS: &lt;xlines_wa&gt; LIKE LINE OF ilines.

  _objtype = getobjecttype( ).

  xmldoc = ixmldocument.
  root_node = xmldoc-&gt;find_from_name( _objtype ).

* Get Root
  me-&gt;getstructurefromattributes(
          EXPORTING  node      = root_node
          CHANGING   structure = xdokhl ).

  objname = xdokhl-objname.

* Get TextLines from XML
  FREE: txtline_filter, txtline_iterator, txtline_node.
  txtline_filter = xmldoc-&gt;create_filter_name( `TextLines` ).
  txtline_iterator = xmldoc-&gt;create_iterator_filtered( txtline_filter ).
  txtline_node ?= txtline_iterator-&gt;get_next( ).
  WHILE txtline_node IS NOT INITIAL.
    APPEND INITIAL LINE TO ilines ASSIGNING &lt;xlines_wa&gt;.
    me-&gt;getstructurefromattributes(
            EXPORTING   node      = txtline_node
            CHANGING    structure = &lt;xlines_wa&gt; ).
    txtline_node ?= txtline_iterator-&gt;get_next( ).
  ENDWHILE.

  CALL FUNCTION &apos;RS_ACCESS_PERMISSION&apos;
    EXPORTING
      global_lock              = &apos;X&apos;
      mode                     = &apos;INSERT&apos;
      object                   = objname
      object_class             = &apos;DOCV&apos;
    EXCEPTIONS
      canceled_in_corr         = 1
      enqueued_by_user         = 3
      enqueue_system_failure   = 4
      locked_by_author         = 5
      illegal_parameter_values = 6
      no_modify_permission     = 7
      no_show_permission       = 8
      permission_failure       = 9.

  IF sy-subrc &lt;&gt; 0.
    CASE sy-subrc.
      WHEN 7 OR 8 OR 9.
        RAISE EXCEPTION TYPE zcx_saplink
          EXPORTING
            textid = zcx_saplink=&gt;not_authorized.
      WHEN 5.
        RAISE EXCEPTION TYPE zcx_saplink
          EXPORTING
            textid = zcx_saplink=&gt;error_message
            msg = &apos;object locked&apos;.
      WHEN OTHERS.
        RAISE EXCEPTION TYPE zcx_saplink
          EXPORTING
            textid = zcx_saplink=&gt;system_error.
    ENDCASE.
  ENDIF.

  DATA checkexists TYPE flag.
  checkexists = checkexists( ).
  IF checkexists IS NOT INITIAL.
    IF overwrite IS INITIAL.
      RAISE EXCEPTION TYPE zcx_saplink
        EXPORTING textid = zcx_saplink=&gt;existing.
    ELSE.
*     delete object for new install
      deleteobject( ).
    ENDIF.
  ENDIF.

  CALL FUNCTION &apos;RS_CORR_INSERT&apos;
    EXPORTING
      object              = objname
      object_class        = &apos;DOCV&apos;
      mode                = &apos;INSERT&apos;
      global_lock         = &apos;X&apos;
*     devclass            = devclass
      author              = sy-uname
      master_language     = sy-langu
    EXCEPTIONS
      cancelled           = 1
      permission_failure  = 2
      unknown_objectclass = 3.
  IF sy-subrc &lt;&gt; 0.
    CASE sy-subrc.
      WHEN 2.
        RAISE EXCEPTION TYPE zcx_saplink
          EXPORTING
            textid = zcx_saplink=&gt;not_authorized.
      WHEN OTHERS.
        RAISE EXCEPTION TYPE zcx_saplink
          EXPORTING
            textid = zcx_saplink=&gt;system_error.
    ENDCASE.
  ENDIF.

  CALL FUNCTION &apos;DOCU_UPD&apos;
    EXPORTING
      id       = xdokhl-id
      langu    = sy-langu
      object   = xdokhl-object
      typ      = xdokhl-typ
    TABLES
      line     = ilines
    EXCEPTIONS
      ret_code = 1
      OTHERS   = 2.
  IF sy-subrc &lt;&gt; 0.
    RAISE EXCEPTION TYPE zcx_saplink
     EXPORTING textid = zcx_saplink=&gt;error_message
               msg    = `Documentation object import failed`.
  ENDIF.

  name = objname.

ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZSAPLINK" CMPNAME="DELETEOBJECT" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/
METHOD deleteobject.

*      Plugin created by:
*      Rich Heilman
*      rich.heilman.jr@gmail.com
  DATA xdokhl TYPE dokhl.
  DATA _docuname TYPE e071-obj_name.
  DATA xdocu_id  TYPE dokhl-id.
  DATA xdocu_obj TYPE dokhl-object.

  _docuname = objname.

  xdocu_id  = _docuname(2).
  xdocu_obj = _docuname+2(60).

  CLEAR xdokhl.
  SELECT SINGLE * INTO xdokhl
           FROM dokhl
             WHERE id = xdocu_id
               AND object = xdocu_obj.

  CALL FUNCTION &apos;DOCU_DEL&apos;
    EXPORTING
      id       = xdokhl-id
      langu    = sy-langu
      object   = xdokhl-object
      typ      = xdokhl-typ
    EXCEPTIONS
      ret_code = 1
      OTHERS   = 2.
  IF sy-subrc &lt;&gt; 0.
    RAISE EXCEPTION TYPE zcx_saplink
     EXPORTING textid = zcx_saplink=&gt;error_message
               msg    = `Error when deleting existing documentation object`.
  ENDIF.

ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZSAPLINK" CMPNAME="GETOBJECTTYPE" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/
method GETOBJECTTYPE.

*      Plugin created by:
*      Rich Heilman
*      rich.heilman.jr@gmail.com

  objecttype = &apos;DOCV&apos;.  &quot;Documentation

endmethod.</source>
  </method>
 </CLAS>
 <CLAS CLSNAME="ZSAPLINK_FUNCTIONGROUP" VERSION="1" LANGU="E" DESCRIPT="SAPlink - Function Groups" CATEGORY="00" EXPOSURE="2" STATE="1" RELEASE="0" CLSFINAL="X" CLSCCINCL="X" FIXPT="X" UNICODE="X" CLSBCCAT="00" DURATION_TYPE="0 " RISK_LEVEL="0 " REFCLSNAME="ZSAPLINK">
  <localImplementation>*&quot;* local class implementation for public class
*&quot;* use this source file for the implementation part of
*&quot;* local helper classes</localImplementation>
  <localTypes>*&quot;* use this source file for any type declarations (class
*&quot;* definitions, interfaces or data types) you need for method
*&quot;* implementation or private method&apos;s signature</localTypes>
  <localMacros>*&quot;* use this source file for any macro definitions you need
*&quot;* in the implementation part of the class</localMacros>
  <inheritance CLSNAME="ZSAPLINK_FUNCTIONGROUP" REFCLSNAME="ZSAPLINK" VERSION="1" STATE="1">
   <redefinition CLSNAME="ZSAPLINK_FUNCTIONGROUP" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="CHECKEXISTS" EXPOSURE="2"/>
   <redefinition CLSNAME="ZSAPLINK_FUNCTIONGROUP" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="CREATEIXMLDOCFROMOBJECT" EXPOSURE="2"/>
   <redefinition CLSNAME="ZSAPLINK_FUNCTIONGROUP" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="CREATEOBJECTFROMIXMLDOC" EXPOSURE="2"/>
   <redefinition CLSNAME="ZSAPLINK_FUNCTIONGROUP" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="DELETEOBJECT" EXPOSURE="1"/>
   <redefinition CLSNAME="ZSAPLINK_FUNCTIONGROUP" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="GETOBJECTTYPE" EXPOSURE="1"/>
  </inheritance>
  <method CLSNAME="ZSAPLINK_FUNCTIONGROUP" CMPNAME="ACTUALIZE_OBJECT_TREE" VERSION="1" LANGU="E" DESCRIPT="Refresh Object Tree" EXPOSURE="0" STATE="1" EDITORDER="1 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>method ACTUALIZE_OBJECT_TREE.
  DATA: l_offset TYPE i.
  DATA: l_tree_string TYPE string.

  CONCATENATE &apos;PG_&apos; &apos;SAPL&apos; objname INTO l_tree_string.

* If we supported namespaces, the following code would be required
*  FIND ALL OCCURRENCES OF &apos;/&apos; IN objname MATCH OFFSET l_offset.
*  IF sy-subrc = 0.
*    l_tree_string  = objname.
*    REPLACE SECTION OFFSET l_offset LENGTH 1 OF  l_tree_string  WITH &apos;/SAPL&apos;.
*    CONCATENATE &apos;PG_&apos; l_tree_string  INTO l_tree_string.
*  ELSE.
*    CONCATENATE &apos;PG_&apos; &apos;SAPL&apos; objname INTO l_tree_string.
*  ENDIF.

  CALL FUNCTION &apos;WB_TREE_ACTUALIZE&apos;
    EXPORTING
      tree_name = l_tree_string.

endmethod.</source>
  </method>
  <method CLSNAME="ZSAPLINK" CMPNAME="CHECKEXISTS" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>method CHECKEXISTS.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/

  select single area from tlibg into objname where area = objname.
  if sy-subrc = 0.
    exists = &apos;X&apos;.
  endif.

endmethod.</source>
  </method>
  <method CLSNAME="ZSAPLINK" CMPNAME="CREATEIXMLDOCFROMOBJECT" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>method CREATEIXMLDOCFROMOBJECT.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/

*      Plugin created by:
*      Rich Heilman
*      rich.heilman.jr@gmail.com

  types: begin of t_tlibt,
           area type tlibt-area,
           spras type tlibt-spras,
           areat type tlibt-areat,
         end of t_tlibt.

  data rootnode            type ref to if_ixml_element.
  data mainprognode        type ref to if_ixml_element.
  data includesnode        type ref to if_ixml_element.
  data functgroupnode      type ref to if_ixml_element.
  data functionmodulesnode type ref to if_ixml_element.
  data docNode             type ref to if_ixml_element.
  data textpoolnode        type ref to if_ixml_element.
  data dynpronode          type ref to if_ixml_element.
  data statusnode          type ref to if_ixml_element.
  data sourcenode          type ref to if_ixml_element.
  data fmdocumenation      type ref to if_ixml_element.

  data rc                type sysubrc.
  data progattribs       type trdir.
  data progsource        type rswsourcet.
  data _objname(30)      type c.
  data sourcestring      type string.
  data _objtype          type string.
  data functiongroupname type  tlibg-area.
  data mainfgprogname    type sy-repid.
  DATA l_offset          TYPE i.
  data xtlibt            type t_tlibt.

  _objtype = getobjecttype( ).
  rootnode = xmldoc-&gt;create_element( _objtype ).

* function groups in reserved namespace, not supported.
  IF objname(1) = &apos;/&apos;.
    RAISE EXCEPTION TYPE zcx_saplink
      EXPORTING
        textid = zcx_saplink=&gt;error_message
        msg    = &apos;Function Groups in / namespace are not supported&apos;.
  ENDIF.

*  create main program name.  Other namespaces are not supported
  CONCATENATE &apos;SAPL&apos; objname INTO mainfgprogname.

* If we did support namespaces, this is how we would
* build the main program name
*  FIND ALL OCCURRENCES OF &apos;/&apos; IN objname MATCH OFFSET l_offset.
*  IF sy-subrc = 0.
*    mainfgprogname = objname.
*    REPLACE SECTION OFFSET l_offset LENGTH 1 OF mainfgprogname WITH &apos;/SAPL&apos;.
*  ELSE.
*    CONCATENATE &apos;SAPL&apos; objname INTO mainfgprogname.
*  ENDIF.

* Set function group name
  functiongroupname = objname.

* Get main program attributes
  select single * from trdir
           into progattribs
                where name = mainfgprogname.
  if sy-subrc &lt;&gt; 0.
    clear ixmldocument.
    RAISE EXCEPTION type zcx_saplink
      EXPORTING
        textid = zcx_saplink=&gt;not_found.
  endif.

* Get Function group attributes
  clear xtlibt.
  select single * from tlibt
             into corresponding fields of xtlibt
                     where spras = sy-langu
                       and area  = functiongroupname.
  if sy-subrc &lt;&gt; 0.
    RAISE EXCEPTION type zcx_saplink
      EXPORTING
        textid = zcx_saplink=&gt;not_found.
  endif.

  setattributesfromstructure( node = rootnode
                              structure =  xtlibt  ).

  _objname = objname.
  objname  = mainfgprogname.    &quot; Main program is object

* Write main program for function group.
  mainprognode = xmldoc-&gt;create_element( &apos;mainprogram&apos; ).
  setattributesfromstructure( node = mainprognode
                              structure =   progattribs  ).

  sourcenode = xmldoc-&gt;create_element( &apos;source&apos; ).
  read report mainfgprogname into progsource.
  sourcestring = buildsourcestring( sourcetable = progsource ).
  rc = sourcenode-&gt;if_ixml_node~set_value( sourcestring ).

  textpoolnode =  get_textpool( ).
  rc = mainprognode-&gt;append_child( textpoolnode ).

  docNode = get_documentation( ).
  rc = rootNOde-&gt;append_child( docNode ).

  dynpronode = get_dynpro( ).
  rc = mainprognode-&gt;append_child( dynpronode ).

  statusnode =  get_pfstatus( ).
  rc = mainprognode-&gt;append_child( statusnode ).

  rc = mainprognode-&gt;append_child( sourcenode ).
  rc = rootnode-&gt;append_child( mainprognode ).

* Get the includes
  includesnode = get_includes( main_prog = mainfgprogname
                               fct_group = functiongroupname ).
  rc = rootnode-&gt;append_child( includesnode ).

* Get function modules data.
  functionmodulesnode = get_function_modules( functiongroupname ).
  rc = rootnode-&gt;append_child( functionmodulesnode ).

  rc = xmldoc-&gt;append_child( rootnode ).

  ixmldocument = xmldoc.
  objname      =  _objname.

endmethod.</source>
  </method>
  <method CLSNAME="ZSAPLINK" CMPNAME="CREATEOBJECTFROMIXMLDOC" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>method CREATEOBJECTFROMIXMLDOC.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/

*      Plugin created by:
*      Rich Heilman
*      rich.heilman.jr@gmail.com

  TYPES: BEGIN OF t_tlibt,
           area TYPE tlibt-area,
           spras TYPE tlibt-spras,
           areat TYPE tlibt-areat,
         END OF t_tlibt.

  DATA rootnode      TYPE REF TO if_ixml_element.
  DATA sourcenode    TYPE REF TO if_ixml_element.
  DATA textnode      TYPE REF TO if_ixml_element.
  DATA docnode       TYPE REF TO if_ixml_element.
  DATA dynpnode      TYPE REF TO if_ixml_element.
  DATA statnode      TYPE REF TO if_ixml_element.

  DATA mainprog_node        TYPE REF TO if_ixml_element.
  DATA functionmodule_node  TYPE REF TO if_ixml_element.
  DATA functionmodules_node TYPE REF TO if_ixml_element.
  DATA includes_node        TYPE REF TO if_ixml_element.
  DATA fmdoc_node      TYPE REF TO if_ixml_element.

  DATA progattribs   TYPE trdir.
  DATA source        TYPE string.
  DATA sourcetable   TYPE table_of_strings.
  DATA _objname(30)  TYPE c.
  DATA _objtype      TYPE string.
  DATA checkexists   TYPE flag.

  DATA xtlibt TYPE t_tlibt.
  DATA xstext TYPE tftit-stext.

  DATA functiongroupname TYPE  tlibg-area.

  _objtype = getobjecttype( ).
  xmldoc   = ixmldocument.

  rootnode = xmldoc-&gt;find_from_name( _objtype ).

  _objname = objname.

  getstructurefromattributes(
           EXPORTING
                node      = rootnode
           CHANGING
                structure = xtlibt ).

  functiongroupname = xtlibt-area.

* function groups in reserved namespace, not supported.
  IF functiongroupname(1) = &apos;/&apos;.
    RAISE EXCEPTION TYPE zcx_saplink
      EXPORTING
        textid = zcx_saplink=&gt;error_message
        msg    = &apos;Function Groups in / namespace are not supported&apos;.
  ENDIF.

  objname = functiongroupname.

  checkexists = checkexists( ).
  IF checkexists IS NOT INITIAL.
    IF overwrite IS INITIAL.
      RAISE EXCEPTION TYPE zcx_saplink
        EXPORTING
          textid = zcx_saplink=&gt;existing.
    ELSE.
*     delete object for new install
      deleteobject( ).
    ENDIF.
  ENDIF.

* Insert the function group
  xstext = xtlibt-areat.
  CALL FUNCTION &apos;RS_FUNCTION_POOL_INSERT&apos;
    EXPORTING
      function_pool           = xtlibt-area
      short_text              = xstext
      devclass                = devclass
    EXCEPTIONS
      name_already_exists     = 1
      name_not_correct        = 2
      function_already_exists = 3
      invalid_function_pool   = 4
      invalid_name            = 5
      too_many_functions      = 6
      no_modify_permission    = 7
      no_show_permission      = 8
      enqueue_system_failure  = 9
      canceled_in_corr        = 10
      undefined_error         = 11
      OTHERS                  = 12.

* Create the function modules
  functionmodules_node  = rootnode-&gt;find_from_name( &apos;functionmodules&apos; ).
  create_function_modules( fm_node = functionmodules_node
                           fct_group =  functiongroupname ).

* Create Includes
  includes_node  = rootnode-&gt;find_from_name( &apos;includeprograms&apos; ).
  create_includes( devclass = devclass
                   incl_node = includes_node ).

* Update main program..... with include statements, dynpros, gui status
  mainprog_node  = rootnode-&gt;find_from_name( &apos;mainprogram&apos; ).

  getstructurefromattributes(
         EXPORTING
            node      = mainprog_node
         CHANGING
            structure = progattribs ).

  objname = progattribs-name.     &quot; Main Program Name is now the object

* Update the main program
  enqueue_abap( ).
  transport_copy( author = progattribs-cnam
                  devclass = devclass ).

* Source
  sourcenode  = mainprog_node-&gt;find_from_name( &apos;source&apos; ).
  source      = sourcenode-&gt;get_value( ).
  sourcetable = buildtablefromstring( source ).
  create_source( source = sourcetable
                 attribs = progattribs ).

* Documentation
  docnode = rootnode-&gt;find_from_name( &apos;functionGroupDocumentation&apos; ).
  create_documentation( docnode ).

* text pool
  textnode = mainprog_node-&gt;find_from_name( &apos;textPool&apos; ).
  create_textpool( textnode ).

* Dynpros
  dynpnode = mainprog_node-&gt;find_from_name( &apos;dynpros&apos; ).
  create_dynpro( dynpnode ).

* Gui status, titles
  statnode = mainprog_node-&gt;find_from_name( &apos;pfstatus&apos; ).
  create_pfstatus( statnode ).

  dequeue_abap( ).

* Rebuild tree structure for SE80
  actualize_object_tree( ).

* successful install
  objname = functiongroupname.
  name = objname.

endmethod.</source>
  </method>
  <method CLSNAME="ZSAPLINK_FUNCTIONGROUP" CMPNAME="CREATE_DOCUMENTATION" VERSION="1" LANGU="E" DESCRIPT="Create Documentation" EXPOSURE="0" STATE="1" EDITORDER="4 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZSAPLINK_FUNCTIONGROUP" CMPNAME="CREATE_DOCUMENTATION" SCONAME="DOCNODE" VERSION="1" LANGU="E" DESCRIPT="IF_IXML_ELEMENT" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="3" TYPE="IF_IXML_ELEMENT"/>
   <source>method CREATE_DOCUMENTATION.

  DATA txtline_node     TYPE REF TO if_ixml_element.
  DATA txtline_filter   TYPE REF TO if_ixml_node_filter.
  DATA txtline_iterator TYPE REF TO if_ixml_node_iterator.

  DATA lang_node     TYPE REF TO if_ixml_element.
  DATA lang_filter   TYPE REF TO if_ixml_node_filter.
  DATA lang_iterator TYPE REF TO if_ixml_node_iterator.

  data obj_name type DOKHL-OBJECT.
  data prog_name type string.
  data language  type string.
  data obj_langu type DOKHL-LANGU.
  data lv_str type string.
  data rc type sy-subrc.

  DATA lt_lines  TYPE TABLE OF tline.
  FIELD-SYMBOLS: &lt;ls_lines&gt; LIKE LINE OF lt_lines.

  if docnode is not bound.
    return.
  endif.

  prog_name = docNode-&gt;get_attribute( name = &apos;OBJECT&apos; ).
  obj_name = prog_name.

* If no prog name, then there was no program documenation, just return.
  if prog_name is initial.
    return.
  endif.

* Get languages from XML
  FREE: lang_filter, lang_iterator, lang_node.
  lang_filter = docNode-&gt;create_filter_name( `language` ).
  lang_iterator = docNode-&gt;create_iterator_filtered( lang_filter ).
  lang_node ?= lang_iterator-&gt;get_next( ).
  WHILE lang_node IS NOT INITIAL.

    refresh lt_lines.
    language = lang_node-&gt;get_attribute( name = &apos;SPRAS&apos; ).
    obj_langu = language.

* Get TextLines from XML
    FREE: txtline_filter, txtline_iterator, txtline_node.
    txtline_filter = lang_node-&gt;create_filter_name( `textLine` ).
    txtline_iterator = lang_node-&gt;create_iterator_filtered( txtline_filter ).
    txtline_node ?= txtline_iterator-&gt;get_next( ).
    WHILE txtline_node IS NOT INITIAL.
      APPEND INITIAL LINE TO lt_lines ASSIGNING &lt;ls_lines&gt;.
      me-&gt;getstructurefromattributes(
              EXPORTING   node      = txtline_node
              CHANGING    structure = &lt;ls_lines&gt; ).
      txtline_node ?= txtline_iterator-&gt;get_next( ).
    ENDWHILE.

* Delete any documentation that may currently exist.
    CALL FUNCTION &apos;DOCU_DEL&apos;
      EXPORTING
        id       = &apos;RE&apos;   &quot;&lt;-- Report/program documentation
        langu    = obj_langu
        object   = obj_name
        typ      = &apos;E&apos;
      EXCEPTIONS
        ret_code = 1
        OTHERS   = 2.

* Now update with new documentation text
    CALL FUNCTION &apos;DOCU_UPD&apos;
      EXPORTING
        id       = &apos;RE&apos;
        langu    = obj_langu
        object   = obj_name
        typ      = &apos;E&apos;
      TABLES
        line     = lt_lines
      EXCEPTIONS
        ret_code = 1
        OTHERS   = 2.
    IF sy-subrc &lt;&gt; 0.
      RAISE EXCEPTION TYPE zcx_saplink
        EXPORTING
          textid = zcx_saplink=&gt;error_message
          msg    = `Program Documentation object import failed`.
    ENDIF.

    lang_node ?= lang_iterator-&gt;get_next( ).
  ENDWHILE.

endmethod.</source>
  </method>
  <method CLSNAME="ZSAPLINK_FUNCTIONGROUP" CMPNAME="CREATE_DYNPRO" VERSION="1" LANGU="E" DESCRIPT="Create Dynpro" EXPOSURE="0" STATE="1" EDITORDER="17 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZSAPLINK_FUNCTIONGROUP" CMPNAME="CREATE_DYNPRO" SCONAME="DYNP_NODE" VERSION="1" LANGU="E" DESCRIPT="IF_IXML_ELEMENT" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="3" TYPE="IF_IXML_ELEMENT"/>
   <source>method CREATE_DYNPRO.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/

  types: begin of tdyn_head_temp.
         include type d020s.
  types: dtext type d020t-dtxt.
  types: end of tdyn_head_temp.

  data: idyn_fldl type table of d021s,
        idyn_flow type table of d022s,
        idyn_mcod type table of d023s.

  data: xdyn_head type  d020s,
        xdyn_fldl type  d021s,
        xdyn_flow type  d022s,
        xdyn_mcod type  d023s.

  data: xdyn_text_string type string.
  data: xdyn_text        type d020t-dtxt .
  data: xdyn_head_temp   type tdyn_head_temp.

  data _objname type trobj_name.

  data dynpros_node       type ref to if_ixml_element.
  data dynpros_filter     type ref to if_ixml_node_filter.
  data dynpros_iterator   type ref to if_ixml_node_iterator.

  data dynpro_node        type ref to if_ixml_element.
  data dynpro_filter      type ref to if_ixml_node_filter.
  data dynpro_iterator    type ref to if_ixml_node_iterator.

  data dynfldl_node       type ref to if_ixml_element.
  data dynfldl_filter     type ref to if_ixml_node_filter.
  data dynfldl_iterator   type ref to if_ixml_node_iterator.

  data dynmcod_node       type ref to if_ixml_element.
  data dynmcod_filter     type ref to if_ixml_node_filter.
  data dynmcod_iterator   type ref to if_ixml_node_iterator.

  data dynflow_node       type ref to if_ixml_element.

  data xdynpro_flow_source type string.
  data idynpro_flow_source type table_of_strings.

  _objname = objname.

  dynpros_node =  dynp_node.
  check dynpros_node is not initial.

  free: dynpro_filter, dynpro_iterator, dynpro_node.
  dynpro_filter = dynpros_node-&gt;create_filter_name( &apos;dynpro&apos; ).
  dynpro_iterator =
        dynpros_node-&gt;create_iterator_filtered( dynpro_filter ).
  dynpro_node ?= dynpro_iterator-&gt;get_next( ).

  while dynpro_node is not initial.

    clear:    xdyn_head, xdyn_fldl, xdyn_flow, xdyn_mcod.
    refresh:  idyn_fldl, idyn_flow, idyn_mcod.

* Get the header data for the screen.
    call method getstructurefromattributes
      exporting
        node      = dynpro_node
      changing
        structure = xdyn_head_temp.

    xdyn_head    = xdyn_head_temp.
    xdyn_text    = xdyn_head_temp-dtext.

* Retrieve field list
    free: dynfldl_filter, dynfldl_iterator, dynfldl_node.
    dynfldl_filter = dynpro_node-&gt;create_filter_name( &apos;dynprofield&apos; ).
    dynfldl_iterator =
        dynpro_node-&gt;create_iterator_filtered( dynfldl_filter ).
    dynfldl_node ?= dynfldl_iterator-&gt;get_next( ).
    while dynfldl_node is not initial.
      call method getstructurefromattributes
        exporting
          node      = dynfldl_node
        changing
          structure = xdyn_fldl.
      append xdyn_fldl to idyn_fldl.
      dynfldl_node ?= dynfldl_iterator-&gt;get_next( ).
    endwhile.

* Retrieve matchcode data.
    free: dynmcod_filter, dynmcod_iterator, dynmcod_node.
    dynmcod_filter = dynpro_node-&gt;create_filter_name( &apos;dynprofield&apos; ).
    dynmcod_iterator =
         dynpro_node-&gt;create_iterator_filtered( dynmcod_filter ).
    dynmcod_node ?= dynmcod_iterator-&gt;get_next( ).
    while dynmcod_node is not initial.
      call method getstructurefromattributes
        exporting
          node      = dynmcod_node
        changing
          structure = xdyn_mcod.
      append xdyn_mcod to idyn_mcod.
      dynmcod_node ?= dynmcod_iterator-&gt;get_next( ).
    endwhile.

* retieve flow logic source.
    clear xdynpro_flow_source.  refresh idynpro_flow_source.
    clear xdyn_flow.            refresh idyn_flow.
    free dynflow_node.
    dynflow_node = dynpro_node-&gt;find_from_name( &apos;dynproflowsource&apos; ).
    xdynpro_flow_source  = dynflow_node-&gt;get_value( ).
    idynpro_flow_source = buildtablefromstring( xdynpro_flow_source ).
    loop at idynpro_flow_source into xdyn_flow.
      append xdyn_flow  to idyn_flow.
    endloop.

* Build dynpro from data
    call function &apos;RPY_DYNPRO_INSERT_NATIVE&apos;
      exporting
*       suppress_corr_checks           = &apos; &apos;
*       CORRNUM                        = &apos; &apos;
        header                         = xdyn_head
        dynprotext                     = xdyn_text
*       SUPPRESS_EXIST_CHECKS          = &apos; &apos;
*       USE_CORRNUM_IMMEDIATEDLY       = &apos; &apos;
*       SUPPRESS_COMMIT_WORK           = &apos; &apos;
      tables
        fieldlist                      = idyn_fldl
        flowlogic                      = idyn_flow
        params                         = idyn_mcod
     exceptions
        cancelled                      = 1
        already_exists                 = 2
        program_not_exists             = 3
        not_executed                   = 4
        others                         = 5.
    if sy-subrc &lt;&gt; 0.
      raise exception type zcx_saplink
        exporting textid = zcx_saplink=&gt;system_error.
    endif.

    dynpro_node ?= dynpro_iterator-&gt;get_next( ).

  endwhile.

endmethod.</source>
  </method>
  <method CLSNAME="ZSAPLINK_FUNCTIONGROUP" CMPNAME="CREATE_FM_DOCUMENTATION" VERSION="1" LANGU="E" DESCRIPT="Create FM Documentation" EXPOSURE="0" STATE="1" EDITORDER="5 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZSAPLINK_FUNCTIONGROUP" CMPNAME="CREATE_FM_DOCUMENTATION" SCONAME="DOCNODE" VERSION="1" LANGU="E" DESCRIPT="IF_IXML_ELEMENT" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="3" TYPE="IF_IXML_ELEMENT"/>
   <source>method CREATE_FM_DOCUMENTATION.

  DATA txtline_node     TYPE REF TO if_ixml_element.
  DATA txtline_filter   TYPE REF TO if_ixml_node_filter.
  DATA txtline_iterator TYPE REF TO if_ixml_node_iterator.

  DATA lang_node     TYPE REF TO if_ixml_element.
  DATA lang_filter   TYPE REF TO if_ixml_node_filter.
  DATA lang_iterator TYPE REF TO if_ixml_node_iterator.

  data obj_name type DOKHL-OBJECT.
  data fm_parm_name type string.
  data language  type string.
  data obj_langu type DOKHL-LANGU.
  data lv_str type string.
  data rc type sy-subrc.

  DATA lt_lines  TYPE TABLE OF tline.
  FIELD-SYMBOLS: &lt;ls_lines&gt; LIKE LINE OF lt_lines.

  if docnode is not bound.
    return.
  endif.

  fm_parm_name = docNode-&gt;get_attribute( name = &apos;OBJECT&apos; ).
  obj_name = fm_parm_name.

* If no fm_parm_name, then there was no documenation, just return.
  if fm_parm_name is initial.
    return.
  endif.

* Get languages from XML
  FREE: lang_filter, lang_iterator, lang_node.
  lang_filter = docNode-&gt;create_filter_name( `language` ).
  lang_iterator = docNode-&gt;create_iterator_filtered( lang_filter ).
  lang_node ?= lang_iterator-&gt;get_next( ).
  WHILE lang_node IS NOT INITIAL.

    refresh lt_lines.
    language = lang_node-&gt;get_attribute( name = &apos;SPRAS&apos; ).
    obj_langu = language.

* Get TextLines from XML
    FREE: txtline_filter, txtline_iterator, txtline_node.
    txtline_filter = lang_node-&gt;create_filter_name( `textLine` ).
    txtline_iterator = lang_node-&gt;create_iterator_filtered( txtline_filter ).
    txtline_node ?= txtline_iterator-&gt;get_next( ).
    WHILE txtline_node IS NOT INITIAL.
      APPEND INITIAL LINE TO lt_lines ASSIGNING &lt;ls_lines&gt;.
      me-&gt;getstructurefromattributes(
              EXPORTING   node      = txtline_node
              CHANGING    structure = &lt;ls_lines&gt; ).
      txtline_node ?= txtline_iterator-&gt;get_next( ).
    ENDWHILE.

* Delete any documentation that may currently exist.
    CALL FUNCTION &apos;DOCU_DEL&apos;
      EXPORTING
        id       = &apos;FU&apos;   &quot;&lt;-- function module documentation
        langu    = obj_langu
        object   = obj_name
        typ      = &apos;T&apos;
      EXCEPTIONS
        ret_code = 1
        OTHERS   = 2.

* Now update with new documentation text
    CALL FUNCTION &apos;DOCU_UPD&apos;
      EXPORTING
        id       = &apos;FU&apos;
        langu    = obj_langu
        object   = obj_name
        typ      = &apos;T&apos;
      TABLES
        line     = lt_lines
      EXCEPTIONS
        ret_code = 1
        OTHERS   = 2.
    IF sy-subrc &lt;&gt; 0.
      RAISE EXCEPTION TYPE zcx_saplink
        EXPORTING
          textid = zcx_saplink=&gt;error_message
          msg    = `Program Documentation object import failed`.
    ENDIF.

    lang_node ?= lang_iterator-&gt;get_next( ).
  ENDWHILE.

endmethod.</source>
  </method>
  <method CLSNAME="ZSAPLINK_FUNCTIONGROUP" CMPNAME="CREATE_FUNCTION_MODULES" VERSION="1" LANGU="E" DESCRIPT="Create Function Modules" EXPOSURE="0" STATE="1" EDITORDER="3 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZSAPLINK_FUNCTIONGROUP" CMPNAME="CREATE_FUNCTION_MODULES" SCONAME="FM_NODE" VERSION="1" LANGU="E" DESCRIPT="IF_IXML_ELEMENT" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="3" TYPE="IF_IXML_ELEMENT"/>
   <parameter CLSNAME="ZSAPLINK_FUNCTIONGROUP" CMPNAME="CREATE_FUNCTION_MODULES" SCONAME="FCT_GROUP" VERSION="1" LANGU="E" DESCRIPT="Function group, to which the function module belongs" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="TLIBG-AREA"/>
   <source>method CREATE_FUNCTION_MODULES.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/

  TYPES: BEGIN OF tfunct_head,
           name TYPE rs38l-name,
           global TYPE rs38l-global,
           remote TYPE rs38l-remote,
           utask  TYPE rs38l-utask,
           stext  TYPE tftit-stext,
           area   TYPE rs38l-area,
           END OF tfunct_head.

  DATA functionmodules_node TYPE REF TO if_ixml_element.

  DATA source      TYPE string.
  DATA sourcetable TYPE table_of_strings.

  DATA functiongroupname TYPE  tlibg-area.
  DATA mainfgprogname    TYPE trdir-name.

  DATA xfunct_head TYPE tfunct_head.
  DATA iimport     TYPE TABLE OF rsimp.
  DATA ichange     TYPE TABLE OF rscha.
  DATA iexport     TYPE TABLE OF rsexp.
  DATA itables     TYPE TABLE OF rstbl.
  DATA iexcepl     TYPE TABLE OF rsexc.
  DATA idocume     TYPE TABLE OF rsfdo.
  DATA isource     TYPE TABLE OF rssource.
  DATA isource_new TYPE  rsfb_source.

  DATA ximport     TYPE  rsimp.
  DATA xchange     TYPE  rscha.
  DATA xexport     TYPE  rsexp.
  DATA xtables     TYPE  rstbl.
  DATA xexcepl     TYPE  rsexc.
  DATA xdocume     TYPE  rsfdo.
  DATA xsource     TYPE  rssource.
  DATA xsource_new LIKE LINE OF isource_new.

  DATA node          TYPE REF TO if_ixml_element.
  DATA filter        TYPE REF TO if_ixml_node_filter.
  DATA iterator      TYPE REF TO if_ixml_node_iterator.

  DATA im_node       TYPE REF TO if_ixml_element.
  DATA im_filter     TYPE REF TO if_ixml_node_filter.
  DATA im_iterator   TYPE REF TO if_ixml_node_iterator.

  DATA ex_node       TYPE REF TO if_ixml_element.
  DATA ex_filter     TYPE REF TO if_ixml_node_filter.
  DATA ex_iterator   TYPE REF TO if_ixml_node_iterator.

  DATA ch_node       TYPE REF TO if_ixml_element.
  DATA ch_filter     TYPE REF TO if_ixml_node_filter.
  DATA ch_iterator   TYPE REF TO if_ixml_node_iterator.

  DATA ta_node       TYPE REF TO if_ixml_element.
  DATA ta_filter     TYPE REF TO if_ixml_node_filter.
  DATA ta_iterator   TYPE REF TO if_ixml_node_iterator.

  DATA el_node       TYPE REF TO if_ixml_element.
  DATA el_filter     TYPE REF TO if_ixml_node_filter.
  DATA el_iterator   TYPE REF TO if_ixml_node_iterator.

  DATA dm_node       TYPE REF TO if_ixml_element.
  DATA dm_filter     TYPE REF TO if_ixml_node_filter.
  DATA dm_iterator   TYPE REF TO if_ixml_node_iterator.

  DATA sc_node       TYPE REF TO if_ixml_element.
  DATA sc_filter     TYPE REF TO if_ixml_node_filter.
  DATA sc_iterator   TYPE REF TO if_ixml_node_iterator.

  DATA scn_node       TYPE REF TO if_ixml_element.
  DATA scn_filter     TYPE REF TO if_ixml_node_filter.
  DATA scn_iterator   TYPE REF TO if_ixml_node_iterator.

  DATA fmdoc_node     TYPE REF TO if_ixml_element.

  functionmodules_node = fm_node.
  functiongroupname    = fct_group.

  IF functionmodules_node  IS NOT INITIAL.

    FREE: filter, iterator, node.
    filter =
         functionmodules_node-&gt;create_filter_name( &apos;functionmodule&apos; ).
    iterator = functionmodules_node-&gt;create_iterator_filtered( filter ).
    node ?= iterator-&gt;get_next( ).
    WHILE node IS NOT INITIAL.

      CALL METHOD getstructurefromattributes
        EXPORTING
          node      = node
        CHANGING
          structure = xfunct_head.

      REFRESH: iimport, ichange, iexport,
               itables, iexcepl, idocume, isource, isource_new.

* Get importing
      FREE: im_filter, im_iterator, im_node.
      im_filter = node-&gt;create_filter_name( &apos;importing&apos; ).
      im_iterator = node-&gt;create_iterator_filtered( im_filter ).
      im_node ?= im_iterator-&gt;get_next( ).
      WHILE im_node IS NOT INITIAL.
        CALL METHOD getstructurefromattributes
          EXPORTING
            node      = im_node
          CHANGING
            structure = ximport.
        APPEND ximport TO iimport.
        im_node ?= im_iterator-&gt;get_next( ).
      ENDWHILE.

* Get exporting
      FREE: ex_filter, ex_iterator, ex_node.
      ex_filter = node-&gt;create_filter_name( &apos;exporting&apos; ).
      ex_iterator = node-&gt;create_iterator_filtered( ex_filter ).
      ex_node ?= ex_iterator-&gt;get_next( ).
      WHILE ex_node IS NOT INITIAL.
        CALL METHOD getstructurefromattributes
          EXPORTING
            node      = ex_node
          CHANGING
            structure = xexport.
        APPEND xexport TO iexport.
        ex_node ?= ex_iterator-&gt;get_next( ).
      ENDWHILE.

* Get changing
      FREE: ch_filter, ch_iterator, ch_node.
      ch_filter = node-&gt;create_filter_name( &apos;changing&apos; ).
      ch_iterator = node-&gt;create_iterator_filtered( ch_filter ).
      ch_node ?= ch_iterator-&gt;get_next( ).
      WHILE ch_node IS NOT INITIAL.
        CALL METHOD getstructurefromattributes
          EXPORTING
            node      = ch_node
          CHANGING
            structure = xchange.
        APPEND xchange TO ichange.
        ch_node ?= ch_iterator-&gt;get_next( ).
      ENDWHILE.

* Get tables
      FREE: ta_filter, ta_iterator, ta_node.
      ta_filter = node-&gt;create_filter_name( &apos;tables&apos; ).
      ta_iterator = node-&gt;create_iterator_filtered( ta_filter ).
      ta_node ?= ta_iterator-&gt;get_next( ).
      WHILE ta_node IS NOT INITIAL.
        CALL METHOD getstructurefromattributes
          EXPORTING
            node      = ta_node
          CHANGING
            structure = xtables.
        APPEND xtables TO itables.
        ta_node ?= ta_iterator-&gt;get_next( ).
      ENDWHILE.

* Get exception list
      FREE: el_filter, el_iterator, el_node.
      el_filter = node-&gt;create_filter_name( &apos;exceptions&apos; ).
      el_iterator = node-&gt;create_iterator_filtered( el_filter ).
      el_node ?= el_iterator-&gt;get_next( ).
      WHILE el_node IS NOT INITIAL.
        CALL METHOD getstructurefromattributes
          EXPORTING
            node      = el_node
          CHANGING
            structure = xexcepl.
        APPEND xexcepl TO iexcepl.
        el_node ?= el_iterator-&gt;get_next( ).
      ENDWHILE.

* Get documentation
      FREE: dm_filter, dm_iterator, dm_node.
      dm_filter = node-&gt;create_filter_name( &apos;documentation&apos; ).
      dm_iterator = node-&gt;create_iterator_filtered( dm_filter ).
      dm_node ?= dm_iterator-&gt;get_next( ).
      WHILE dm_node IS NOT INITIAL.
        CALL METHOD getstructurefromattributes
          EXPORTING
            node      = dm_node
          CHANGING
            structure = xdocume.
        APPEND xdocume TO idocume.
        dm_node ?= dm_iterator-&gt;get_next( ).
      ENDWHILE.

* Get fm source

      FREE: sc_filter, sc_iterator, sc_node.
      sc_filter = node-&gt;create_filter_name( &apos;fm_source&apos; ).
      sc_iterator = node-&gt;create_iterator_filtered( sc_filter ).
      sc_node ?= sc_iterator-&gt;get_next( ).
      WHILE sc_node IS NOT INITIAL.
        source = sc_node-&gt;get_value( ).
        sourcetable = buildtablefromstring( source ).
        LOOP AT sourcetable INTO xsource.
          APPEND xsource TO isource.
        ENDLOOP.
        sc_node ?= sc_iterator-&gt;get_next( ).
      ENDWHILE.

* Get fm source new
      FREE: scn_filter, scn_iterator, scn_node.
      scn_filter = node-&gt;create_filter_name( &apos;fm_source_new&apos; ).
      scn_iterator = node-&gt;create_iterator_filtered( scn_filter ).
      scn_node ?= scn_iterator-&gt;get_next( ).
      WHILE scn_node IS NOT INITIAL.
        source = scn_node-&gt;get_value( ).
        sourcetable = buildtablefromstring( source ).
        LOOP AT sourcetable INTO xsource_new.
          APPEND xsource_new TO isource_new.
        ENDLOOP.
        scn_node ?= scn_iterator-&gt;get_next( ).
      ENDWHILE.

* INsert the function module
      CALL FUNCTION &apos;RS_FUNCTIONMODULE_INSERT&apos;
        EXPORTING
          funcname                = xfunct_head-name
          function_pool           = functiongroupname
          interface_global        = xfunct_head-global
          remote_call             = xfunct_head-remote
          update_task             = xfunct_head-utask
          short_text              = xfunct_head-stext
          save_active             = &apos; &apos; &quot;&lt;-- Need to set inactive
          new_source              = isource_new
        TABLES
          import_parameter        = iimport
          export_parameter        = iexport
          tables_parameter        = itables
          changing_parameter      = ichange
          exception_list          = iexcepl
          parameter_docu          = idocume
          source                  = isource
        EXCEPTIONS
          double_task             = 1
          error_message           = 2
          function_already_exists = 3
          invalid_function_pool   = 4
          invalid_name            = 5
          too_many_functions      = 6
          no_modify_permission    = 7
          no_show_permission      = 8
          enqueue_system_failure  = 9
          canceled_in_corr        = 10
          OTHERS                  = 11.

* Create function module documentation
      fmdoc_node = node-&gt;find_from_name( &apos;functionModuleDocumentation&apos; ).
      create_fm_documentation( fmdoc_node ).

      node ?= iterator-&gt;get_next( ).
    ENDWHILE.

  ENDIF.

endmethod.</source>
  </method>
  <method CLSNAME="ZSAPLINK_FUNCTIONGROUP" CMPNAME="CREATE_INCLUDES" VERSION="1" LANGU="E" DESCRIPT="Create Include Programs" EXPOSURE="0" STATE="1" EDITORDER="7 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZSAPLINK_FUNCTIONGROUP" CMPNAME="CREATE_INCLUDES" SCONAME="INCL_NODE" VERSION="1" LANGU="E" DESCRIPT="IF_IXML_ELEMENT" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="3" TYPE="IF_IXML_ELEMENT"/>
   <parameter CLSNAME="ZSAPLINK_FUNCTIONGROUP" CMPNAME="CREATE_INCLUDES" SCONAME="DEVCLASS" VERSION="1" LANGU="E" DESCRIPT="Development class/package" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="DEVCLASS" PARVALUE="&apos;$TMP&apos;"/>
   <source>method CREATE_INCLUDES.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/

  types: begin of tinclude,
         name(40),
         end of tinclude.

  data iinclude type table of tinclude.
  data xinclude type tinclude.

  data inc_node       type ref to if_ixml_element.
  data inc_filter     type ref to if_ixml_node_filter.
  data inc_iterator   type ref to if_ixml_node_iterator.

  data progattribs type trdir.

  data includes_node     type ref to if_ixml_element.
  data includesourcenode type ref to if_ixml_element.

  data source      type string.
  data sourcetable type table_of_strings.

  includes_node = incl_node.

  check includes_node is not initial.

  free: inc_filter, inc_iterator, inc_node.
  inc_filter = includes_node-&gt;create_filter_name( &apos;include&apos; ).
  inc_iterator = includes_node-&gt;create_iterator_filtered( inc_filter ).
  inc_node ?= inc_iterator-&gt;get_next( ).

  while inc_node is not initial.

    getstructurefromattributes(
          exporting
             node      = inc_node
          changing
             structure = progattribs ).

    includesourcenode = inc_node-&gt;find_from_name( &apos;include_source&apos; ).
    source      = includesourcenode-&gt;get_value( ).
    sourcetable = buildtablefromstring( source ).

    objname = progattribs-name.   &quot; Include Program Name is the object

    enqueue_abap( ).
    transport_copy( author = progattribs-cnam
                                       devclass = devclass ).
    create_source( source = sourcetable
                                      attribs = progattribs ).
    dequeue_abap( ).

    inc_node  ?=  inc_iterator-&gt;get_next( ).

  endwhile.

endmethod.</source>
  </method>
  <method CLSNAME="ZSAPLINK_FUNCTIONGROUP" CMPNAME="CREATE_PFSTATUS" VERSION="1" LANGU="E" DESCRIPT="Create Gui Status" EXPOSURE="0" STATE="1" EDITORDER="19 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZSAPLINK_FUNCTIONGROUP" CMPNAME="CREATE_PFSTATUS" SCONAME="PFSTAT_NODE" VERSION="1" LANGU="E" DESCRIPT="IF_IXML_ELEMENT" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="3" TYPE="IF_IXML_ELEMENT"/>
   <source>method CREATE_PFSTATUS.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/

  data: ista type table of rsmpe_stat,
        ifun type table of rsmpe_funt,
        imen type table of rsmpe_men,
        imtx type table of rsmpe_mnlt,
        iact type table of rsmpe_act,
        ibut type table of rsmpe_but,
        ipfk type table of rsmpe_pfk,
        iset type table of rsmpe_staf,
        idoc type table of rsmpe_atrt,
        itit type table of rsmpe_titt,
        ibiv type table of rsmpe_buts.

  data: xsta type rsmpe_stat,
        xfun type rsmpe_funt,
        xmen type rsmpe_men,
        xmtx type rsmpe_mnlt,
        xact type rsmpe_act,
        xbut type rsmpe_but,
        xpfk type rsmpe_pfk,
        xset type rsmpe_staf,
        xdoc type rsmpe_atrt,
        xtit type rsmpe_titt,
        xbiv type rsmpe_buts.

  data xtrkey type trkey.
  data xadm   type rsmpe_adm.
  data _program type  trdir-name.
  data _objname type trobj_name.

  data stat_node  type ref to if_ixml_element.
  data node       type ref to if_ixml_element.
  data filter     type ref to if_ixml_node_filter.
  data iterator   type ref to if_ixml_node_iterator.

  _objname = objname.

  stat_node =  pfstat_node.
  check stat_node is not initial.

* read pfstatus_sta node
  free: filter, iterator, node.
  filter = stat_node-&gt;create_filter_name( &apos;pfstatus_sta&apos; ).
  iterator = stat_node-&gt;create_iterator_filtered( filter ).
  node ?= iterator-&gt;get_next( ).
  while node is not initial.
    call method getstructurefromattributes
      exporting
        node      = node
      changing
        structure = xsta.
    append xsta to ista.
    node ?= iterator-&gt;get_next( ).
  endwhile.

* read pfstatus_fun node
  free: filter, iterator, node.
  filter = stat_node-&gt;create_filter_name( &apos;pfstatus_fun&apos; ).
  iterator = stat_node-&gt;create_iterator_filtered( filter ).
  node ?= iterator-&gt;get_next( ).
  while node is not initial.
    call method getstructurefromattributes
      exporting
        node      = node
      changing
        structure = xfun.
    append xfun to ifun.
    node ?= iterator-&gt;get_next( ).
  endwhile.

* read pfstatus_men node
  free: filter, iterator, node.
  filter = stat_node-&gt;create_filter_name( &apos;pfstatus_men&apos; ).
  iterator = stat_node-&gt;create_iterator_filtered( filter ).
  node ?= iterator-&gt;get_next( ).
  while node is not initial.
    call method getstructurefromattributes
      exporting
        node      = node
      changing
        structure = xmen.
    append xmen to imen.
    node ?= iterator-&gt;get_next( ).
  endwhile.

* read pfstatus_mtx node
  free: filter, iterator, node.
  filter = stat_node-&gt;create_filter_name( &apos;pfstatus_mtx&apos; ).
  iterator = stat_node-&gt;create_iterator_filtered( filter ).
  node ?= iterator-&gt;get_next( ).
  while node is not initial.
    call method getstructurefromattributes
      exporting
        node      = node
      changing
        structure = xmtx.
    append xmtx to imtx.
    node ?= iterator-&gt;get_next( ).
  endwhile.

* read pfstatus_act node
  free: filter, iterator, node.
  filter = stat_node-&gt;create_filter_name( &apos;pfstatus_act&apos; ).
  iterator = stat_node-&gt;create_iterator_filtered( filter ).
  node ?= iterator-&gt;get_next( ).
  while node is not initial.
    call method getstructurefromattributes
      exporting
        node      = node
      changing
        structure = xact.
    append xact to iact.
    node ?= iterator-&gt;get_next( ).
  endwhile.

* read pfstatus_but node
  free: filter, iterator, node.
  filter = stat_node-&gt;create_filter_name( &apos;pfstatus_but&apos; ).
  iterator = stat_node-&gt;create_iterator_filtered( filter ).
  node ?= iterator-&gt;get_next( ).
  while node is not initial.
    call method getstructurefromattributes
      exporting
        node      = node
      changing
        structure = xbut.
    append xbut to ibut.
    node ?= iterator-&gt;get_next( ).
  endwhile.

* read pfstatus_pfk node
  free: filter, iterator, node.
  filter = stat_node-&gt;create_filter_name( &apos;pfstatus_pfk&apos; ).
  iterator = stat_node-&gt;create_iterator_filtered( filter ).
  node ?= iterator-&gt;get_next( ).
  while node is not initial.
    call method getstructurefromattributes
      exporting
        node      = node
      changing
        structure = xpfk.
    append xpfk to ipfk.
    node ?= iterator-&gt;get_next( ).
  endwhile.

* read pfstatus_set node
  free: filter, iterator, node.
  filter = stat_node-&gt;create_filter_name( &apos;pfstatus_set&apos; ).
  iterator = stat_node-&gt;create_iterator_filtered( filter ).
  node ?= iterator-&gt;get_next( ).
  while node is not initial.
    call method getstructurefromattributes
      exporting
        node      = node
      changing
        structure = xset.
    append xset to iset.
    node ?= iterator-&gt;get_next( ).
  endwhile.

* read pfstatus_doc node
  free: filter, iterator, node.
  filter = stat_node-&gt;create_filter_name( &apos;pfstatus_doc&apos; ).
  iterator = stat_node-&gt;create_iterator_filtered( filter ).
  node ?= iterator-&gt;get_next( ).
  while node is not initial.
    call method getstructurefromattributes
      exporting
        node      = node
      changing
        structure = xdoc.
    append xdoc to idoc.
    node ?= iterator-&gt;get_next( ).
  endwhile.

* read pfstatus_tit node
  free: filter, iterator, node.
  filter = stat_node-&gt;create_filter_name( &apos;pfstatus_tit&apos; ).
  iterator = stat_node-&gt;create_iterator_filtered( filter ).
  node ?= iterator-&gt;get_next( ).
  while node is not initial.
    call method getstructurefromattributes
      exporting
        node      = node
      changing
        structure = xtit.
    append xtit to itit.
    node ?= iterator-&gt;get_next( ).
  endwhile.

* read pfstatus_biv node
  free: filter, iterator, node.
  filter = stat_node-&gt;create_filter_name( &apos;pfstatus_biv&apos; ).
  iterator = stat_node-&gt;create_iterator_filtered( filter ).
  node ?= iterator-&gt;get_next( ).
  while node is not initial.
    call method getstructurefromattributes
      exporting
        node      = node
      changing
        structure = xbiv.
    append xbiv to ibiv.
    node ?= iterator-&gt;get_next( ).
  endwhile.

* Update the gui status
  _program = _objname.

  xtrkey-obj_type = &apos;PROG&apos;.
  xtrkey-obj_name = _program.
  xtrkey-sub_type = &apos;CUAD&apos;.
  xtrkey-sub_name = _program.

  call function &apos;RS_CUA_INTERNAL_WRITE&apos;
    exporting
      program   = _program
      language  = sy-langu
      tr_key    = xtrkey
      adm       = xadm
      state     = &apos;I&apos;
    tables
      sta       = ista
      fun       = ifun
      men       = imen
      mtx       = imtx
      act       = iact
      but       = ibut
      pfk       = ipfk
      set       = iset
      doc       = idoc
      tit       = itit
      biv       = ibiv
    exceptions
      not_found = 1
      others    = 2.

  if sy-subrc &lt;&gt; 0.
    raise exception type zcx_saplink
      exporting textid = zcx_saplink=&gt;system_error.
  endif.

endmethod.</source>
  </method>
  <method CLSNAME="ZSAPLINK_FUNCTIONGROUP" CMPNAME="CREATE_SOURCE" VERSION="1" LANGU="E" DESCRIPT="Create Source" EXPOSURE="0" STATE="1" EDITORDER="12 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZSAPLINK_FUNCTIONGROUP" CMPNAME="CREATE_SOURCE" SCONAME="SOURCE" VERSION="1" LANGU="E" DESCRIPT="Table of Strings" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="TABLE_OF_STRINGS"/>
   <parameter CLSNAME="ZSAPLINK_FUNCTIONGROUP" CMPNAME="CREATE_SOURCE" SCONAME="ATTRIBS" VERSION="1" LANGU="E" DESCRIPT="Generated Table for View TRDIR" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="TRDIR"/>
   <source>method CREATE_SOURCE.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/
data _objName type TROBJ_NAME.
data progLine type PROGDIR.
data titleInfo type trdirti.
data reportLine type string.
data miniReport type table_of_strings.

  _objName = objName.
  call function &apos;RS_INSERT_INTO_WORKING_AREA&apos;
        exporting
             OBJECT   = &apos;REPS&apos;
             OBJ_NAME = _objName
        exceptions
             WRONG_OBJECT_NAME = 1.
   INSERT REPORT _objName FROM source STATE &apos;I&apos;
     program type attribs-subc.  &quot;added to handle includes, etc.
   MOVE &apos;I&apos; TO progline-STATE.
   move-corresponding attribs to progline.
   modify progdir from progline.
*  Are you kidding me?!?  No idea why you need to do this!!
   CONCATENATE &apos;REPORT&apos; _objName &apos;.&apos; INTO reportLine SEPARATED BY SPACE.
   append reportline to miniReport.
   INSERT REPORT _objName FROM miniReport STATE &apos;A&apos;
     program type attribs-subc. &quot;added to handle includes, etc.
   MOVE &apos;A&apos; TO progline-STATE.
   modify progdir from progline.

endmethod.</source>
  </method>
  <method CLSNAME="ZSAPLINK_FUNCTIONGROUP" CMPNAME="CREATE_TEXTPOOL" VERSION="1" LANGU="E" DESCRIPT="Create Text Pool" EXPOSURE="0" STATE="1" EDITORDER="2 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZSAPLINK_FUNCTIONGROUP" CMPNAME="CREATE_TEXTPOOL" SCONAME="TEXTPOOLNODE" VERSION="1" LANGU="E" DESCRIPT="IF_IXML_ELEMENT" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="3" TYPE="IF_IXML_ELEMENT"/>
   <source>method CREATE_TEXTPOOL.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/
data textPoolTable type standard table of textPool.
data textPoolRow type textPool.
data langIterator type ref to if_ixml_node_iterator.
data filter type ref to if_ixml_node_filter.
data textFilter type ref to if_ixml_node_filter.
data textIterator type ref to if_ixml_node_iterator.
data langNode type ref to if_ixml_element.
data aTextNode type ref to if_ixml_element.
data _objName type TROBJ_NAME.
data lang type spras.
data langNodeExists type flag.
data logonLanguageExists type flag.
data _state(1) type c.

  _objName = objName.

  filter = textPoolNode-&gt;create_filter_name( &apos;language&apos; ).
  langIterator = textPoolNode-&gt;create_iterator_filtered( filter ).
  langNode ?= langIterator-&gt;get_next( ).

  while langNode is not initial.
    langNodeExists = &apos;X&apos;.
    CALL FUNCTION &apos;RS_INSERT_INTO_WORKING_AREA&apos;
         EXPORTING
              OBJECT   = &apos;REPT&apos;
              OBJ_NAME = _objName
         EXCEPTIONS
              OTHERS   = 0.

    refresh textPoolTable.
    textIterator = langNode-&gt;create_iterator( ).
    aTextNode ?= textIterator-&gt;get_next( ).
*For some reason the 1st one is blank... not sure why.
    aTextNode ?= textIterator-&gt;get_next( ).
    while aTextNode is not initial.
      call method GETSTRUCTUREFROMATTRIBUTES
            exporting
              node = aTextNode
            changing
              structure = textPoolRow.
      append textPoolRow to textPoolTable.
      aTextNode ?= textIterator-&gt;get_next( ).
    endwhile.
    if textPoolTable is not initial.
      lang = langNode-&gt;get_attribute( &apos;SPRAS&apos; ).
      if lang = sy-langu.
        logonLanguageExists = &apos;X&apos;.
        _state = &apos;I&apos;.
      else.
*       seems that if a textpool is inserted as inactive for language
*       other than the logon language, it is lost upon activation
*       not sure inserting as active is best solution,but seems to work
        _state = &apos;A&apos;.
      endif.
    endif.
    insert textpool _objName from textPooltable language lang
    state _state.
    langNode ?= langIterator-&gt;get_next( ).
  endwhile.
endmethod.</source>
  </method>
  <method CLSNAME="ZSAPLINK" CMPNAME="DELETEOBJECT" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>method DELETEOBJECT.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/

  data area type RS38L-AREA.

  area = objName.

  call function &apos;RS_FUNCTION_POOL_DELETE&apos;
   EXPORTING
      AREA                         = area
*   CORRNUM                      = &apos; &apos;
*   TEXT                         = &apos; &apos;
*   UNAME                        = &apos; &apos;
      WITH_KORR                    = &apos; &apos;
*   WB_FB_MANAGER                =
      SUPPRESS_POPUPS              = &apos;X&apos;
*   SKIP_PROGRESS_IND            = &apos; &apos;
* IMPORTING
*   E_CORRNUM                    =
 EXCEPTIONS
   CANCELED_IN_CORR             = 1
   ENQUEUE_SYSTEM_FAILURE       = 2
   FUNCTION_EXIST               = 3
   NOT_EXECUTED                 = 4
   NO_MODIFY_PERMISSION         = 5
   NO_SHOW_PERMISSION           = 6
   PERMISSION_FAILURE           = 7
   POOL_NOT_EXIST               = 8
   CANCELLED                    = 9
   OTHERS                       = 10.
  .
  if sy-subrc &lt;&gt; 0.
* MESSAGE ID SY-MSGID TYPE SY-MSGTY NUMBER SY-MSGNO
*         WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4.
  endif.


endmethod.</source>
  </method>
  <method CLSNAME="ZSAPLINK_FUNCTIONGROUP" CMPNAME="DEQUEUE_ABAP" VERSION="1" LANGU="E" DESCRIPT="Dequeue ABAP" EXPOSURE="0" STATE="1" EDITORDER="6 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" MTDNEWEXC="X" BCMTDCAT="00" BCMTDSYN="0">
   <exception CLSNAME="ZSAPLINK_FUNCTIONGROUP" CMPNAME="DEQUEUE_ABAP" SCONAME="ZCX_SAPLINK" VERSION="1" LANGU="E" DESCRIPT="SAPlink exception class" MTDTYPE="0" EDITORDER="1 "/>
   <source>method DEQUEUE_ABAP.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/

  call function &apos;RS_ACCESS_PERMISSION&apos;
       exporting
            global_lock              = &apos;X&apos;
            mode                     = &apos;FREE&apos;
            object                   = objName
            object_class             = &apos;ABAP&apos;
       exceptions
            canceled_in_corr         = 1
            enqueued_by_user         = 3
            enqueue_system_failure   = 4
            locked_by_author         = 5
            illegal_parameter_values = 6
            no_modify_permission     = 7
            no_show_permission       = 8
            permission_failure       = 9.

  if sy-subrc &lt;&gt; 0.
    case sy-subrc.
      when 7 or 8 or 9.
        raise exception type zcx_saplink
          exporting
            textid = zcx_saplink=&gt;not_authorized.
      when 5.
        raise exception type zcx_saplink
          exporting
            textid = zcx_saplink=&gt;error_message
            msg = &apos;object locked&apos;.
      when others.
        raise exception type zcx_saplink
          exporting
            textid = zcx_saplink=&gt;system_error.
    endcase.
  endif.

endmethod.</source>
  </method>
  <method CLSNAME="ZSAPLINK_FUNCTIONGROUP" CMPNAME="ENQUEUE_ABAP" VERSION="1" LANGU="E" DESCRIPT="Enqueue ABAP" EXPOSURE="0" STATE="1" EDITORDER="13 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" MTDNEWEXC="X" BCMTDCAT="00" BCMTDSYN="0">
   <exception CLSNAME="ZSAPLINK_FUNCTIONGROUP" CMPNAME="ENQUEUE_ABAP" SCONAME="ZCX_SAPLINK" VERSION="1" LANGU="E" DESCRIPT="SAPlink exception class" MTDTYPE="0" EDITORDER="1 "/>
   <source>method ENQUEUE_ABAP.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/


  call function &apos;RS_ACCESS_PERMISSION&apos;
       exporting
*            authority_check          = authority_check
            global_lock              = &apos;X&apos;
            mode                     = &apos;INSERT&apos;
*            master_language          = trdir-rload
            object                   = objName
            object_class             = &apos;ABAP&apos;
*       importing
*            transport_key            = trkey_global
*            new_master_language      = trdir-rload
*            devclass                 = devclass_local
       exceptions
            canceled_in_corr         = 1
            enqueued_by_user         = 3
            enqueue_system_failure   = 4
            locked_by_author         = 5
            illegal_parameter_values = 6
            no_modify_permission     = 7
            no_show_permission       = 8
            permission_failure       = 9.

  if sy-subrc &lt;&gt; 0.
    case sy-subrc.
      when 7 or 8 or 9.
        raise exception type zcx_saplink
          exporting
            textid = zcx_saplink=&gt;not_authorized.
      when 5.
        raise exception type zcx_saplink
          exporting
            textid = zcx_saplink=&gt;error_message
            msg = &apos;object locked&apos;.
      when others.
        raise exception type zcx_saplink
          exporting
            textid = zcx_saplink=&gt;system_error.
    endcase.
  endif.

endmethod.</source>
  </method>
  <method CLSNAME="ZSAPLINK" CMPNAME="GETOBJECTTYPE" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>method GETOBJECTTYPE.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/
  objectType = &apos;FUGR&apos;. &quot; Function Group
endmethod.</source>
  </method>
  <method CLSNAME="ZSAPLINK_FUNCTIONGROUP" CMPNAME="GET_DOCUMENTATION" VERSION="1" LANGU="E" DESCRIPT="Get Documentation" EXPOSURE="0" STATE="1" EDITORDER="9 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZSAPLINK_FUNCTIONGROUP" CMPNAME="GET_DOCUMENTATION" SCONAME="DOCNODE" VERSION="1" LANGU="E" DESCRIPT="Documentation Node" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="3" TYPE="IF_IXML_ELEMENT"/>
   <source>method GET_DOCUMENTATION.

  data languageNode   type ref to if_ixml_element.
  DATA txtlines_node TYPE REF TO if_ixml_element.
  DATA rc            TYPE sysubrc.
  DATA _objtype      TYPE string.

  Types: BEGIN OF t_dokhl,
          id          TYPE dokhl-id,
          object      TYPE dokhl-object,
          langu       type dokhl-langu,
          typ         TYPE dokhl-typ,
          dokversion  TYPE dokhl-dokversion,
         END OF t_dokhl.

  data lt_dokhl type table of t_dokhl.
  data ls_dokhl like line of lt_dokhl.

  DATA lt_lines TYPE TABLE OF tline.
  DATA ls_lines LIKE LINE OF lt_lines.

  data lv_str type string.
  DATA _objname TYPE e071-obj_name.

  _objname = objname.

* Check against database
  SELECT  id object langu typ dokversion
        INTO corresponding fields of table lt_dokhl
           FROM dokhl
             WHERE id = &apos;RE&apos;
                AND object = _objname.

* Use only most recent version.
  sort lt_dokhl by id object langu typ ascending dokversion descending.
  delete adjacent duplicates from lt_dokhl comparing id object typ langu.

  docNode = xmlDoc-&gt;create_element( &apos;functionGroupDocumentation&apos; ).

* Make sure there is at least one record here.
  clear ls_dokhl.
  read table lt_dokhl into ls_dokhl index 1.
  if sy-subrc &lt;&gt; 0.
    return.
  endif.

* Set docNode object attribute
  lv_str = ls_dokhl-object.
  rc = docNode-&gt;set_attribute( name = &apos;OBJECT&apos; value = lv_Str ).

  Loop at lt_dokhl into ls_dokhl.

* Create language node, and set attribute
    languageNode = xmlDoc-&gt;create_element( &apos;language&apos; ).
    lv_str = ls_dokhl-langu.
    rc = languageNode-&gt;set_attribute( name = &apos;SPRAS&apos; value = lv_Str ).

* Read the documentation text
    CALL FUNCTION &apos;DOCU_READ&apos;
      EXPORTING
        id      = ls_dokhl-id
        langu   = ls_dokhl-langu
        object  = ls_dokhl-object
        typ     = ls_dokhl-typ
        version = ls_dokhl-dokversion
      TABLES
        line    = lt_lines.

* Write records to XML node
    LOOP AT lt_lines INTO ls_lines.
      txtlines_node = xmlDoc-&gt;create_element( `textLine` ).
      me-&gt;setattributesfromstructure( node = txtlines_node structure = ls_lines ).
      rc = languageNode-&gt;append_child( txtlines_node ).
    ENDLOOP.
    rc = docNode-&gt;append_child( languageNode ) .
  Endloop.

endmethod.</source>
  </method>
  <method CLSNAME="ZSAPLINK_FUNCTIONGROUP" CMPNAME="GET_DYNPRO" VERSION="1" LANGU="E" DESCRIPT="Get Dynpro" EXPOSURE="0" STATE="1" EDITORDER="16 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZSAPLINK_FUNCTIONGROUP" CMPNAME="GET_DYNPRO" SCONAME="DYNP_NODE" VERSION="1" LANGU="E" DESCRIPT="IF_IXML_ELEMENT" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="3" TYPE="IF_IXML_ELEMENT"/>
   <source>method GET_DYNPRO.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/

  types: begin of tdynp,
         prog type d020s-prog,
         dnum type d020s-dnum,
         end of tdynp.

  data: idyn_fldl type table of d021s,
        idyn_flow type table of d022s,
        idyn_mcod type table of d023s.

  data: xdyn_head type  d020s,
        xdyn_fldl type  d021s,
        xdyn_flow type  d022s,
        xdyn_mcod type  d023s.

  data idynp type table of tdynp.
  data xdynp type tdynp.

  data xdyn_text type d020t-dtxt.
  data xdyn_text_string type string.

  data _objname type trobj_name.
  data rc type sy-subrc .

  data iflowsource type rswsourcet.
  data xflowsource like line of iflowsource.
  data flowsourcestring type string.

  data dynnr_node type ref to if_ixml_element.
  data dynpromatchnode type ref to if_ixml_element.
  data dynprofieldsnode type ref to if_ixml_element.
  data dynproflownode type ref to if_ixml_element.

  _objname = objname.

* Get all dynpros for program object
  clear xdynp.  refresh idynp.
  select prog dnum into table idynp
                from d020s
                   where prog = _objname
                     and type &lt;&gt; &apos;S&apos;    &quot; No Selection Screens
                     and type &lt;&gt; &apos;J&apos;.   &quot; No selection subscreens
  check sy-subrc  = 0 .

  dynp_node = xmldoc-&gt;create_element( &apos;dynpros&apos; ).

  loop at idynp into xdynp.

* Retrieve dynpro imformation
    dynnr_node =  xmldoc-&gt;create_element( &apos;dynpro&apos; ).

    clear:    xdyn_head, xdyn_fldl, xdyn_flow, xdyn_mcod.
    refresh:  idyn_fldl, idyn_flow, idyn_mcod.

    call function &apos;RPY_DYNPRO_READ_NATIVE&apos;
      exporting
        progname                    = xdynp-prog
        dynnr                       = xdynp-dnum
*       SUPPRESS_EXIST_CHECKS       = &apos; &apos;
*       SUPPRESS_CORR_CHECKS        = &apos; &apos;
    importing
        HEADER                      = xdyn_head
        dynprotext                  = xdyn_text
     tables
        fieldlist                   = idyn_fldl
        flowlogic                   = idyn_flow
        params                      = idyn_mcod
*       FIELDTEXTS                  =
     exceptions
        cancelled                   = 1
        not_found                   = 2
        permission_error            = 3
        others                      = 4.

    check sy-subrc = 0.

* Add heading information for screen.
    setattributesfromstructure(
                     node = dynnr_node structure =  xdyn_head  ).
* Add the dynpro text also.
    xdyn_text_string =  xdyn_text.
    rc = dynnr_node-&gt;set_attribute(
               name = &apos;DTEXT&apos;  value = xdyn_text_string ).
    rc = dynp_node-&gt;append_child( dynnr_node ).

* Add fields information for screen.
    if not idyn_fldl[] is initial.
      loop at idyn_fldl into xdyn_fldl.
        dynprofieldsnode = xmldoc-&gt;create_element( &apos;dynprofield&apos; ).
        setattributesfromstructure(
                 node = dynprofieldsnode structure =  xdyn_fldl ).
        rc = dynnr_node-&gt;append_child( dynprofieldsnode ).
      endloop.
    endif.

* Add flow logic of screen
    if not idyn_flow[] is initial.
      clear xflowsource. refresh  iflowsource.
      loop at idyn_flow into xdyn_flow.
        xflowsource  = xdyn_flow.
        append xflowsource to iflowsource.
      endloop.

      dynproflownode = xmldoc-&gt;create_element( &apos;dynproflowsource&apos; ).
      flowsourcestring = buildsourcestring( sourcetable = iflowsource ).
      rc = dynproflownode-&gt;if_ixml_node~set_value( flowsourcestring ).
      rc = dynnr_node-&gt;append_child( dynproflownode  ).
    endif.

* Add matchcode information for screen.
    if not idyn_mcod[] is initial.
      loop at idyn_mcod into xdyn_mcod.
        check not xdyn_mcod-type is initial
          and not xdyn_mcod-content is initial.
        dynpromatchnode = xmldoc-&gt;create_element( &apos;dynpromatchcode&apos; ).
        setattributesfromstructure(
                 node = dynpromatchnode structure =  xdyn_mcod ).
        rc = dynnr_node-&gt;append_child( dynpromatchnode ).
      endloop.
    endif.

  endloop.

endmethod.</source>
  </method>
  <method CLSNAME="ZSAPLINK_FUNCTIONGROUP" CMPNAME="GET_FM_DOCUMENTATION" VERSION="1" LANGU="E" DESCRIPT="Get FM Documentation" EXPOSURE="0" STATE="1" EDITORDER="10 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZSAPLINK_FUNCTIONGROUP" CMPNAME="GET_FM_DOCUMENTATION" SCONAME="FM_NAME" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="ANY"/>
   <parameter CLSNAME="ZSAPLINK_FUNCTIONGROUP" CMPNAME="GET_FM_DOCUMENTATION" SCONAME="DOCNODE" VERSION="1" LANGU="E" DESCRIPT="Documentation Node" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="3" TYPE="IF_IXML_ELEMENT"/>
   <source>method GET_FM_DOCUMENTATION.

  DATA languagenode   TYPE REF TO if_ixml_element.
  DATA txtlines_node TYPE REF TO if_ixml_element.
  DATA rc            TYPE sysubrc.
  DATA _objtype      TYPE string.

  TYPES: BEGIN OF t_dokhl,
          id          TYPE dokhl-id,
          object      TYPE dokhl-object,
          langu       TYPE dokhl-langu,
          typ         TYPE dokhl-typ,
          dokversion  TYPE dokhl-dokversion,
         END OF t_dokhl.

  DATA lt_dokhl TYPE TABLE OF t_dokhl.
  DATA ls_dokhl LIKE LINE OF lt_dokhl.

  DATA lt_lines TYPE TABLE OF tline.
  DATA ls_lines LIKE LINE OF lt_lines.

  DATA lv_str TYPE string.
  DATA _objname TYPE e071-obj_name.

  _objname = fm_name.

* Check against database
  SELECT  id object langu typ dokversion
        INTO CORRESPONDING FIELDS OF TABLE lt_dokhl
           FROM dokhl
             WHERE id = &apos;FU&apos;
                AND object = _objname.

* Use only most recent version.
  SORT lt_dokhl BY id object langu typ ASCENDING dokversion DESCENDING.
  DELETE ADJACENT DUPLICATES FROM lt_dokhl COMPARING id object typ langu.

  docnode = xmldoc-&gt;create_element( &apos;functionModuleDocumentation&apos; ).

* Make sure there is at least one record here.
  CLEAR ls_dokhl.
  READ TABLE lt_dokhl INTO ls_dokhl INDEX 1.
  IF sy-subrc &lt;&gt; 0.
    RETURN.
  ENDIF.

* Set docNode object attribute
  lv_str = ls_dokhl-object.
  rc = docnode-&gt;set_attribute( name = &apos;OBJECT&apos; value = lv_str ).

  LOOP AT lt_dokhl INTO ls_dokhl.

* Create language node, and set attribute
    languagenode = xmldoc-&gt;create_element( &apos;language&apos; ).
    lv_str = ls_dokhl-langu.
    rc = languagenode-&gt;set_attribute( name = &apos;SPRAS&apos; value = lv_str ).

* Read the documentation text
    CALL FUNCTION &apos;DOCU_READ&apos;
      EXPORTING
        id      = ls_dokhl-id
        langu   = ls_dokhl-langu
        object  = ls_dokhl-object
        typ     = ls_dokhl-typ
        version = ls_dokhl-dokversion
      TABLES
        line    = lt_lines.

* Write records to XML node
    LOOP AT lt_lines INTO ls_lines.
      txtlines_node = xmldoc-&gt;create_element( `textLine` ).
      me-&gt;setattributesfromstructure( node = txtlines_node structure = ls_lines ).
      rc = languagenode-&gt;append_child( txtlines_node ).
    ENDLOOP.
    rc = docnode-&gt;append_child( languagenode ) .
  ENDLOOP.

endmethod.</source>
  </method>
  <method CLSNAME="ZSAPLINK_FUNCTIONGROUP" CMPNAME="GET_FUNCTION_MODULES" VERSION="1" LANGU="E" DESCRIPT="Get Function Modules" EXPOSURE="0" STATE="1" EDITORDER="14 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZSAPLINK_FUNCTIONGROUP" CMPNAME="GET_FUNCTION_MODULES" SCONAME="FCT_GROUP" VERSION="1" LANGU="E" DESCRIPT="Function group, to which the function module belongs" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="TLIBG-AREA"/>
   <parameter CLSNAME="ZSAPLINK_FUNCTIONGROUP" CMPNAME="GET_FUNCTION_MODULES" SCONAME="FM_NODE" VERSION="1" LANGU="E" DESCRIPT="IF_IXML_ELEMENT" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="3" TYPE="IF_IXML_ELEMENT"/>
   <source>method GET_FUNCTION_MODULES.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/

  TYPES: BEGIN OF tfunct_head,
         name   TYPE rs38l-name,
         global TYPE rs38l-global,
         remote TYPE rs38l-remote,
         utask  TYPE rs38l-utask,
         stext  TYPE tftit-stext,
         area   TYPE rs38l-area,
         END OF tfunct_head.

  DATA xfunct_head TYPE tfunct_head.
  DATA iimport     TYPE TABLE OF rsimp.
  DATA ichange     TYPE TABLE OF rscha.
  DATA iexport     TYPE TABLE OF rsexp.
  DATA itables     TYPE TABLE OF rstbl.
  DATA iexcepl     TYPE TABLE OF rsexc.
  DATA idocume     TYPE TABLE OF rsfdo.
  DATA isource     TYPE TABLE OF rssource.
  DATA isource_new TYPE rsfb_source .

  DATA ximport     TYPE  rsimp.
  DATA xchange     TYPE  rscha.
  DATA xexport     TYPE  rsexp.
  DATA xtables     TYPE  rstbl.
  DATA xexcepl     TYPE  rsexc.
  DATA xdocume     TYPE  rsfdo.
  DATA xsource     TYPE  rssource.
  DATA xsource_new LIKE LINE OF isource_new.

  DATA functionmodulesnode TYPE REF TO if_ixml_element.
  DATA functionmodulenode  TYPE REF TO if_ixml_element.
  DATA importsnode TYPE REF TO if_ixml_element.
  DATA changesnode TYPE REF TO if_ixml_element.
  DATA exportsnode TYPE REF TO if_ixml_element.
  DATA tablesnode  TYPE REF TO if_ixml_element.
  DATA exceplnode  TYPE REF TO if_ixml_element.
  DATA documsnode  TYPE REF TO if_ixml_element.
  DATA fmsrcenode  TYPE REF TO if_ixml_element.
  DATA fmsrcenewnode  TYPE REF TO if_ixml_element.
  DATA fmdocumenation TYPE REF TO if_ixml_element.
  DATA fmparmdocumenation TYPE REF TO if_ixml_element.

  DATA functiongroupname TYPE  tlibg-area.

  DATA ifunct TYPE TABLE OF  rs38l_incl.
  DATA xfunct TYPE  rs38l_incl.

  DATA rc           TYPE sysubrc.
  DATA progattribs  TYPE trdir.
  DATA progsource   TYPE rswsourcet.
  DATA _objname(30) TYPE c.
  DATA sourcestring TYPE string.
  DATA function_deleted    TYPE c.
  DATA endfunction_deleted TYPE c.
  DATA lv_len TYPE i.

  functiongroupname = fct_group.

* Now get the function pool contents
  CALL FUNCTION &apos;RS_FUNCTION_POOL_CONTENTS&apos;
    EXPORTING
      function_pool           = functiongroupname
    TABLES
      functab                 = ifunct
    EXCEPTIONS
      function_pool_not_found = 1
      OTHERS                  = 2.

* Now write out function modules data.
  functionmodulesnode = xmldoc-&gt;create_element( &apos;functionmodules&apos; ).

  LOOP AT ifunct INTO xfunct.

    functionmodulenode = xmldoc-&gt;create_element( &apos;functionmodule&apos; ).
    xfunct_head-name =  xfunct-funcname.

    REFRESH: iimport, ichange, iexport,
             itables, iexcepl, idocume, isource, isource_new.

* Read the function module data
    CALL FUNCTION &apos;RPY_FUNCTIONMODULE_READ_NEW&apos;
      EXPORTING
        functionname       = xfunct_head-name
      IMPORTING
        global_flag        = xfunct_head-global
        remote_call        = xfunct_head-remote
        update_task        = xfunct_head-utask
        short_text         = xfunct_head-stext
*       FUNCTION_POOL      =
      TABLES
        import_parameter   = iimport
        changing_parameter = ichange
        export_parameter   = iexport
        tables_parameter   = itables
        exception_list     = iexcepl
        documentation      = idocume
        source             = isource
      CHANGING
        new_source         = isource_new
      EXCEPTIONS
        error_message      = 1
        function_not_found = 2
        invalid_name       = 3
        OTHERS             = 4.

* Set the header attributes
    setattributesfromstructure(
               node = functionmodulenode
               structure =  xfunct_head  ).

* IMports
    IF NOT iimport[] IS INITIAL.
      LOOP AT iimport INTO ximport.
        importsnode = xmldoc-&gt;create_element( &apos;importing&apos; ).
        setattributesfromstructure(
                 node = importsnode structure =  ximport ).
        rc = functionmodulenode-&gt;append_child( importsnode ).
      ENDLOOP.
    ENDIF.

* Exports
    IF NOT iexport[] IS INITIAL.
      LOOP AT iexport INTO xexport.
        exportsnode = xmldoc-&gt;create_element( &apos;exporting&apos; ).
        setattributesfromstructure(
                 node = exportsnode structure =  xexport ).
        rc = functionmodulenode-&gt;append_child( exportsnode ).
      ENDLOOP.
    ENDIF.

* Changing
    IF NOT ichange[] IS INITIAL.
      LOOP AT ichange INTO xchange.
        changesnode = xmldoc-&gt;create_element( &apos;changing&apos; ).
        setattributesfromstructure(
                 node = changesnode structure =  xchange ).
        rc = functionmodulenode-&gt;append_child( changesnode ).
      ENDLOOP.
    ENDIF.

* Tables
    IF NOT itables[] IS INITIAL.
      LOOP AT itables INTO xtables.
        tablesnode = xmldoc-&gt;create_element( &apos;tables&apos; ).
        setattributesfromstructure(
                 node = tablesnode structure =  xtables ).
        rc = functionmodulenode-&gt;append_child( tablesnode ).
      ENDLOOP.
    ENDIF.

* Exception list
    IF NOT iexcepl[] IS INITIAL.
      LOOP AT iexcepl INTO xexcepl.
        exceplnode = xmldoc-&gt;create_element( &apos;exceptions&apos; ).
        setattributesfromstructure(
                 node = exceplnode structure =  xexcepl ).
        rc = functionmodulenode-&gt;append_child( exceplnode ).
      ENDLOOP.
    ENDIF.

* Documentation - this is short text
    IF NOT idocume[] IS INITIAL.
      LOOP AT idocume INTO xdocume .
        documsnode = xmldoc-&gt;create_element( &apos;documentation&apos; ).
        setattributesfromstructure(
                 node = documsnode structure =  xdocume  ).

        rc = functionmodulenode-&gt;append_child( documsnode ).
      ENDLOOP.
    ENDIF.

* Source code for function module
    IF NOT isource[] IS INITIAL.

* Get rid of the FUNCTION and ENDFUNCTION statements.
* And the signature comments
* All of this will be inserted automatically, when imported.
      CLEAR: function_deleted, endfunction_deleted.
      LOOP AT isource INTO xsource.
        IF xsource+0(2) = &apos;*&quot;&apos;.
          DELETE isource INDEX sy-tabix.
          CONTINUE.
        ENDIF.
        SEARCH xsource FOR &apos;FUNCTION&apos;.
        &quot;Got it and not a comment?
        IF sy-subrc  = 0 AND xsource+0(1) &lt;&gt; &apos;*&apos; AND
           function_deleted NE &apos;X&apos;.
          DELETE isource INDEX sy-tabix.
          function_deleted = &apos;X&apos;.
          CONTINUE.
        ENDIF.
        SEARCH xsource FOR &apos;ENDFUNCTION&apos;.
        IF sy-subrc  = 0.
          DELETE isource INDEX sy-tabix.
          endfunction_deleted = &apos;X&apos;.
          CONTINUE.
        ENDIF.
      ENDLOOP.

      fmsrcenode = xmldoc-&gt;create_element( &apos;fm_source&apos; ).
      REFRESH progsource.
      LOOP AT isource INTO xsource.
        APPEND xsource TO progsource.
      ENDLOOP.
      sourcestring = buildsourcestring( sourcetable = progsource ).
      rc = fmsrcenode-&gt;if_ixml_node~set_value( sourcestring ).
      rc = functionmodulenode-&gt;append_child( fmsrcenode ).

    ENDIF.

* Source code for function module
    IF NOT isource_new[] IS INITIAL.

* Get rid of the FUNCTION and ENDFUNCTION statements.
* And the signature comments
* All of this will be inserted automatically, when imported.
      CLEAR: function_deleted, endfunction_deleted.
      LOOP AT isource_new INTO xsource_new.
        CHECK xsource_new IS NOT INITIAL.
        CLEAR lv_len.
        lv_len = strlen( xsource_new ).
        IF lv_len GE 2.
          IF xsource_new+0(2) = &apos;*&quot;&apos;.
            DELETE isource_new INDEX sy-tabix.
            CONTINUE.
          ENDIF.
        ENDIF.
        SEARCH xsource_new FOR &apos;FUNCTION&apos;.
        &quot;Got it and not a comment?
        IF sy-subrc  = 0 AND xsource_new+0(1) &lt;&gt; &apos;*&apos; AND
           function_deleted NE &apos;X&apos;.
          DELETE isource_new INDEX sy-tabix.
          function_deleted = &apos;X&apos;.
          CONTINUE.
        ENDIF.
        SEARCH xsource_new FOR &apos;ENDFUNCTION&apos;.
        IF sy-subrc  = 0.
          DELETE isource_new INDEX sy-tabix.
          endfunction_deleted = &apos;X&apos;.
          CONTINUE.
        ENDIF.
      ENDLOOP.

      fmsrcenewnode = xmldoc-&gt;create_element( &apos;fm_source_new&apos; ).
      REFRESH progsource.
      LOOP AT isource_new INTO xsource_new.
        APPEND xsource_new TO progsource.
      ENDLOOP.
      sourcestring = buildsourcestring( sourcetable = progsource ).
      rc = fmsrcenewnode-&gt;if_ixml_node~set_value( sourcestring ).
      rc = functionmodulenode-&gt;append_child( fmsrcenewnode ).

    ENDIF.

* Get function module documentation
    fmdocumenation = get_fm_documentation( xfunct-funcname ).
    rc = functionmodulenode-&gt;append_child( fmdocumenation ).

* Add to functionmodules node
    rc = functionmodulesnode-&gt;append_child( functionmodulenode ).

  ENDLOOP.


  fm_node = functionmodulesnode.

endmethod.</source>
  </method>
  <method CLSNAME="ZSAPLINK_FUNCTIONGROUP" CMPNAME="GET_INCLUDES" VERSION="1" LANGU="E" DESCRIPT="Get Include Programs" EXPOSURE="0" STATE="1" EDITORDER="11 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZSAPLINK_FUNCTIONGROUP" CMPNAME="GET_INCLUDES" SCONAME="MAIN_PROG" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="SY-REPID"/>
   <parameter CLSNAME="ZSAPLINK_FUNCTIONGROUP" CMPNAME="GET_INCLUDES" SCONAME="FCT_GROUP" VERSION="1" LANGU="E" DESCRIPT="Function group, to which the function module belongs" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="TLIBT-AREA"/>
   <parameter CLSNAME="ZSAPLINK_FUNCTIONGROUP" CMPNAME="GET_INCLUDES" SCONAME="INCL_NODE" VERSION="1" LANGU="E" DESCRIPT="IF_IXML_ELEMENT" CMPTYPE="1" MTDTYPE="0" EDITORDER="3 " DISPID="0 " PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="3" TYPE="IF_IXML_ELEMENT"/>
   <source>method GET_INCLUDES.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/

  types: begin of tinclude,
         name(40),
         end of tinclude.

  data iinclude type table of tinclude.
  data xinclude type tinclude.

  data ifunct type table of  rs38l_incl.
  data xfunct type  rs38l_incl.

  data functiongroupname type  tlibg-area.
  data mainfgprogname    type sy-repid.

  data includenode  type ref to if_ixml_element.
  data includesnode type ref to if_ixml_element.
  data includesourcenode type ref to if_ixml_element.

  data progattribs  type trdir.
  data rc           type sysubrc.
  data progsource   type rswsourcet.
  data _objname(30) type c.
  data sourcestring type string.

  functiongroupname = fct_group.
  mainfgprogname    = main_prog.

  CALL FUNCTION &apos;RS_FUNCTION_POOL_CONTENTS&apos;
    EXPORTING
      function_pool           = functiongroupname
    TABLES
      functab                 = ifunct
    EXCEPTIONS
      function_pool_not_found = 1
      others                  = 2.

* Get all includes
  CALL FUNCTION &apos;RS_GET_ALL_INCLUDES&apos;
    EXPORTING
      program      = mainfgprogname
    TABLES
      includetab   = iinclude
    EXCEPTIONS
      not_existent = 1
      no_program   = 2
      others       = 3.

* Get rid of any includes that are for the function modules
* and any includes that are in SAP namespace
  loop at iinclude into xinclude.
    read table ifunct
             into xfunct
                   with key include = xinclude-name.
    if sy-subrc  = 0.
      delete iinclude where name = xinclude-name.
      continue.
    endif.
    select single * from trdir
            into progattribs
                   where name = xinclude-name.
    if progattribs-cnam = &apos;SAP&apos;.
      delete iinclude where name = xinclude-name.
      continue.
    endif.
    if xinclude-name(2) &lt;&gt; &apos;LZ&apos;
       and xinclude-name(2) &lt;&gt; &apos;LY&apos;
       and xinclude-name(1) &lt;&gt; &apos;Z&apos;
       and xinclude-name(1) &lt;&gt; &apos;Y&apos;.
      delete iinclude where name = xinclude-name.
      continue.
    endif.
  endloop.

* Write out include programs.....
  includesnode = xmldoc-&gt;create_element( &apos;includeprograms&apos; ).

  loop at iinclude into xinclude.

    includenode = xmldoc-&gt;create_element( &apos;include&apos; ).
    select single * from trdir
            into progattribs
                   where name = xinclude-name.
    setattributesfromstructure(
               node = includenode
               structure =  progattribs  ).

    includesourcenode = xmldoc-&gt;create_element( &apos;include_source&apos; ).
    read report xinclude-name into progsource.
    sourcestring = buildsourcestring( sourcetable = progsource ).
    rc = includesourcenode-&gt;if_ixml_node~set_value( sourcestring ).
    rc = includenode-&gt;append_child( includesourcenode ).
    rc = includesnode-&gt;append_child( includenode ).

  endloop.

  incl_node = includesnode.

endmethod.</source>
  </method>
  <method CLSNAME="ZSAPLINK_FUNCTIONGROUP" CMPNAME="GET_PFSTATUS" VERSION="1" LANGU="E" DESCRIPT="Get Gui Status" EXPOSURE="0" STATE="1" EDITORDER="18 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZSAPLINK_FUNCTIONGROUP" CMPNAME="GET_PFSTATUS" SCONAME="PFSTAT_NODE" VERSION="1" LANGU="E" DESCRIPT="IF_IXML_ELEMENT" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="3" TYPE="IF_IXML_ELEMENT"/>
   <source>method GET_PFSTATUS.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/

  data: ista type table of rsmpe_stat,
        ifun type table of rsmpe_funt,
        imen type table of rsmpe_men,
        imtx type table of rsmpe_mnlt,
        iact type table of rsmpe_act,
        ibut type table of rsmpe_but,
        ipfk type table of rsmpe_pfk,
        iset type table of rsmpe_staf,
        idoc type table of rsmpe_atrt,
        itit type table of rsmpe_titt,
        ibiv type table of rsmpe_buts.

  data: xsta type rsmpe_stat,
        xfun type rsmpe_funt,
        xmen type rsmpe_men,
        xmtx type rsmpe_mnlt,
        xact type rsmpe_act,
        xbut type rsmpe_but,
        xpfk type rsmpe_pfk,
        xset type rsmpe_staf,
        xdoc type rsmpe_atrt,
        xtit type rsmpe_titt,
        xbiv type rsmpe_buts.

  data sta_node type ref to if_ixml_element.
  data fun_node type ref to if_ixml_element.
  data men_node type ref to if_ixml_element.
  data mtx_node type ref to if_ixml_element.
  data act_node type ref to if_ixml_element.
  data but_node type ref to if_ixml_element.
  data pfk_node type ref to if_ixml_element.
  data set_node type ref to if_ixml_element.
  data doc_node type ref to if_ixml_element.
  data tit_node type ref to if_ixml_element.
  data biv_node type ref to if_ixml_element.

  data _objname type trobj_name.
  data _program type  trdir-name.
  data rc type sy-subrc.

  _objname = objname.
  _program = objname.

  call function &apos;RS_CUA_INTERNAL_FETCH&apos;
    exporting
      program         = _program
      language        = sy-langu
    tables
      sta             = ista
      fun             = ifun
      men             = imen
      mtx             = imtx
      act             = iact
      but             = ibut
      pfk             = ipfk
      set             = iset
      doc             = idoc
      tit             = itit
      biv             = ibiv
    exceptions
      not_found       = 1
      unknown_version = 2
      others          = 3.

  check sy-subrc = 0.

* if there is a gui status or gui title present, then
* create pfstatus node.
  if ista[] is not initial
     or itit[] is not initial.
    pfstat_node = xmldoc-&gt;create_element( &apos;pfstatus&apos; ).
  endif.


* if ista is filled, assume there are one or more
* gui statuses
  if ista[] is not initial.

    loop at ista into xsta.
      sta_node = xmldoc-&gt;create_element( &apos;pfstatus_sta&apos; ).
      setattributesfromstructure(
               node = sta_node
               structure =  xsta ).
      rc = pfstat_node-&gt;append_child( sta_node ).
    endloop.

    loop at ifun into xfun.
      fun_node = xmldoc-&gt;create_element( &apos;pfstatus_fun&apos; ).
      setattributesfromstructure(
               node = fun_node
               structure =  xfun ).
      rc = pfstat_node-&gt;append_child( fun_node ).
    endloop.

    loop at imen into xmen.
      men_node = xmldoc-&gt;create_element( &apos;pfstatus_men&apos; ).
      setattributesfromstructure(
               node = men_node
               structure =  xmen ).
      rc = pfstat_node-&gt;append_child( men_node ).
    endloop.

    loop at imtx into xmtx.
      mtx_node = xmldoc-&gt;create_element( &apos;pfstatus_mtx&apos; ).
      setattributesfromstructure(
               node = mtx_node
               structure =  xmtx ).
      rc = pfstat_node-&gt;append_child( mtx_node ).
    endloop.

    loop at iact into xact.
      act_node = xmldoc-&gt;create_element( &apos;pfstatus_act&apos; ).
      setattributesfromstructure(
               node = act_node
               structure =  xact ).
      rc = pfstat_node-&gt;append_child( act_node ).
    endloop.

    loop at ibut into xbut.
      but_node = xmldoc-&gt;create_element( &apos;pfstatus_but&apos; ).
      setattributesfromstructure(
               node = but_node
               structure =  xbut ).
      rc = pfstat_node-&gt;append_child( but_node ).
    endloop.

    loop at ipfk into xpfk.
      pfk_node = xmldoc-&gt;create_element( &apos;pfstatus_pfk&apos; ).
      setattributesfromstructure(
               node = pfk_node
               structure =  xpfk ).
      rc = pfstat_node-&gt;append_child( pfk_node ).
    endloop.

    loop at iset into xset.
      set_node = xmldoc-&gt;create_element( &apos;pfstatus_set&apos; ).
      setattributesfromstructure(
               node = set_node
               structure =  xset ).
      rc = pfstat_node-&gt;append_child( set_node ).
    endloop.

    loop at idoc into xdoc.
      doc_node = xmldoc-&gt;create_element( &apos;pfstatus_doc&apos; ).
      setattributesfromstructure(
               node = doc_node
               structure =  xdoc ).
      rc = pfstat_node-&gt;append_child( doc_node ).
    endloop.


    loop at ibiv into xbiv.
      biv_node = xmldoc-&gt;create_element( &apos;pfstatus_biv&apos; ).
      setattributesfromstructure(
               node = biv_node
               structure =  xbiv ).
      rc = pfstat_node-&gt;append_child( biv_node ).
    endloop.

  endif.


* It itit is filled, assume one or more titles
  if itit[] is not initial.

    loop at itit into xtit.
      tit_node = xmldoc-&gt;create_element( &apos;pfstatus_tit&apos; ).
      setattributesfromstructure(
               node = tit_node
               structure =  xtit ).
      rc = pfstat_node-&gt;append_child( tit_node ).
    endloop.

  endif.

endmethod.</source>
  </method>
  <method CLSNAME="ZSAPLINK_FUNCTIONGROUP" CMPNAME="GET_TEXTPOOL" VERSION="1" LANGU="E" DESCRIPT="Get Text Pool" EXPOSURE="0" STATE="1" EDITORDER="8 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZSAPLINK_FUNCTIONGROUP" CMPNAME="GET_TEXTPOOL" SCONAME="TEXTNODE" VERSION="1" LANGU="E" DESCRIPT="IF_IXML_ELEMENT" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="3" TYPE="IF_IXML_ELEMENT"/>
   <source>method GET_TEXTPOOL.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/

data aText type ref to if_ixml_element.
data textPoolTable type standard table of TEXTPOOL.
data textPoolRow type textPool.
data languageList type instLang.
data aLanguage type SPRAS.
data _objName(30) type c.
data rc type i.
data sTemp type string.
data languageNode type ref to if_ixml_element.

  _objName = objName.


  textNode = xmlDoc-&gt;create_element( &apos;textPool&apos; ).

  CALL FUNCTION &apos;RS_TEXTLOG_GET_PARAMETERS&apos;
        changing
          INSTALLED_LANGUAGES = languageList.

  loop at languageList into aLanguage.
    read textpool _objName into textPoolTable language aLanguage.
    if sy-subrc = 0.
      languageNode = xmlDoc-&gt;create_Element( &apos;language&apos; ).
      sTemp = aLanguage.
      rc = languageNode-&gt;set_attribute( name = &apos;SPRAS&apos; value = sTemp ).
      loop at textPoolTable into textPoolRow.
        aText = xmlDoc-&gt;create_element( &apos;textElement&apos; ).
        setAttributesFromStructure( node = aText structure =
        textPoolRow ).
        rc = languageNode-&gt;append_child( aText ).
      endloop.
      rc = textNode-&gt;append_child( languageNode ).
    endif.
  endloop.

endmethod.</source>
  </method>
  <method CLSNAME="ZSAPLINK_FUNCTIONGROUP" CMPNAME="TRANSPORT_COPY" VERSION="1" LANGU="E" DESCRIPT="Transport Copy" EXPOSURE="0" STATE="1" EDITORDER="15 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" MTDNEWEXC="X" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZSAPLINK_FUNCTIONGROUP" CMPNAME="TRANSPORT_COPY" SCONAME="AUTHOR" VERSION="1" LANGU="E" DESCRIPT="SAP System, User Logon Name" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="SYUNAME"/>
   <parameter CLSNAME="ZSAPLINK_FUNCTIONGROUP" CMPNAME="TRANSPORT_COPY" SCONAME="DEVCLASS" VERSION="1" LANGU="E" DESCRIPT="Package" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="DEVCLASS"/>
   <exception CLSNAME="ZSAPLINK_FUNCTIONGROUP" CMPNAME="TRANSPORT_COPY" SCONAME="ZCX_SAPLINK" VERSION="1" LANGU="E" DESCRIPT="SAPlink exception class" MTDTYPE="0" EDITORDER="1 "/>
   <source>method TRANSPORT_COPY.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/


  CALL FUNCTION &apos;RS_CORR_INSERT&apos;
       EXPORTING
            AUTHOR              = author
            GLOBAL_LOCK         = &apos;X&apos;
            OBJECT              = objName
            OBJECT_CLASS        = &apos;ABAP&apos;
            DEVCLASS            = devClass
*            KORRNUM             = CORRNUMBER_LOCAL
            MASTER_LANGUAGE     = sy-langu
*            PROGRAM             = PROGRAM_LOCAL
            MODE                = &apos;INSERT&apos;
*       IMPORTING
*            AUTHOR              = UNAME
*            KORRNUM             = CORRNUMBER_LOCAL
*            DEVCLASS            = DEVCLASS_LOCAL
       EXCEPTIONS
            CANCELLED           = 1
            PERMISSION_FAILURE  = 2
            UNKNOWN_OBJECTCLASS = 3.

  if sy-subrc &lt;&gt; 0.
    case sy-subrc.
      when 2.
        raise exception type zcx_saplink
          exporting
            textid = zcx_saplink=&gt;not_authorized.
      when others.
        raise exception type zcx_saplink
          exporting
            textid = zcx_saplink=&gt;system_error.
    endcase.
  endif.

endmethod.</source>
  </method>
 </CLAS>
 <CLAS CLSNAME="ZSAPLINK_MESSAGE_CLASS" VERSION="1" LANGU="E" DESCRIPT="SAPLink - Message Class plugin" CATEGORY="00" EXPOSURE="2" STATE="1" RELEASE="0" CLSCCINCL="X" FIXPT="X" UNICODE="X" CLSBCCAT="00" DURATION_TYPE="0 " RISK_LEVEL="0 " REFCLSNAME="ZSAPLINK">
  <localImplementation>*&quot;* local class implementation for public class
*&quot;* use this source file for the implementation part of
*&quot;* local helper classes</localImplementation>
  <localTypes>*&quot;* use this source file for any type declarations (class
*&quot;* definitions, interfaces or data types) you need for method
*&quot;* implementation or private method&apos;s signature</localTypes>
  <localMacros>*&quot;* use this source file for any macro definitions you need
*&quot;* in the implementation part of the class</localMacros>
  <inheritance CLSNAME="ZSAPLINK_MESSAGE_CLASS" REFCLSNAME="ZSAPLINK" VERSION="1" STATE="1">
   <redefinition CLSNAME="ZSAPLINK_MESSAGE_CLASS" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="CHECKEXISTS" EXPOSURE="2"/>
   <redefinition CLSNAME="ZSAPLINK_MESSAGE_CLASS" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="CREATEIXMLDOCFROMOBJECT" EXPOSURE="2"/>
   <redefinition CLSNAME="ZSAPLINK_MESSAGE_CLASS" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="CREATEOBJECTFROMIXMLDOC" EXPOSURE="2"/>
   <redefinition CLSNAME="ZSAPLINK_MESSAGE_CLASS" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="DELETEOBJECT" EXPOSURE="1"/>
   <redefinition CLSNAME="ZSAPLINK_MESSAGE_CLASS" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="GETOBJECTTYPE" EXPOSURE="1"/>
  </inheritance>
  <method CLSNAME="ZSAPLINK" CMPNAME="CHECKEXISTS" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/
METHOD checkexists .

*      Plugin created by:
*      John Patterson
*      patterjo@gmail.com

  DATA: ls_t100a TYPE t100a,
        lv_msgid TYPE msgid.

  lv_msgid =  objname.

  SELECT SINGLE *
    INTO ls_t100a
    FROM t100a
    WHERE arbgb = lv_msgid.

  IF sy-subrc = 0.
    exists = &apos;X&apos;.
  ENDIF.

ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZSAPLINK" CMPNAME="CREATEIXMLDOCFROMOBJECT" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/
METHOD createixmldocfromobject .

*      Plugin created by:
*      John Patterson
*      patterjo@gmail.com

  DATA: lt_t100  TYPE STANDARD TABLE OF t100,
        lt_t100t TYPE STANDARD TABLE OF t100t,
        ls_t100  LIKE LINE OF lt_t100,
        ls_t100t LIKE LINE OF lt_t100t,
        ls_t100a TYPE t100a.

  DATA: lv_msgid TYPE msgid,
        lv_rc    TYPE sysubrc,
        lv_objtype TYPE string.

*xml nodes
  DATA: lr_rootnode   TYPE REF TO if_ixml_element,
        lr_t100_node  TYPE REF TO if_ixml_element,
        lr_t100t_node TYPE REF TO if_ixml_element.

  lv_msgid = objname.

  SELECT SINGLE *
   INTO ls_t100a
   FROM t100a WHERE arbgb = lv_msgid.

  IF sy-subrc NE 0.
    RAISE EXCEPTION TYPE zcx_saplink
    EXPORTING textid = zcx_saplink=&gt;not_found.
  ENDIF.
  CALL FUNCTION &apos;RS_ACCESS_PERMISSION&apos;
    EXPORTING
      authority_check          = &apos;X&apos;
      global_lock              = space
      mode                     = &apos;SHOW&apos;
      object                   = lv_msgid
      object_class             = &apos;T100&apos;
    EXCEPTIONS
      canceled_in_corr         = 01
      enqueued_by_user         = 02
      enqueue_system_failure   = 03
      illegal_parameter_values = 04
      locked_by_author         = 05
      no_modify_permission     = 06
      no_show_permission       = 07
      permission_failure       = 08.
  CASE sy-subrc.
    WHEN 0.
    WHEN 2 OR 5.
      RAISE EXCEPTION TYPE zcx_saplink
        EXPORTING textid = zcx_saplink=&gt;locked.
    WHEN 6 OR 7 OR 8 OR 9.
      RAISE EXCEPTION TYPE zcx_saplink
        EXPORTING textid = zcx_saplink=&gt;not_authorized.
    WHEN OTHERS.
      RAISE EXCEPTION TYPE zcx_saplink
        EXPORTING textid = zcx_saplink=&gt;system_error.
  ENDCASE.

*--- get messages for all maintained languages
  SELECT *
   INTO TABLE lt_t100
   FROM t100
   WHERE arbgb = lv_msgid.

*--- get text for t100a
  SELECT  *
   INTO TABLE lt_t100t
   FROM t100t
   WHERE arbgb = lv_msgid.

*-- Create parent node
  lv_objtype = getobjecttype( ).
  lr_rootnode = xmldoc-&gt;create_element( lv_objtype ).
  setattributesfromstructure( node = lr_rootnode
                              structure = ls_t100a ).

*--- Create Elements for Messages
  LOOP AT lt_t100 INTO ls_t100.
    lr_t100_node = xmldoc-&gt;create_element( &apos;t100&apos; ).
    setattributesfromstructure( node = lr_t100_node
                                structure = ls_t100 ).
    lv_rc = lr_rootnode-&gt;append_child( lr_t100_node ).
  ENDLOOP.

*--- Create Elements for Texts
  LOOP AT lt_t100t INTO ls_t100t.
    lr_t100t_node = xmldoc-&gt;create_element( &apos;t100t&apos; ).
    setattributesfromstructure( node = lr_t100t_node
                                structure = ls_t100t ).
    lv_rc = lr_rootnode-&gt;append_child( lr_t100t_node ).
  ENDLOOP.

  lv_rc = xmldoc-&gt;append_child( lr_rootnode ).
  ixmldocument = xmldoc.



ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZSAPLINK" CMPNAME="CREATEOBJECTFROMIXMLDOC" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/
METHOD createobjectfromixmldoc .

*      Plugin created by:
*      John Patterson
*      patterjo@gmail.com

  DATA: lt_t100  TYPE STANDARD TABLE OF t100,
        lt_t100t TYPE STANDARD TABLE OF t100t,
        ls_t100  LIKE LINE OF lt_t100,
        ls_t100t LIKE LINE OF lt_t100t,
        ls_t100a TYPE t100a.

  DATA: lv_msgid TYPE msgid,
        lv_rc    TYPE sysubrc,
        lv_objtype TYPE string,
        lv_checkexists TYPE char1,
        lv_len TYPE i.

*--- xml data objects
  DATA: lr_rootnode   TYPE REF TO if_ixml_element,
        lr_t100_node  TYPE REF TO if_ixml_element,
        lr_t100t_node TYPE REF TO if_ixml_element,
        lr_filter     TYPE REF TO if_ixml_node_filter,
        lr_iterator   TYPE REF TO if_ixml_node_iterator.

  lv_msgid = objname.
  lv_objtype = getobjecttype( ).

  xmldoc = ixmldocument.
  lr_rootnode = xmldoc-&gt;find_from_name( lv_objtype ).

  CALL METHOD getstructurefromattributes
    EXPORTING
      node      = lr_rootnode
    CHANGING
      structure = ls_t100a.

  objname = ls_t100a-arbgb.

  lv_checkexists = checkexists( ).
  IF lv_checkexists IS NOT INITIAL.
    IF overwrite IS INITIAL.
      RAISE EXCEPTION TYPE zcx_saplink
        EXPORTING textid = zcx_saplink=&gt;existing.
    ELSE.
      deleteobject( ).
    ENDIF.
  ENDIF.

*--- Read Elements for Messages
  FREE: lr_filter, lr_iterator, lr_t100_node, lr_t100t_node.
  lr_filter = xmldoc-&gt;create_filter_name( &apos;t100&apos; ).
  lr_iterator = xmldoc-&gt;create_iterator_filtered( lr_filter ).
  lr_t100_node ?= lr_iterator-&gt;get_next( ).

  WHILE lr_t100_node IS NOT INITIAL.
    CLEAR ls_t100.
    CALL METHOD getstructurefromattributes
      EXPORTING
        node      = lr_t100_node
      CHANGING
        structure = ls_t100.
    APPEND ls_t100 TO lt_t100.
    lr_t100_node ?= lr_iterator-&gt;get_next( ).
  ENDWHILE.

*--- Create Elements for Texts
  FREE: lr_filter, lr_iterator, lr_t100_node, lr_t100t_node.
  lr_filter = xmldoc-&gt;create_filter_name( &apos;t100t&apos; ).
  lr_iterator = xmldoc-&gt;create_iterator_filtered( lr_filter ).
  lr_t100t_node ?= lr_iterator-&gt;get_next( ).

  WHILE lr_t100t_node IS NOT INITIAL.
    CLEAR ls_t100t.
    CALL METHOD getstructurefromattributes
      EXPORTING
        node      = lr_t100t_node
      CHANGING
        structure = ls_t100t.
    APPEND ls_t100t TO lt_t100t.
    lr_t100t_node ?= lr_iterator-&gt;get_next( ).
  ENDWHILE.

  CALL FUNCTION &apos;RS_ACCESS_PERMISSION&apos;
    EXPORTING
      mode         = &apos;FREE&apos;
      object       = lv_msgid
      object_class = &apos;T100&apos;.

*--- Check permission
  CALL FUNCTION &apos;RS_ACCESS_PERMISSION&apos;
    EXPORTING
      authority_check          = &apos;X&apos;
      global_lock              = &apos;X&apos;
      mode                     = &apos;INSERT&apos;
      language_upd_exit        = &apos;UPDATE_MASTER&apos;
      master_language          = ls_t100a-masterlang
      object                   = lv_msgid
      object_class             = &apos;T100&apos;
      suppress_language_check  = &apos; &apos;
    EXCEPTIONS
      canceled_in_corr         = 01
      enqueued_by_user         = 02
      enqueue_system_failure   = 03
      illegal_parameter_values = 04
      locked_by_author         = 05
      no_modify_permission     = 06
      no_show_permission       = 07
      permission_failure       = 08.
  CASE sy-subrc.
    WHEN 0.
    WHEN 2 OR 5.
      RAISE EXCEPTION TYPE zcx_saplink
        EXPORTING textid = zcx_saplink=&gt;locked.
    WHEN 6 OR 7 OR 8 OR 9.
      RAISE EXCEPTION TYPE zcx_saplink
        EXPORTING textid = zcx_saplink=&gt;not_authorized.
    WHEN OTHERS.
      RAISE EXCEPTION TYPE zcx_saplink
        EXPORTING textid = zcx_saplink=&gt;system_error.
  ENDCASE.

  CALL FUNCTION &apos;RS_CORR_INSERT&apos;
       EXPORTING
            author              = sy-uname
            global_lock         = &apos;X&apos;
            object              = objname
            object_class        = &apos;T100&apos;
            devclass            = devclass
            master_language     = sy-langu
            mode                = &apos;INSERT&apos;
*       IMPORTING
*            AUTHOR              = UNAME
*            KORRNUM             = CORRNUMBER_LOCAL
*            DEVCLASS            = DEVCLASS_LOCAL
       EXCEPTIONS
            cancelled           = 1
            permission_failure  = 2
            unknown_objectclass = 3.

  IF sy-subrc &lt;&gt; 0.
    CASE sy-subrc.
      WHEN 2.
        RAISE EXCEPTION TYPE zcx_saplink
          EXPORTING
            textid = zcx_saplink=&gt;not_authorized.
      WHEN OTHERS.
        RAISE EXCEPTION TYPE zcx_saplink
          EXPORTING
            textid = zcx_saplink=&gt;system_error.
    ENDCASE.
  ENDIF.

*--- update message tables
  CLEAR: ls_t100a-applclass.

  ls_t100a-lastuser = sy-uname.
  ls_t100a-ldate = sy-datum.
  ls_t100a-ltime = sy-uzeit.

  MODIFY t100a FROM ls_t100a.
  MODIFY t100 FROM TABLE lt_t100.
  MODIFY t100t FROM TABLE lt_t100t.

  CALL FUNCTION &apos;RS_TREE_OBJECT_PLACEMENT&apos;
    EXPORTING
      object    = lv_msgid
      operation = &apos;INSERT&apos;
      type      = &apos;CN&apos;.

  CALL FUNCTION &apos;RS_ACCESS_PERMISSION&apos;
    EXPORTING
      mode         = &apos;FREE&apos;
      object       = lv_msgid
      object_class = &apos;T100&apos;.

  name = objname.
ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZSAPLINK" CMPNAME="DELETEOBJECT" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/
method DELETEOBJECT .
*      Plugin created by:
*      John Patterson
*      patterjo@gmail.com
endmethod.</source>
  </method>
  <method CLSNAME="ZSAPLINK" CMPNAME="GETOBJECTTYPE" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/
METHOD getobjecttype .

*      Plugin created by:
*      John Patterson
*      patterjo@gmail.com

  objecttype = &apos;MSAG&apos;. &quot;Message Class
ENDMETHOD.</source>
  </method>
 </CLAS>
 <CLAS CLSNAME="ZSAPLINK_PDF_FORMS" VERSION="1" LANGU="E" DESCRIPT="SAPlink - Programs" CATEGORY="00" EXPOSURE="2" STATE="1" RELEASE="0" CLSFINAL="X" CLSCCINCL="X" FIXPT="X" UNICODE="X" CLSBCCAT="00" DURATION_TYPE="0 " RISK_LEVEL="0 " REFCLSNAME="ZSAPLINK">
  <localImplementation>*&quot;* local class implementation for public class
*&quot;* use this source file for the implementation part of
*&quot;* local helper classes</localImplementation>
  <localTypes>*&quot;* use this source file for any type declarations (class
*&quot;* definitions, interfaces or data types) you need for method
*&quot;* implementation or private method&apos;s signature</localTypes>
  <localMacros>*&quot;* use this source file for any macro definitions you need
*&quot;* in the implementation part of the class</localMacros>
  <inheritance CLSNAME="ZSAPLINK_PDF_FORMS" REFCLSNAME="ZSAPLINK" VERSION="1" STATE="1">
   <redefinition CLSNAME="ZSAPLINK_PDF_FORMS" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="CHECKEXISTS" EXPOSURE="2"/>
   <redefinition CLSNAME="ZSAPLINK_PDF_FORMS" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="CREATEIXMLDOCFROMOBJECT" EXPOSURE="2"/>
   <redefinition CLSNAME="ZSAPLINK_PDF_FORMS" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="CREATEOBJECTFROMIXMLDOC" EXPOSURE="2"/>
   <redefinition CLSNAME="ZSAPLINK_PDF_FORMS" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="DELETEOBJECT" EXPOSURE="1"/>
   <redefinition CLSNAME="ZSAPLINK_PDF_FORMS" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="GETOBJECTTYPE" EXPOSURE="1"/>
  </inheritance>
  <method CLSNAME="ZSAPLINK" CMPNAME="CHECKEXISTS" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/
METHOD checkexists .

  SELECT SINGLE name FROM fplayout INTO objname WHERE name = objname.
  IF sy-subrc = 0.
    exists = &apos;X&apos;.
  ENDIF.

ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZSAPLINK" CMPNAME="CREATEIXMLDOCFROMOBJECT" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/
METHOD createixmldocfromobject .
  DATA rootnode     TYPE REF TO if_ixml_element.
  DATA sourcenode   TYPE REF TO if_ixml_element.
  DATA rc           TYPE sysubrc.
  DATA sourcestring TYPE string.
  DATA _objtype     TYPE string.

  TYPES: t_raw(1024) TYPE x.

  DATA: l_wb_form        TYPE REF TO   if_fp_wb_form,
        l_form           TYPE REF TO   if_fp_form,
        l_formname       TYPE          fpname,
        l_name           TYPE          string,
        l_file_table     TYPE          filetable,
        l_filename       TYPE          string,
        l_pathname       TYPE          string,
        l_fullpath       TYPE          string,
        l_rc             TYPE          i,
        l_user_action    TYPE          i,
        l_xstring        TYPE          xstring,
        l_string        TYPE          string,
        l_binary_table   TYPE TABLE OF t_raw,
        l_binary_length  TYPE          i,
        l_node           TYPE REF TO   if_fp_node,
        l_form_wb        TYPE REF TO   cl_fp_wb_form,
        l_form_wb_if     TYPE REF TO   if_fp_wb_form.

  l_formname = objname.

  TRY.
      CALL METHOD cl_fp_wb_form=&gt;load
        EXPORTING
          i_name    = l_formname
        RECEIVING
          r_wb_form = l_form_wb_if.
    CATCH cx_fp_api_usage .
      CLEAR ixmldocument.
      RAISE EXCEPTION TYPE zcx_saplink
        EXPORTING textid = zcx_saplink=&gt;not_found.
    CATCH cx_fp_api_repository .
      CLEAR ixmldocument.
      RAISE EXCEPTION TYPE zcx_saplink
        EXPORTING textid = zcx_saplink=&gt;not_found.
    CATCH cx_fp_api_internal .
      CLEAR ixmldocument.
      RAISE EXCEPTION TYPE zcx_saplink
        EXPORTING textid = zcx_saplink=&gt;not_found.
  ENDTRY.

  l_wb_form ?= l_form_wb_if.

  l_form ?= l_wb_form-&gt;get_object( ).

  l_name = l_wb_form-&gt;get_name( ).

  TRY.
      l_xstring = cl_fp_helper=&gt;convert_form_to_xstring( l_form ).
    CATCH cx_fp_api_internal.
      CLEAR ixmldocument.
      RAISE EXCEPTION TYPE zcx_saplink
        EXPORTING textid = zcx_saplink=&gt;not_found.
  ENDTRY.

  _objtype = getobjecttype( ).
  rootnode = xmldoc-&gt;create_element( _objtype ).

  DATA: wa_fplayout TYPE fplayout.

  SELECT SINGLE * FROM fplayout INTO wa_fplayout WHERE name = objname.

  setattributesfromstructure( node = rootnode structure =  wa_fplayout
  ).
  sourcenode = xmldoc-&gt;create_element( &apos;PDFform&apos; ).

  l_string = l_xstring.

  rc = sourcenode-&gt;if_ixml_node~set_value( l_string ).
  rc = rootnode-&gt;append_child( sourcenode ).
  rc = xmldoc-&gt;append_child( rootnode ).
  ixmldocument = xmldoc.

ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZSAPLINK" CMPNAME="CREATEOBJECTFROMIXMLDOC" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/

METHOD createobjectfromixmldoc .

  DATA rootnode         TYPE REF TO if_ixml_element.
  DATA progattribs      TYPE trdir.
  DATA sourcenode       TYPE REF TO if_ixml_element.
  DATA l_xml_node       TYPE REF TO if_ixml_element.
  DATA source           TYPE string.
  DATA sourcetable      TYPE table_of_strings.
  DATA _objtype         TYPE string.
  DATA checkexists      TYPE flag.

  DATA: wa_fplayout     TYPE fplayout,
        formname        TYPE tdsfname,
        modif_language  TYPE sylangu.

  TYPES: t_raw(1024) TYPE x.

  DATA: l_exception_workbench  TYPE REF TO   cx_fp_ui_workbench,
        l_exception_usage      TYPE REF TO   cx_fp_api_usage,
        l_exception_repository TYPE REF TO   cx_fp_api_repository,
        l_exception_internal   TYPE REF TO   cx_fp_api_internal,
        l_message_text         TYPE          string,
        l_form                 TYPE REF TO   if_fp_form,
        l_file_table           TYPE          filetable,
        l_filename             TYPE          string,
        l_rc                   TYPE          i,
        l_user_action          TYPE          i,
        l_xstring              TYPE          xstring,
        l_binary_table         TYPE TABLE OF t_raw,
        l_binary_length        TYPE          i,
        l_node                 TYPE REF TO   if_fp_node,
        m_wb_object            TYPE REF TO   if_fp_wb_form.

  _objtype = getobjecttype( ).
  xmldoc = ixmldocument.
  rootnode = xmldoc-&gt;find_from_name( _objtype ).
  CALL METHOD getstructurefromattributes
    EXPORTING
      node      = rootnode
    CHANGING
      structure = wa_fplayout.
  objname = wa_fplayout-name.

  checkexists = checkexists( ).
  IF checkexists IS NOT INITIAL.
    IF overwrite IS INITIAL.
      RAISE EXCEPTION TYPE zcx_saplink
        EXPORTING textid = zcx_saplink=&gt;existing.
    ELSE.
*     delete object for new install
      deleteobject( ).
    ENDIF.
  ENDIF.

  sourcenode = rootnode-&gt;find_from_name( &apos;PDFform&apos; ).
  source = sourcenode-&gt;get_value( ).
  l_xstring = source.

  formname = objname.

  TRY.
      TRY.
          cl_fp_wb_helper=&gt;form_exists( wa_fplayout-name ).
        CATCH cx_fp_api_usage INTO l_exception_usage.
          RAISE EXCEPTION TYPE zcx_saplink
               EXPORTING msg = &apos;Error creating PDF form&apos;.
        CATCH cx_fp_api_repository INTO l_exception_repository.

          CASE l_exception_repository-&gt;textid.

            WHEN cx_fp_api_repository=&gt;object_already_exists.

              l_message_text = l_exception_repository-&gt;get_text( ).

              RAISE EXCEPTION TYPE zcx_saplink
               EXPORTING msg = &apos;Object already exists&apos;.

          ENDCASE.

      ENDTRY.

      TRY.
          l_form = cl_fp_helper=&gt;convert_xstring_to_form( i_xstring = l_xstring i_language = sy-langu ).

          CALL METHOD cl_fp_helper=&gt;set_new_layout_id
            CHANGING
              c_form = l_form.
        CATCH cx_fp_api_internal.
          RAISE EXCEPTION TYPE zcx_saplink
           EXPORTING msg = &apos;Convert XML error&apos;.
          EXIT.
      ENDTRY.

      TRY.
          m_wb_object = cl_fp_wb_form=&gt;create( i_name = wa_fplayout-name i_form = l_form ).
        CATCH cx_fp_api_usage INTO l_exception_usage.

          RAISE EXCEPTION TYPE zcx_saplink
           EXPORTING msg = &apos;Error creating PDF form&apos;.

        CATCH cx_fp_api_repository INTO l_exception_repository.

          RAISE EXCEPTION TYPE zcx_saplink
           EXPORTING msg = &apos;Error creating PDF form&apos;.

      ENDTRY.

      TRY.
          m_wb_object-&gt;save( ).
        CATCH cx_fp_api_usage INTO l_exception_usage.

          TRY.
              m_wb_object-&gt;free( ).
            CATCH cx_fp_api.
          ENDTRY.

          RAISE EXCEPTION TYPE zcx_saplink
           EXPORTING msg = &apos;Error saving PDF form&apos;.

        CATCH cx_fp_api_repository INTO l_exception_repository.

          TRY.
              m_wb_object-&gt;free( ).
            CATCH cx_fp_api.
          ENDTRY.

          RAISE EXCEPTION TYPE zcx_saplink
           EXPORTING msg = &apos;Error saving PDF form&apos;.

        CATCH cx_fp_api_internal INTO l_exception_internal.

          TRY.
              m_wb_object-&gt;free( ).
            CATCH cx_fp_api.
          ENDTRY.

          RAISE EXCEPTION TYPE zcx_saplink
           EXPORTING msg = &apos;Error saving PDF form&apos;.

      ENDTRY.

      TRY.
          m_wb_object-&gt;free( ).
        CATCH cx_fp_api.
      ENDTRY.


    CATCH cx_fp_ui_workbench INTO l_exception_workbench.

      IF l_exception_workbench-&gt;textid &lt;&gt; cx_fp_ui_workbench=&gt;error_occured.

        l_message_text = l_exception_workbench-&gt;get_text( ).
        RAISE EXCEPTION TYPE zcx_saplink
         EXPORTING msg = l_message_text.

      ENDIF.

  ENDTRY.


ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZSAPLINK" CMPNAME="DELETEOBJECT" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/
METHOD deleteobject .
  DATA: l_wb_form   TYPE REF TO cl_fp_wb_form,
        l_formname  TYPE fpname.

  l_formname = objname.

  TRY.
      CALL METHOD cl_fp_wb_form=&gt;delete
        EXPORTING
          i_name = l_formname.
    CATCH cx_fp_api_usage .
    CATCH cx_fp_api_repository .
  ENDTRY.



ENDMETHOD.                    &quot;createobjectfromixmldoc</source>
  </method>
  <method CLSNAME="ZSAPLINK" CMPNAME="GETOBJECTTYPE" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/
METHOD getobjecttype .
  objecttype = &apos;SFPF&apos;. &quot;Form Object: Form
ENDMETHOD.</source>
  </method>
 </CLAS>
 <CLAS CLSNAME="ZSAPLINK_SICF" VERSION="1" LANGU="E" DESCRIPT="SAPlink - BSP plugin" CATEGORY="00" EXPOSURE="2" STATE="1" RELEASE="0" CLSCCINCL="X" FIXPT="X" UNICODE="X" CLSBCCAT="00" DURATION_TYPE="0 " RISK_LEVEL="0 " REFCLSNAME="ZSAPLINK">
  <localImplementation>*&quot;* local class implementation for public class
*&quot;* use this source file for the implementation part of
*&quot;* local helper classes</localImplementation>
  <localTypes>*&quot;* use this source file for any type declarations (class
*&quot;* definitions, interfaces or data types) you need for method
*&quot;* implementation or private method&apos;s signature</localTypes>
  <localMacros>*&quot;* use this source file for any macro definitions you need
*&quot;* in the implementation part of the class</localMacros>
  <inheritance CLSNAME="ZSAPLINK_SICF" REFCLSNAME="ZSAPLINK" VERSION="1" STATE="1">
   <redefinition CLSNAME="ZSAPLINK_SICF" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="CHECKEXISTS" EXPOSURE="2"/>
   <redefinition CLSNAME="ZSAPLINK_SICF" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="CREATEIXMLDOCFROMOBJECT" EXPOSURE="2"/>
   <redefinition CLSNAME="ZSAPLINK_SICF" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="CREATEOBJECTFROMIXMLDOC" EXPOSURE="2"/>
   <redefinition CLSNAME="ZSAPLINK_SICF" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="DELETEOBJECT" EXPOSURE="1"/>
   <redefinition CLSNAME="ZSAPLINK_SICF" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="GETOBJECTTYPE" EXPOSURE="1"/>
  </inheritance>
  <method CLSNAME="ZSAPLINK" CMPNAME="CHECKEXISTS" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/
method CHECKEXISTS .

data _objDirEntry type string.
data _icfName type ICFNAME.
data _parentNode type ICFPARGUID.
data l_nodeGuid type ICFNODGUID.
data tempstring type string.

  _objDirEntry = objName.
  split _objDirEntry at space into _icfName tempString.
  condense: _icfName, tempString.
  _parentNode = tempString.

  CALL FUNCTION &apos;HTTP_GET_NODEGUID&apos;
  EXPORTING
    parguid        = _parentNode
    nodename       = _icfName
  IMPORTING
    nodeguid       = l_nodeguid
  EXCEPTIONS
    node_not_found = 1
    OTHERS         = 2.

  if sy-subrc = 0.
    exists = &apos;X&apos;.
  endif.

endmethod.</source>
  </method>
  <method CLSNAME="ZSAPLINK" CMPNAME="CREATEIXMLDOCFROMOBJECT" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/
method CREATEIXMLDOCFROMOBJECT .

data rc type sysubrc.
data rootNode type ref to if_ixml_element.
data _objDirEntry type string.
data _icfName type ICFNAME.
data _parentNode type ICFPARGUID.
*data l_nodeGuid type ICFNODGUID.
data icfAttributes type icfservice.
data tempString type string.

data docNode type ref to if_ixml_element.
data handlerNode type ref to if_ixml_element.
data wa_icfdocu type icfdocu.
data wa_icfhandler type icfhandler.
data it_icfhandler type table of icfhandler.

  _objDirEntry = objName.
  split _objDirEntry at space into _icfName tempString.
  condense: _icfName, tempString.
  _parentNode = tempString.

*  CALL FUNCTION &apos;HTTP_GET_NODEGUID&apos;
*  EXPORTING
*    parguid        = _parentNode
*    nodename       = _icfName
*  IMPORTING
*    nodeguid       = l_nodeguid
*  EXCEPTIONS
*    node_not_found = 1
*    OTHERS         = 2.
*
*  if sy-subrc &lt;&gt; 0.
*    case sy-subrc.
*      when 1.
*        raise exception type zcx_saplink
*          exporting textid = zcx_saplink=&gt;not_found.
*      when others.
*        raise exception type zcx_saplink
*          exporting textid = zcx_saplink=&gt;system_error.
*    endcase.
*  endif.

  select single * from icfservice into icfAttributes
    where icf_name = _icfName
    and   icfparguid = _parentNode.
*    and   icfnodguid = l_nodeGuid.

  if sy-subrc &lt;&gt; 0.
    raise exception type zcx_saplink
      exporting textid = zcx_saplink=&gt;not_found.
  endif.

* Create parent node
  data _objType type string.
  _objType = getObjectType( ).
  rootNode = xmlDoc-&gt;create_element( _objType ).
  setAttributesFromStructure( node = rootNode structure = icfAttributes
  ).
*  rc = rootNode-&gt;if_ixml_node~set_value( _objDirEntry ).

* icfdocu info
  select single * from icfdocu into wa_icfdocu
    where icf_name = _icfName
    and   icfparguid = _parentNode.

  if sy-subrc = 0.
    docNode = xmlDoc-&gt;create_element( &apos;icfdocu&apos; ).
    setAttributesFromStructure( node = docNode structure = wa_icfdocu ).
    rc = rootNode-&gt;append_child( docNode ).
  endif.

* icfhandler entries
  select * from icfhandler into table it_icfhandler
    where icf_name = _icfName
    and   icfparguid = _parentNode.

  loop at it_icfhandler into wa_icfhandler.
    handlerNode = xmlDoc-&gt;create_element( &apos;icfhandler&apos; ).
    setAttributesFromStructure( node = handlerNode structure = wa_icfhandler ).
    rc = rootNode-&gt;append_child( handlerNode ).
  endloop.

* append root to xml and return
  rc = xmldoc-&gt;append_child( rootNode ).
  ixmlDocument = xmlDoc.
endmethod.</source>
  </method>
  <method CLSNAME="ZSAPLINK" CMPNAME="CREATEOBJECTFROMIXMLDOC" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/
method CREATEOBJECTFROMIXMLDOC .

*data _bspName TYPE O2APPLNAME.
*data bspAttributes type O2APPLATTR.
*data flag type char1.
*data transReq type trkorr.
*data nodes type o2applnode_table.
*data navGraph type o2applgrap_table.
*data navLine type O2APPLGRAP.
*data application type ref to cl_o2_api_application.
*data nameSpace type skwf_urlp.
*data folderName type string.
*data folderDesc type sdok_descr.
*data rootNode type ref to if_ixml_element.
*data pageNode type ref to if_ixml_element.
data node type ref to if_ixml_element.
data filter type ref to if_ixml_node_filter.
data iterator type ref to if_ixml_node_iterator.
*data pageIterator type ref to if_ixml_node_iterator.
*data ixmlNode type ref to if_ixml_node.
*data source type string.
*data trobjName type trobj_name.
*data objectName type SEU_OBJKEY.
*data obj_name type E071-OBJ_NAME.
*data l_nodeguid type ICFNODGUID.
*data l_icfdocu  type ICF_DOCU.
*data l_icfname  type ICFNAME.
data _devclass type devclass.
data checkExists type flag.
*
**page data
*data bspPages type O2PAGELIST.
*data bspPage type O2PAGATTR.
*data pageAttributes type O2PAGATTR.
*data newPage TYPE REF TO CL_O2_API_PAGES.
*data pageContent TYPE O2PAGELINE_TABLE.
*data eventHandlers type O2PAGEVH_TABLETYPE.
*data eventHandler type O2PAGEVHS.
*data eventAttributes type O2PAGEVH.
*data pageParameters TYPE O2PAGPAR_TABLETYPE.
*data pageParameter type O2PAGPARS.
*data typeDefinitionSource type RSWSOURCET.
data _objType type string.

data rc type sysubrc.
data rootNode type ref to if_ixml_element.
data _objDirEntry type SOBJ_NAME.
data _icfName type ICFNAME.
data _parentNode type ICFPARGUID.
*data l_nodeGuid type ICFNODGUID.
data icfAttributes type icfservice.
data _icfdocu  type ICF_DOCU.
data wa_icfHandler type icfHandler.
data wa_icfdocu type icfdocu.
data tempString type string.

  _devclass = devclass.
  _objType = getObjectType( ).

  xmlDoc = ixmlDocument.
  rootNode = xmlDoc-&gt;find_from_name( _objType ).

  call method GETSTRUCTUREFROMATTRIBUTES
        exporting
          node = rootNode
        changing
          structure = icfAttributes.

  _objDirEntry = icfAttributes-icf_name.
  _objDirEntry+15 = icfAttributes-icfparguid.

  objName = _objDirEntry.

  checkExists = checkexists( ).
  if checkExists is not initial.
    if overwrite is initial.
      raise exception type zcx_saplink
        exporting textid = zcx_saplink=&gt;existing.
    else.
*     delete object for new install
      deleteobject( ).
    endif.
  endif.

* get documentation info
  free node.
  node = rootnode-&gt;find_from_name( &apos;icfdocu&apos; ).
  if node IS NOT INITIAL.
    call method GETSTRUCTUREFROMATTRIBUTES
          exporting
            node = node
          changing
            structure = wa_icfdocu.
  endif.

****************Create SICF node****************
*  _icfdocu = wa_icfdocu-icf_docu.

  CALL FUNCTION &apos;HTTPTREE_INSERT_NODE&apos;
    EXPORTING
      p_icf_name                      = icfAttributes-icf_Name
      p_icfparguid                    = icfAttributes-icfparguid
      p_icfdocu                       = wa_icfdocu-icf_docu
      p_doculang                      = wa_icfdocu-icf_langu
*      p_icfactive                     = &apos;X&apos;     &quot;activate service
      p_package                       = devclass
   EXCEPTIONS
      NO_NEW_VIRTUAL_HOST             = 1
      SPECIAL_SERVICE_ERROR           = 2
      PARENT_NOT_EXISTING             = 3
      ENQUEUE_ERROR                   = 4
      NODE_ALREADY_EXISTING           = 5
      EMPTY_DOCU                      = 6
      DOCULANG_NOT_INSTALLED          = 7
      SECURITY_INFO_ERROR             = 8
      USER_PASSWORD_ERROR             = 9
      PASSWORD_ENCRYPTION_ERROR       = 10
      INVALID_URL                     = 11
      INVALID_OTR_CONCEPT             = 12
      FORMFLG401_ERROR                = 13
      HANDLER_ERROR                   = 14
      TRANSPORT_ERROR                 = 15
      TADIR_ERROR                     = 16
      PACKAGE_NOT_FOUND               = 17
      OTHERS                          = 18
            .

  if sy-subrc &lt;&gt; 0.
    raise exception type zcx_saplink
      exporting textid = zcx_saplink=&gt;system_error.
  endif.

* insert handler data
  free: filter, iterator, node.
  filter = xmlDoc-&gt;create_filter_name( &apos;icfhandler&apos; ).
  iterator = xmlDoc-&gt;create_iterator_filtered( filter ).
  node ?= iterator-&gt;get_next( ).

  while node is not initial.
    call method GETSTRUCTUREFROMATTRIBUTES
          exporting
            node = node
          changing
            structure = wa_icfHandler.

    if wa_icfHandler is not initial.
      insert icfHandler from wa_icfHandler.
    endif.
    node ?= iterator-&gt;get_next( ).
  endwhile.

* successful install
  name = objName.

endmethod.</source>
  </method>
  <method CLSNAME="ZSAPLINK" CMPNAME="DELETEOBJECT" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/
method DELETEOBJECT .

data _objDirEntry type string.
data _icfName type ICFNAME.
data _parentNode type ICFPARGUID.
data tempstring type string.

  _objDirEntry = objName.
  split _objDirEntry at space into _icfName tempString.
  condense: _icfName, tempString.
  _parentNode = tempString.

****************Delete SICF node****************
  translate _icfname to lower case.

  call function &apos;HTTPTREE_DELETE_NODE&apos;
    exporting
      p_icf_name                        = _icfname
      p_icfparguid                      = _parentNode
    exceptions
      no_virtual_host_delete            = 1
      special_service_error             = 2
      enqueue_error                     = 3
      node_not_existing                 = 4
      node_has_childs                   = 5
      node_is_aliased                   = 6
      node_not_in_original_system       = 7
      transport_error                   = 8
      tadir_error                       = 9
      db_error                          = 10
      others                            = 11.
endmethod.</source>
  </method>
  <method CLSNAME="ZSAPLINK" CMPNAME="GETOBJECTTYPE" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/
method GETOBJECTTYPE .

  objecttype = &apos;SICF&apos;. &quot;SICF Node

endmethod.</source>
  </method>
 </CLAS>
 <CLAS CLSNAME="ZSAPLINK_MIME" VERSION="1" LANGU="E" DESCRIPT="SapLink Class Installer" CATEGORY="00" EXPOSURE="2" STATE="1" RELEASE="0" CLSCCINCL="X" FIXPT="X" UNICODE="X" CLSBCCAT="00" DURATION_TYPE="0 " RISK_LEVEL="0 " REFCLSNAME="ZSAPLINK">
  <types CLSNAME="ZSAPLINK_MIME" CMPNAME="GT_MIME" VERSION="1" LANGU="E" EXPOSURE="0" STATE="1" EDITORDER="1 " TYPTYPE="4" SRCROW1="6 " SRCCOLUMN1="4 " SRCROW2="15 " SRCCOLUMN2="22 " TYPESRC_LENG="282 " TYPESRC="BEGIN OF gt_mime,
          path TYPE string,
          id TYPE sdok_docid,
          class TYPE sdok_class,
          name TYPE string,
          description TYPE string,
          type TYPE w3conttype,
          size TYPE i,
          language TYPE spras,
         END OF gt_mime
"/>
  <localImplementation>*&quot;* local class implementation for public class
*&quot;* use this source file for the implementation part of
*&quot;* local helper classes</localImplementation>
  <localTypes>*&quot;* use this source file for any type declarations (class
*&quot;* definitions, interfaces or data types) you need for method
*&quot;* implementation or private method&apos;s signature</localTypes>
  <localMacros>*&quot;* use this source file for any macro definitions you need
*&quot;* in the implementation part of the class</localMacros>
  <typeUsage CLSNAME="ZSAPLINK_MIME" TYPEGROUP="ABAP" VERSION="1" TPUTYPE="0" EXPLICIT="X"/>
  <typeUsage CLSNAME="ZSAPLINK_MIME" TYPEGROUP="SEOP" VERSION="1" TPUTYPE="0" EXPLICIT="X"/>
  <typeUsage CLSNAME="ZSAPLINK_MIME" TYPEGROUP="SEOR" VERSION="1" TPUTYPE="0" EXPLICIT="X"/>
  <typeUsage CLSNAME="ZSAPLINK_MIME" TYPEGROUP="SEOS" VERSION="1" TPUTYPE="0" EXPLICIT="X"/>
  <typeUsage CLSNAME="ZSAPLINK_MIME" TYPEGROUP="SEOT" VERSION="1" TPUTYPE="0" EXPLICIT="X"/>
  <typeUsage CLSNAME="ZSAPLINK_MIME" TYPEGROUP="SEOX" VERSION="1" TPUTYPE="0" EXPLICIT="X"/>
  <forwardDeclaration>ABAP</forwardDeclaration>
  <forwardDeclaration>SEOP</forwardDeclaration>
  <forwardDeclaration>SEOR</forwardDeclaration>
  <forwardDeclaration>SEOS</forwardDeclaration>
  <forwardDeclaration>SEOT</forwardDeclaration>
  <forwardDeclaration>SEOX</forwardDeclaration>
  <attribute CLSNAME="ZSAPLINK_MIME" CMPNAME="GC_DOC_CLASS_FOLDER_LOG" VERSION="1" LANGU="E" DESCRIPT="Folder document class" EXPOSURE="0" STATE="1" EDITORDER="8 " ATTDECLTYP="0" ATTVALUE="&apos;M_FOLDER&apos;" ATTEXPVIRT="0" TYPTYPE="1" TYPE="STRING" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZSAPLINK_MIME" CMPNAME="GC_DOC_CLASS_IMAGE_LOG" VERSION="1" LANGU="E" DESCRIPT="Document class" EXPOSURE="0" STATE="1" EDITORDER="1 " ATTDECLTYP="2" ATTVALUE="&apos;M_IMAGE_L&apos;" ATTEXPVIRT="0" TYPTYPE="1" TYPE="SDOK_CLASS" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZSAPLINK_MIME" CMPNAME="GC_OBJECT_TYPE" VERSION="1" LANGU="E" DESCRIPT="MIME object type" EXPOSURE="0" STATE="1" EDITORDER="5 " ATTDECLTYP="2" ATTVALUE="&apos;SMIM&apos;" ATTEXPVIRT="0" TYPTYPE="1" TYPE="STRING" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZSAPLINK_MIME" CMPNAME="GC_PROP_FOLDER_CLASS" VERSION="1" LANGU="E" DESCRIPT="Property folder class" EXPOSURE="0" STATE="1" EDITORDER="3 " ATTDECLTYP="2" ATTVALUE="&apos;KW_PARENT_FOLDER_CLASS&apos;" ATTEXPVIRT="0" TYPTYPE="1" TYPE="STRING" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZSAPLINK_MIME" CMPNAME="GC_PROP_FOLDER_ID" VERSION="1" LANGU="E" DESCRIPT="Property folder id" EXPOSURE="0" STATE="1" EDITORDER="2 " ATTDECLTYP="2" ATTVALUE="&apos;KW_PARENT_FOLDER_ID&apos;" ATTEXPVIRT="0" TYPTYPE="1" TYPE="STRING" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZSAPLINK_MIME" CMPNAME="GC_PROP_URL" VERSION="1" LANGU="E" DESCRIPT="Property relative url" EXPOSURE="0" STATE="1" EDITORDER="4 " ATTDECLTYP="2" ATTVALUE="&apos;KW_RELATIVE_URL&apos;" ATTEXPVIRT="0" TYPTYPE="1" TYPE="STRING" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZSAPLINK_MIME" CMPNAME="GR_MIME_REPOSITORY" VERSION="1" LANGU="E" DESCRIPT="API for MIME Repository" EXPOSURE="0" STATE="1" EDITORDER="7 " ATTDECLTYP="0" ATTEXPVIRT="0" TYPTYPE="3" TYPE="IF_MR_API" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZSAPLINK_MIME" CMPNAME="GV_MIME_PATH" VERSION="1" LANGU="E" DESCRIPT="MIME path" EXPOSURE="0" STATE="1" EDITORDER="6 " ATTDECLTYP="0" ATTEXPVIRT="0" TYPTYPE="1" TYPE="STRING" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <inheritance CLSNAME="ZSAPLINK_MIME" REFCLSNAME="ZSAPLINK" VERSION="1" STATE="1">
   <redefinition CLSNAME="ZSAPLINK_MIME" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="CHECKEXISTS" EXPOSURE="2"/>
   <redefinition CLSNAME="ZSAPLINK_MIME" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="CREATEIXMLDOCFROMOBJECT" EXPOSURE="2"/>
   <redefinition CLSNAME="ZSAPLINK_MIME" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="CREATEOBJECTFROMIXMLDOC" EXPOSURE="2"/>
   <redefinition CLSNAME="ZSAPLINK_MIME" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="DELETEOBJECT" EXPOSURE="1"/>
   <redefinition CLSNAME="ZSAPLINK_MIME" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="GETOBJECTTYPE" EXPOSURE="1"/>
  </inheritance>
  <method CLSNAME="ZSAPLINK" CMPNAME="CHECKEXISTS" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>METHOD checkexists.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/
  &quot;
  &quot; References
  DATA lr_mime_repository TYPE REF TO if_mr_api.
  &quot;
  &quot;  Variables
  DATA lv_path TYPE string.

  CLEAR exists.

  &quot; Create MIME repository instance
  lr_mime_repository = cl_mime_repository_api=&gt;get_api( ).

  lr_mime_repository-&gt;get( EXPORTING
                             i_url = objname
                           EXCEPTIONS
                             parameter_missing = 1
                             error_occured = 2
                             not_found = 3
                             permission_failure = 4 ).

  IF sy-subrc = 0.
    &quot; MIME exists
    exists = abap_true.
  ELSE.
    &quot; MIME does not exist
    exists = abap_false.
  ENDIF.
ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZSAPLINK" CMPNAME="CREATEIXMLDOCFROMOBJECT" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>METHOD createixmldocfromobject.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/
  &quot;
  &quot; References
  DATA lr_mime_node TYPE REF TO if_ixml_element.
  &quot;
  &quot;
  DATA lv_return_code TYPE sysubrc.
  &quot;
  &quot; MIME to XML
  lr_mime_node = me-&gt;mime_to_xml( ).

  &quot; Append MIME node to xmldoc
  lv_return_code = xmldoc-&gt;append_child( lr_mime_node ).

  &quot; Return xml
  ixmldocument = xmldoc.
ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZSAPLINK" CMPNAME="CREATEOBJECTFROMIXMLDOC" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>METHOD createobjectfromixmldoc.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/

  xml_to_mime( iv_xml = ixmldocument
               iv_overwrite = overwrite ).

  name = objname.
ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZSAPLINK" CMPNAME="DELETEOBJECT" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>METHOD deleteobject.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/
  &quot;
  &quot; References
  DATA lr_mime_repository TYPE REF TO if_mr_api.
  &quot;
  &quot; Variables
  DATA lv_textid TYPE sotr_conc.

  &quot; Create instance of MIME repository
  lr_mime_repository = cl_mime_repository_api=&gt;get_api( ).

  &quot; Delete MIME object
  lr_mime_repository-&gt;delete( EXPORTING
                                i_url = objname
                                i_delete_children = &apos;X&apos;
                              EXCEPTIONS
                                parameter_missing = 1
                                error_occured = 2
                                cancelled = 3
                                permission_failure = 4
                                not_found = 5 ).

  IF sy-subrc &lt;&gt; 0.
    CASE sy-subrc.
      WHEN 4.
        lv_textid = zcx_saplink=&gt;not_authorized.
      WHEN 5.
        lv_textid = zcx_saplink=&gt;not_found.
    ENDCASE.

    RAISE EXCEPTION TYPE zcx_saplink
        EXPORTING textid = lv_textid.
  ENDIF.
ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZSAPLINK" CMPNAME="GETOBJECTTYPE" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>METHOD getobjecttype.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/
  &quot;
  &quot;Return MIME object type SMIM
  objecttype = me-&gt;gc_object_type.
ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZSAPLINK_MIME" CMPNAME="GET_MIME_CLASS" VERSION="1" LANGU="E" DESCRIPT="Get document class of LOIO (objname)" EXPOSURE="0" STATE="1" EDITORDER="5 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZSAPLINK_MIME" CMPNAME="GET_MIME_CLASS" SCONAME="IV_OBJID" VERSION="1" LANGU="E" DESCRIPT="ID for documents and relations" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="SDOK_DOCID"/>
   <parameter CLSNAME="ZSAPLINK_MIME" CMPNAME="GET_MIME_CLASS" SCONAME="RV_CLASS" VERSION="1" LANGU="E" DESCRIPT="Document class" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="1" TYPE="SDOK_CLASS"/>
   <source>METHOD get_mime_class.
  CLEAR rv_class.
  &quot;
  &quot; Get mime class
  SELECT SINGLE lo_class
    INTO rv_class
    FROM smimloio
    WHERE loio_id = iv_objid.
ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZSAPLINK_MIME" CMPNAME="GET_MIME_DESCRIPTION" VERSION="1" LANGU="E" DESCRIPT="Get description of LOIO (objname)" EXPOSURE="0" STATE="1" EDITORDER="2 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZSAPLINK_MIME" CMPNAME="GET_MIME_DESCRIPTION" SCONAME="IV_CLASS" VERSION="1" LANGU="E" DESCRIPT="Document class" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="SDOK_CLASS"/>
   <parameter CLSNAME="ZSAPLINK_MIME" CMPNAME="GET_MIME_DESCRIPTION" SCONAME="IV_OBJID" VERSION="1" LANGU="E" DESCRIPT="ID for documents and relations" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="SDOK_DOCID"/>
   <parameter CLSNAME="ZSAPLINK_MIME" CMPNAME="GET_MIME_DESCRIPTION" SCONAME="RV_DESCRIPTION" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="3 " DISPID="0 " PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="1" TYPE="STRING"/>
   <source>METHOD get_mime_description.
  &quot;
  &quot; Tables
  DATA lt_object_list TYPE TABLE OF sdokobject.
  DATA lt_descriptions TYPE TABLE OF sdokdesc.
  &quot;
  &quot; Structures
  DATA ls_object_list TYPE sdokobject.
  DATA ls_description TYPE sdokdesc.
  &quot;
  &quot; Variables
  DATA lv_description TYPE string.

  CLEAR rv_description.

  ls_object_list-class = iv_class.
  ls_object_list-objid = iv_objid.

  CALL FUNCTION &apos;SDOK_LOIO_DESCRIPTIONS_GET&apos;
    EXPORTING
      object_id    = ls_object_list
    TABLES
      descriptions = lt_descriptions
    exceptions
    NOT_EXISTING  Object Does Not Exist
NOT_AUTHORIZED  No Authorization  .
  &quot;
  &quot; Description
  READ TABLE lt_descriptions INTO ls_description WITH KEY langu = sy-langu.

  IF sy-subrc = 0.
    lv_description = ls_description-descript.
  ENDIF.

  rv_description = lv_description.
ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZSAPLINK_MIME" CMPNAME="GET_MIME_PATH" VERSION="1" LANGU="E" DESCRIPT="Get path from LOIO (objname)" EXPOSURE="0" STATE="1" EDITORDER="1 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" MTDNEWEXC="X" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZSAPLINK_MIME" CMPNAME="GET_MIME_PATH" SCONAME="IV_CLASS" VERSION="1" LANGU="E" DESCRIPT="Document class" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="SDOK_CLASS"/>
   <parameter CLSNAME="ZSAPLINK_MIME" CMPNAME="GET_MIME_PATH" SCONAME="IV_OBJID" VERSION="1" LANGU="E" DESCRIPT="ID for documents and relations" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="SDOK_DOCID"/>
   <parameter CLSNAME="ZSAPLINK_MIME" CMPNAME="GET_MIME_PATH" SCONAME="RV_PATH" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="3 " DISPID="0 " PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="1" TYPE="STRING"/>
   <exception CLSNAME="ZSAPLINK_MIME" CMPNAME="GET_MIME_PATH" SCONAME="ZCX_SAPLINK" VERSION="1" LANGU="E" DESCRIPT="SAPlink exception class" MTDTYPE="0" EDITORDER="1 "/>
   <source>METHOD GET_MIME_PATH.
  &quot;
  &quot; Tables
  DATA lt_object_list TYPE TABLE OF sdokobject.
  DATA lt_properties TYPE TABLE OF sdokproptl.
  &quot;
  &quot; Structures
  DATA ls_object_list TYPE sdokobject.
  DATA ls_properties TYPE sdokproptl.
  &quot;
  &quot; Variables
  DATA lv_path TYPE string.

  CLEAR rv_path.

  ls_object_list-class = iv_class.
  ls_object_list-objid = iv_objid.
  APPEND ls_object_list TO lt_object_list.

  WHILE lt_object_list IS NOT INITIAL.

    CALL FUNCTION &apos;SDOK_LOIOS_PROPERTIES_GET&apos;
      TABLES
        object_list        = lt_object_list
        properties         = lt_properties.


    CLEAR ls_object_list.
    REFRESH lt_object_list.
    &quot;
    &quot; KW_RELATIVE_URL
    READ TABLE lt_properties INTO ls_properties WITH KEY name = me-&gt;gc_prop_url.

    IF sy-subrc = 0.
      &quot; Build path
      CONCATENATE &apos;/&apos;
                  ls_properties-value
                  lv_path
             INTO lv_path.
    ENDIF.

    &quot;
    &quot;KW_PARENT_FOLDER_CLASS
    READ TABLE lt_properties INTO ls_properties WITH KEY name = me-&gt;gc_prop_folder_class.
    ls_object_list-class = ls_properties-value.

    &quot; KW_PARENT_FOLDER_ID
    READ TABLE lt_properties INTO ls_properties WITH KEY name = me-&gt;gc_prop_folder_id.
    ls_object_list-objid = ls_properties-value.

    IF ls_object_list-class IS NOT INITIAL AND
       ls_object_list-objid IS NOT INITIAL.
      APPEND ls_object_list TO lt_object_list.
    ENDIF.
  ENDWHILE.

  if lv_path is initial.
    &quot;Not found
    RAISE EXCEPTION TYPE zcx_saplink
          EXPORTING textid = zcx_saplink=&gt;not_found.
  endif.

  rv_path = lv_path.
ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZSAPLINK_MIME" CMPNAME="MIME_TO_XML" VERSION="1" LANGU="E" DESCRIPT="Convert MIME to XML" EXPOSURE="0" STATE="1" EDITORDER="3 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZSAPLINK_MIME" CMPNAME="MIME_TO_XML" SCONAME="RR_MIME_NODE" VERSION="1" LANGU="E" DESCRIPT="IF_IXML_ELEMENT" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="3" TYPE="IF_IXML_ELEMENT"/>
   <source>METHOD mime_to_xml.
  &quot;
  &quot; References
  DATA lr_mime_node TYPE REF TO if_ixml_element.
  DATA lr_mime_repository TYPE REF TO if_mr_api.
  DATA lr_zip TYPE REF TO cl_abap_zip.
  &quot;
  &quot; Structures
  DATA ls_mime TYPE gt_mime.
  DATA ls_loio TYPE skwf_io.
  &quot;
  &quot; Variables
  DATA lv_object_type TYPE string.
  DATA lv_return_code TYPE sysubrc.
  DATA lv_mime_xstring TYPE xstring.
  DATA lv_zip_xstring TYPE xstring.
  DATA lv_string TYPE string.
  DATA lv_loio TYPE sdok_docid.
  DATA lv_class TYPE sdok_class.

  CLEAR rr_mime_node.

  try.
      &quot; Object type = SMIM
      lv_object_type = getobjecttype( ).

      &quot; Node SMIM
      lr_mime_node = xmldoc-&gt;create_element( lv_object_type ).

      &quot; Get logical id of info object
      lv_loio = objname.

      &quot; MIME class
      lv_class = me-&gt;get_mime_class( iv_objid = lv_loio ).

      &quot; Build path
      ls_mime-path = me-&gt;get_mime_path( iv_class = lv_class
                               iv_objid = lv_loio ).

      &quot; Get description
      ls_mime-description = me-&gt;get_mime_description( iv_class = lv_class
                                                iv_objid = lv_loio ).

      &quot; MIME repository reference
      lr_mime_repository = cl_mime_repository_api=&gt;get_api( ).

      &quot; Get properties from MIME
      CALL METHOD lr_mime_repository-&gt;properties
        EXPORTING
          i_url              = ls_mime-path
        IMPORTING
          e_name             = ls_mime-name
          e_size             = ls_mime-size
          e_loio             = ls_loio
        EXCEPTIONS
          parameter_missing  = 1
          error_occured      = 2
          not_found          = 3
          permission_failure = 4.

      ls_mime-id = ls_loio-objid.
      ls_mime-class = ls_loio-class.

      &quot; Get file from MIME
      CALL METHOD lr_mime_repository-&gt;get
        EXPORTING
          i_url              = ls_mime-path
        IMPORTING
          e_content          = lv_mime_xstring
          e_mime_type        = ls_mime-type
        CHANGING
          c_language         = ls_mime-language
        EXCEPTIONS
          parameter_missing  = 1
          error_occured      = 2
          not_found          = 3
          permission_failure = 4.

      &quot; Create zip file from MIME file
      CREATE OBJECT lr_zip.

      &quot; Add MIME to zip
      lr_zip-&gt;add(
       EXPORTING name = ls_mime-name
              content = lv_mime_xstring ).

      &quot;
      lr_zip-&gt;save( RECEIVING zip = lv_zip_xstring ).

      &quot; Encode xstring BASE64
      CALL FUNCTION &apos;SCMS_BASE64_ENCODE_STR&apos;
        EXPORTING
          input  = lv_zip_xstring
        IMPORTING
          output = lv_string.

      IF sy-subrc = 0.
        &quot; Set node attributes from structure
        setattributesfromstructure( node = lr_mime_node
                                    structure = ls_mime
                                    ).

        &quot; Add BASE64 string to xml value
        lv_return_code = lr_mime_node-&gt;if_ixml_node~set_value( lv_string ).

        &quot; Return xml node
        rr_mime_node = lr_mime_node.
      ENDIF.
    CATCH zcx_saplink.
    CATCH cx_root.
  ENDTRY.
ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZSAPLINK_MIME" CMPNAME="XML_TO_MIME" VERSION="1" LANGU="E" DESCRIPT="Convert XML to MIME" EXPOSURE="0" STATE="1" EDITORDER="4 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" MTDNEWEXC="X" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZSAPLINK_MIME" CMPNAME="XML_TO_MIME" SCONAME="IV_XML" VERSION="1" LANGU="E" DESCRIPT="IF_IXML_DOCUMENT" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="3" TYPE="IF_IXML_DOCUMENT"/>
   <parameter CLSNAME="ZSAPLINK_MIME" CMPNAME="XML_TO_MIME" SCONAME="IV_DEV_PACKAGE" VERSION="1" LANGU="E" DESCRIPT="Development class/package" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="DEVCLASS" PARVALUE="&apos;$TMP&apos;" PAROPTIONL="X"/>
   <parameter CLSNAME="ZSAPLINK_MIME" CMPNAME="XML_TO_MIME" SCONAME="IV_OVERWRITE" VERSION="1" LANGU="E" DESCRIPT="Overwrite original objects" CMPTYPE="1" MTDTYPE="0" EDITORDER="3 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="FLAG"/>
   <exception CLSNAME="ZSAPLINK_MIME" CMPNAME="XML_TO_MIME" SCONAME="ZCX_SAPLINK" VERSION="1" LANGU="E" DESCRIPT="SAPlink exception class" MTDTYPE="0" EDITORDER="1 "/>
   <source>METHOD xml_to_mime.
  &quot;
  &quot; References
  DATA lr_rootnode TYPE REF TO if_ixml_element.
  DATA lr_filter TYPE REF TO if_ixml_node_filter.
  DATA lr_iterator TYPE REF TO if_ixml_node_iterator.
  DATA lr_node TYPE REF TO if_ixml_element.
  DATA lr_mime_repository TYPE REF TO if_mr_api.
  DATA lr_zip TYPE REF TO cl_abap_zip.
  &quot;
  &quot; Structures
  DATA ls_mime TYPE gt_mime.
  &quot;
  &quot; Variables
  DATA lv_string TYPE string.
  DATA lv_zip_xstring TYPE xstring.
  DATA lv_mime_xstring TYPE xstring.
  DATA lv_is_existing TYPE flag.
  DATA lv_is_folder TYPE flag.

  xmldoc = iv_xml.

  lr_filter = xmldoc-&gt;create_filter_name( me-&gt;gc_object_type ).
  lr_iterator = xmldoc-&gt;create_iterator_filtered( lr_filter ).
  lr_node ?= lr_iterator-&gt;get_next( ).

  WHILE lr_node IS NOT INITIAL.
    getstructurefromattributes( EXPORTING
                                  node = lr_node
                                CHANGING
                                  structure = ls_mime ).

    lv_is_existing = checkexists( ).

    IF lv_is_existing IS NOT INITIAL.
      IF iv_overwrite IS INITIAL.
        RAISE EXCEPTION TYPE zcx_saplink
          EXPORTING textid = zcx_saplink=&gt;existing.
      ELSE.
        &quot; Delete object for new install
        deleteobject( ).
      ENDIF.
    ENDIF.

    TRY.
        &quot; MIME repository API instance
        lr_mime_repository = cl_mime_repository_api=&gt;get_api( ).

        IF ls_mime-class = me-&gt;gc_doc_class_folder_log.
          &quot;
          &quot; Create folder
          lr_mime_repository-&gt;create_folder(
            i_url = ls_mime-path
            i_description = ls_mime-description
            i_language = ls_mime-language
            i_dev_package = iv_dev_package
          ).
        ELSE.
          lv_string = lr_node-&gt;get_value( ).

          CALL FUNCTION &apos;SCMS_BASE64_DECODE_STR&apos;
            EXPORTING
              input  = lv_string
            IMPORTING
              output = lv_zip_xstring.

          &quot;
          &quot; Unzip
          CREATE OBJECT lr_zip.

          &quot;
          lr_zip-&gt;load( zip = lv_zip_xstring ).

          &quot; Get MIME from Zip
          lr_zip-&gt;get( EXPORTING
                         name = ls_mime-name
                       IMPORTING
                         content = lv_mime_xstring
                                  ).
          &quot;
          &quot; Create MIME
          lr_mime_repository-&gt;put(
            EXPORTING
              i_url = ls_mime-path
              i_content = lv_mime_xstring
              i_description = ls_mime-description
              i_language = ls_mime-language
              i_dev_package = iv_dev_package
            EXCEPTIONS
              parameter_missing         = 1
              error_occured             = 2
              cancelled                 = 3
              permission_failure        = 4
              data_inconsistency        = 5
              new_loio_already_exists   = 6
              is_folder                 = 7
              OTHERS                    = 8
          ).
        ENDIF.
      CATCH zcx_saplink.
        RAISE EXCEPTION TYPE zcx_saplink
           EXPORTING textid = zcx_saplink=&gt;cx_root.
      CATCH cx_root.
        RAISE EXCEPTION TYPE zcx_saplink
           EXPORTING textid = zcx_saplink=&gt;cx_root.
    ENDTRY.

    lr_node ?= lr_iterator-&gt;get_next( ).
  ENDWHILE.
ENDMETHOD.</source>
  </method>
 </CLAS>
 <CLAS CLSNAME="ZSAPLINK_SMARTFORM" VERSION="1" LANGU="E" DESCRIPT="SAPlink - Programs" CATEGORY="00" EXPOSURE="2" STATE="1" RELEASE="0" CLSFINAL="X" CLSCCINCL="X" FIXPT="X" UNICODE="X" CLSBCCAT="00" DURATION_TYPE="0 " RISK_LEVEL="0 " REFCLSNAME="ZSAPLINK">
  <localImplementation>*&quot;* local class implementation for public class
*&quot;* use this source file for the implementation part of
*&quot;* local helper classes</localImplementation>
  <localTypes>*&quot;* use this source file for any type declarations (class
*&quot;* definitions, interfaces or data types) you need for method
*&quot;* implementation or private method&apos;s signature</localTypes>
  <localMacros>*&quot;* use this source file for any macro definitions you need
*&quot;* in the implementation part of the class</localMacros>
  <inheritance CLSNAME="ZSAPLINK_SMARTFORM" REFCLSNAME="ZSAPLINK" VERSION="1" STATE="1">
   <redefinition CLSNAME="ZSAPLINK_SMARTFORM" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="CHECKEXISTS" EXPOSURE="2"/>
   <redefinition CLSNAME="ZSAPLINK_SMARTFORM" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="CREATEIXMLDOCFROMOBJECT" EXPOSURE="2"/>
   <redefinition CLSNAME="ZSAPLINK_SMARTFORM" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="CREATEOBJECTFROMIXMLDOC" EXPOSURE="2"/>
   <redefinition CLSNAME="ZSAPLINK_SMARTFORM" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="DELETEOBJECT" EXPOSURE="1"/>
   <redefinition CLSNAME="ZSAPLINK_SMARTFORM" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="GETOBJECTTYPE" EXPOSURE="1"/>
  </inheritance>
  <method CLSNAME="ZSAPLINK" CMPNAME="CHECKEXISTS" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/
METHOD checkexists .

  SELECT SINGLE formname FROM stxfadm INTO objname WHERE formname = objname.
  IF sy-subrc = 0.
    exists = &apos;X&apos;.
  ENDIF.

ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZSAPLINK" CMPNAME="CREATEIXMLDOCFROMOBJECT" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/
METHOD createixmldocfromobject .
  DATA rootnode     TYPE REF TO if_ixml_element.
  DATA sourcenode   TYPE REF TO if_ixml_element.
  DATA rc           TYPE sysubrc.
  DATA sourcestring TYPE string.
  DATA _objtype     TYPE string.

  DATA: l_filename          TYPE string,
        l_file_filter       TYPE string,
        l_user_action       TYPE i.
  DATA: wa_node             type ssfgnode,
        l_element           TYPE REF TO if_ixml_element.
  DATA: l_language_str      TYPE string,
        l_language(2)       TYPE c.
  DATA: l_lines             TYPE i,
        l_splitted_name_tab TYPE TABLE OF string.
  DATA: l_stylename         TYPE tdssname,
        l_stylevari         TYPE tdvariant,
        l_save_style        TYPE tdssname.

  TYPES: t_raw(250) TYPE x.

  CONSTANTS: c_xml_ns_uri_sf(255)  TYPE c
      VALUE &apos;urn:sap-com:SmartForms:2000:internal-structure&apos;,&quot;#EC NOTEXT
             c_xml_ns_uri_ifr(255) TYPE c
      VALUE &apos;urn:sap-com:sdixml-ifr:2000&apos;.                  &quot;#EC NOTEXT

  DATA: g_ixml               TYPE REF TO if_ixml,
        xml_macro_rc         TYPE i,
        xml_document         TYPE REF TO if_ixml_document,
        xml_ns_prefix_sf     TYPE string,
        xml_ns_uri_sf        TYPE string,
        xml_ns_uri_ifr       TYPE string,
        xml_document_size    TYPE i,
        xml_xtable           TYPE TABLE OF t_raw,
        xml_xtable2           TYPE TABLE OF string,
        sform_name           TYPE tdsfname.

  DATA ref_ssf TYPE REF TO cl_ssf_fb_smart_form.

  sform_name = objname.

  IF g_ixml IS INITIAL.
    g_ixml          = cl_ixml=&gt;create( ).
  ENDIF.
  xml_document      = g_ixml-&gt;create_document( ).
  xml_ns_prefix_sf  = &apos;sf&apos;.
  xml_ns_uri_sf     = c_xml_ns_uri_sf.
  xml_ns_uri_ifr    = c_xml_ns_uri_ifr.
  CLEAR: xml_document_size, xml_xtable[], xml_xtable2[].

  CREATE OBJECT ref_ssf.

  TRY.
      CALL METHOD ref_ssf-&gt;load
        EXPORTING
          im_formname = sform_name.

      ref_ssf-&gt;xml_init( ).

      CALL METHOD ref_ssf-&gt;xml_download
        EXPORTING
          parent   = xml_document
        CHANGING
          document = xml_document.

* namespace
      l_element  = xml_document-&gt;get_root_element( ).
      l_element-&gt;set_attribute( name      = xml_ns_prefix_sf
                                namespace = &apos;xmlns&apos;
                                value     = xml_ns_uri_sf ).
      l_element-&gt;set_attribute( name  = &apos;xmlns&apos;
                                value = xml_ns_uri_ifr ).


* language
      WRITE sy-langu TO l_language.
      l_language_str = l_language.
      xml_macro_rc = l_element-&gt;set_attribute(
                          name      = &apos;language&apos;
                          namespace = xml_ns_prefix_sf
                          value     = l_language_str ).

* convert DOM to xml
      CALL FUNCTION &apos;SDIXML_DOM_TO_XML&apos;
        EXPORTING
          document     = xml_document
        IMPORTING
          size         = xml_document_size
        TABLES
          xml_as_table = xml_xtable
        EXCEPTIONS
          OTHERS       = 1.
      CHECK sy-subrc EQ 0.

      _objtype = getobjecttype( ).
      rootnode = xmldoc-&gt;create_element( _objtype ).

      DATA: wa_stxfadm TYPE stxfadm.

      SELECT SINGLE * FROM stxfadm INTO wa_stxfadm WHERE formname = objname.

      setattributesfromstructure( node = rootnode structure =  wa_stxfadm
      ).
      sourcenode = xmldoc-&gt;create_element( &apos;smartform&apos; ).

      xml_xtable2 = xml_xtable[].

      sourcestring = buildsourcestring( sourcetable = xml_xtable2[] ).

      rc = sourcenode-&gt;if_ixml_node~set_value( sourcestring ).
      rc = rootnode-&gt;append_child( sourcenode ).
      rc = xmldoc-&gt;append_child( rootnode ).
      ixmldocument = xmldoc.

      FREE: xml_document, xml_xtable[], xml_document_size.


    CATCH cx_ssf_fb .
      CLEAR ixmldocument.
      RAISE EXCEPTION TYPE zcx_saplink
        EXPORTING textid = zcx_saplink=&gt;not_found.
  ENDTRY.

ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZSAPLINK" CMPNAME="CREATEOBJECTFROMIXMLDOC" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/

METHOD createobjectfromixmldoc .
  TYPES: t_raw(250)     TYPE x.

  DATA rootnode         TYPE REF TO if_ixml_element.
  DATA progattribs      TYPE trdir.
  DATA sourcenode       TYPE REF TO if_ixml_element.
  DATA l_xml_node       TYPE REF TO if_ixml_element.
  DATA source           TYPE string.
  DATA sourcetable      TYPE table_of_strings.
  DATA _objtype         TYPE string.
  DATA checkexists      TYPE flag.

  DATA: wa_stxfadm      TYPE stxfadm,
        formname        TYPE tdsfname,
        master_language TYPE sylangu,
        lv_devclass     TYPE devclass,
        korrnum         TYPE trkorr,
        modif_language  TYPE sylangu.

  DATA: g_ixml               TYPE REF TO if_ixml,
        xml_macro_rc         TYPE i,
        xml_document         TYPE REF TO if_ixml_document,
        l_element            TYPE REF TO if_ixml_element,
        xml_ns_prefix_sf     TYPE string,
        xml_ns_uri_sf        TYPE string,
        xml_ns_uri_ifr       TYPE string,
        xml_document_size    TYPE i,
        xml_xtable           TYPE TABLE OF t_raw,
        l_ns_uri             TYPE string,
        l_name               TYPE string,
        l_language           TYPE string,
        p_dequeue            TYPE tdbool,
        l_cancel             TYPE tdsfflag,
        sf_exception         TYPE REF TO cx_ssf_fb.

  DATA: ref_ssf TYPE REF TO cl_ssf_fb_smart_form,
        l_upload_smartform TYPE REF TO cl_ssf_fb_smart_form.


  _objtype = getobjecttype( ).
  xmldoc = ixmldocument.
  rootnode = xmldoc-&gt;find_from_name( _objtype ).
  CALL METHOD getstructurefromattributes
    EXPORTING
      node      = rootnode
    CHANGING
      structure = wa_stxfadm.
  objname = wa_stxfadm-formname.

  checkexists = checkexists( ).
  IF checkexists IS NOT INITIAL.
    IF overwrite IS INITIAL.
      RAISE EXCEPTION TYPE zcx_saplink
        EXPORTING textid = zcx_saplink=&gt;existing.
    ELSE.
*     delete object for new install
      deleteobject( ).
    ENDIF.
  ENDIF.

  sourcenode = rootnode-&gt;find_from_name( &apos;smartform&apos; ).
  source = sourcenode-&gt;get_value( ).
  sourcetable = buildtablefromstring( source ).

  xml_xtable = sourcetable.
  xml_document_size = STRLEN( source ).

  CREATE OBJECT ref_ssf.

  formname = objname.

* Check access permission and enqueue smart form
  master_language = sy-langu.
  TRY.
      CALL METHOD ref_ssf-&gt;enqueue
        EXPORTING
          suppress_corr_check   = space
          language_upd_exit     = &apos; &apos;
          master_language       = master_language
          mode                  = &apos;INSERT&apos;
          formname              = formname
        IMPORTING
          devclass              = lv_devclass
          new_master_language   = master_language
          korrnum               = korrnum
          modification_language = modif_language.
    CATCH cx_ssf_fb INTO sf_exception.
      CASE sf_exception-&gt;textid.
        WHEN cx_ssf_fb=&gt;enqueued_by_user OR cx_ssf_fb=&gt;enqueue_system_failure.
          RAISE EXCEPTION TYPE zcx_saplink
               EXPORTING msg = &apos;Enqueued by user&apos;.
        WHEN cx_ssf_fb=&gt;no_modify_permission OR cx_ssf_fb=&gt;no_show_permission.
          RAISE EXCEPTION TYPE zcx_saplink
               EXPORTING msg = &apos;Permission Error&apos;.
        WHEN cx_ssf_fb=&gt;permission_failure.
          EXIT.
        WHEN cx_ssf_fb=&gt;request_language_denied.
          RAISE EXCEPTION TYPE zcx_saplink
               EXPORTING msg = &apos;Language request denied&apos;.
        WHEN OTHERS.
          EXIT.
      ENDCASE.
  ENDTRY.

  CALL FUNCTION &apos;SDIXML_XML_TO_DOM&apos;
    EXPORTING
      xml      = xml_xtable[]
      size     = xml_document_size
    IMPORTING
      document = xml_document
    EXCEPTIONS
      OTHERS   = 1.

  l_xml_node  = xml_document-&gt;get_root_element( ).
  l_ns_uri    = l_xml_node-&gt;get_namespace_uri( ).
  l_name      = l_xml_node-&gt;get_name( ).
  l_element  ?= l_xml_node-&gt;query_interface( ixml_iid_element ).
  l_language  = l_element-&gt;get_attribute( name = &apos;language&apos;
                                          namespace = xml_ns_prefix_sf ).

  CREATE OBJECT l_upload_smartform.
  CALL METHOD l_upload_smartform-&gt;xml_upload
    EXPORTING
      dom      = l_xml_node
      formname = formname
      language = master_language
    CHANGING
      sform    = ref_ssf.
  ref_ssf = l_upload_smartform.

  PERFORM save_form IN PROGRAM saplstxb
              USING
                 &apos; &apos; &apos;X&apos;
              CHANGING
                 ref_ssf
                 l_cancel.

  FREE: xml_document.

* dequeue form
  ref_ssf-&gt;dequeue( formname = formname ).

* successful install
  name = objname.

ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZSAPLINK" CMPNAME="DELETEOBJECT" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/
METHOD deleteobject .
    CALL FUNCTION &apos;FB_DELETE_FORM&apos;
     EXPORTING
       I_FORMNAME                  = OBJNAME
*       I_FORMTYPE                  = &apos; &apos;
*       I_WITH_DIALOG               = &apos;X&apos;
*       I_WITH_CONFIRM_DIALOG       = &apos;X&apos;
*     IMPORTING
*       O_FORMNAME                  =
     EXCEPTIONS
       NO_NAME                     = 1
       NO_FORM                     = 2
       FORM_LOCKED                 = 3
       NO_ACCESS_PERMISSION        = 4
       ILLEGAL_LANGUAGE            = 5
       ILLEGAL_FORMTYPE            = 6
       OTHERS                      = 7
              .
    IF sy-subrc &lt;&gt; 0.

    ENDIF.

  ENDMETHOD.                    &quot;createobjectfromixmldoc</source>
  </method>
  <method CLSNAME="ZSAPLINK" CMPNAME="GETOBJECTTYPE" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/
method GETOBJECTTYPE .
  objectType = &apos;SSFO&apos;. &quot;SAP Smartforms
endmethod.</source>
  </method>
 </CLAS>
 <CLAS CLSNAME="ZSAPLINK_TABLE_CONTENTS" VERSION="1" LANGU="E" DESCRIPT="SAPlink - Table Contents" CATEGORY="00" EXPOSURE="2" STATE="1" RELEASE="0" CLSFINAL="X" CLSCCINCL="X" FIXPT="X" UNICODE="X" CLSBCCAT="00" DURATION_TYPE="0 " RISK_LEVEL="0 " REFCLSNAME="ZSAPLINK">
  <localImplementation>*&quot;* local class implementation for public class
*&quot;* use this source file for the implementation part of
*&quot;* local helper classes</localImplementation>
  <localTypes>*&quot;* use this source file for any type declarations (class
*&quot;* definitions, interfaces or data types) you need for method
*&quot;* implementation or private method&apos;s signature</localTypes>
  <localMacros>*&quot;* use this source file for any macro definitions you need
*&quot;* in the implementation part of the class</localMacros>
  <inheritance CLSNAME="ZSAPLINK_TABLE_CONTENTS" REFCLSNAME="ZSAPLINK" VERSION="1" STATE="1">
   <redefinition CLSNAME="ZSAPLINK_TABLE_CONTENTS" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="CHECKEXISTS" EXPOSURE="2"/>
   <redefinition CLSNAME="ZSAPLINK_TABLE_CONTENTS" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="CREATEIXMLDOCFROMOBJECT" EXPOSURE="2"/>
   <redefinition CLSNAME="ZSAPLINK_TABLE_CONTENTS" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="CREATEOBJECTFROMIXMLDOC" EXPOSURE="2"/>
   <redefinition CLSNAME="ZSAPLINK_TABLE_CONTENTS" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="DELETEOBJECT" EXPOSURE="1"/>
   <redefinition CLSNAME="ZSAPLINK_TABLE_CONTENTS" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="GETOBJECTTYPE" EXPOSURE="1"/>
  </inheritance>
  <method CLSNAME="ZSAPLINK" CMPNAME="CHECKEXISTS" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/
METHOD checkexists.

*      Plugin created by:
*      Rich Heilman
*      rich.heilman.jr@gmail.com

* No implementation

ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZSAPLINK" CMPNAME="CREATEIXMLDOCFROMOBJECT" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/
METHOD createixmldocfromobject.

*      Plugin created by:
*      Rich Heilman
*      rich.heilman.jr@gmail.com

  TYPES: BEGIN OF ttabname,
          tabname TYPE dd02v-tabname,
         END OF ttabname.

  DATA xtabname     TYPE ttabname.
  DATA xdd02v       TYPE dd02v.

  DATA root_node    TYPE REF TO if_ixml_element.
  DATA datarow_node TYPE REF TO if_ixml_element.
  DATA rc           TYPE sysubrc.
  DATA _tablname    TYPE ddobjname.
  DATA _objtype     TYPE string.

  DATA dref_tab TYPE REF TO data.
  DATA dref_wa  TYPE REF TO data.

  FIELD-SYMBOLS: &lt;dyn_tab&gt; TYPE table.
  FIELD-SYMBOLS: &lt;dyn_wa&gt;  TYPE ANY.

* Check that table exits.
  _tablname = objname.

* Does the table exist?
  CALL FUNCTION &apos;DDIF_TABL_GET&apos;
    EXPORTING
      name          = _tablname
    IMPORTING
      dd02v_wa      = xdd02v
    EXCEPTIONS
      illegal_input = 1
      OTHERS        = 2.
  IF sy-subrc &lt;&gt; 0 OR xdd02v-tabname IS INITIAL.
    RAISE EXCEPTION TYPE zcx_saplink
      EXPORTING textid = zcx_saplink=&gt;error_message
                msg    = `Table not found`.
  ENDIF.

* Create parent node
  _objtype  = getobjecttype( ).
  root_node = xmldoc-&gt;create_element( _objtype ).
  xtabname-tabname = xdd02v-tabname.
  me-&gt;setattributesfromstructure( node = root_node structure = xtabname  ).

* Create dynamic internal table and work area
  CREATE DATA dref_tab TYPE TABLE OF (xdd02v-tabname).
  ASSIGN dref_tab-&gt;* TO &lt;dyn_tab&gt;.
  CREATE DATA dref_wa LIKE LINE OF &lt;dyn_tab&gt;.
  ASSIGN dref_wa-&gt;* TO &lt;dyn_wa&gt;.

* Select all data
  SELECT * INTO TABLE &lt;dyn_tab&gt; FROM (xdd02v-tabname).

* Write records to XML node
  LOOP AT &lt;dyn_tab&gt; ASSIGNING &lt;dyn_wa&gt;.
    datarow_node = xmldoc-&gt;create_element( `DataRow` ).
    me-&gt;setattributesfromstructure( node = datarow_node structure = &lt;dyn_wa&gt; ).
    rc = root_node-&gt;append_child( datarow_node ).
  ENDLOOP.

* Add node
  rc = xmldoc-&gt;append_child( root_node ).
  ixmldocument = xmldoc.

ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZSAPLINK" CMPNAME="CREATEOBJECTFROMIXMLDOC" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/
METHOD createobjectfromixmldoc.

*      Plugin created by:
*      Rich Heilman
*      rich.heilman.jr@gmail.com

  TYPES: BEGIN OF ttabname,
          tabname TYPE dd02v-tabname,
         END OF ttabname.

  DATA xtabname    TYPE ttabname.
  DATA xdd02v      TYPE dd02v.
  DATA xtadir      TYPE tadir.

  DATA idd03p TYPE TABLE OF dd03p.
  DATA xdd03p LIKE LINE OF idd03p.

  DATA root_node        TYPE REF TO if_ixml_element.
  DATA datarow_node     TYPE REF TO if_ixml_element.
  DATA datarow_filter   TYPE REF TO if_ixml_node_filter.
  DATA datarow_iterator TYPE REF TO if_ixml_node_iterator.

  DATA _objtype           TYPE string.
  DATA l_answer           TYPE string.
  DATA l_nameclass        TYPE c.
  DATA l_client_dependent TYPE abap_bool.

  DATA dref_tab TYPE REF TO data.
  DATA dref_wa  TYPE REF TO data.

  FIELD-SYMBOLS: &lt;dyn_tab&gt;  TYPE table.
  FIELD-SYMBOLS: &lt;dyn_wa&gt;   TYPE ANY.
  FIELD-SYMBOLS: &lt;fs_mandt&gt; TYPE ANY.

  _objtype = getobjecttype( ).

  xmldoc = ixmldocument.
  root_node = xmldoc-&gt;find_from_name( _objtype ).

* Get table name from XML.
  me-&gt;getstructurefromattributes(
          EXPORTING  node      = root_node
          CHANGING   structure = xtabname ).

  objname = xtabname-tabname.

* Check that table exists
  CALL FUNCTION &apos;DDIF_TABL_GET&apos;
    EXPORTING
      name          = xtabname-tabname
    IMPORTING
      dd02v_wa      = xdd02v
    TABLES
      dd03p_tab     = idd03p
    EXCEPTIONS
      illegal_input = 1
      OTHERS        = 2.
  IF sy-subrc &lt;&gt; 0 OR xdd02v-tabname IS INITIAL.
    RAISE EXCEPTION TYPE zcx_saplink
      EXPORTING textid = zcx_saplink=&gt;error_message
                msg    = `Table not found`.
  ENDIF.

* Check for MANDT field, if found, then set client dependent
  READ TABLE idd03p INTO xdd03p WITH KEY fieldname = &apos;MANDT&apos;.
  IF sy-subrc = 0.
    l_client_dependent = abap_true.
  ENDIF.

* Only allow tables in customer namespace
  CLEAR xtadir.
  SELECT SINGLE * FROM tadir INTO xtadir
              WHERE pgmid    = &apos;R3TR&apos;
                AND object   = &apos;TABL&apos;
                AND obj_name = xdd02v-tabname.
  CALL FUNCTION &apos;TRINT_OBJECT_NAMESPACE_INFO&apos;
    EXPORTING
      iv_pgmid               = xtadir-pgmid
      iv_object              = xtadir-object
      iv_objname             = xtadir-obj_name
    IMPORTING
      ev_nameclass           = l_nameclass
    EXCEPTIONS
      namespace_not_existing = 1
      namespace_use_rejected = 2
      invalid_object         = 3
      OTHERS                 = 4.
  IF l_nameclass &lt;&gt; `C`.
    RAISE EXCEPTION TYPE zcx_saplink
      EXPORTING textid = zcx_saplink=&gt;error_message
                msg    = &apos;Table is not within customer namespace&apos;.
  ENDIF.

* Create dynamic internal table and work area
  CREATE DATA dref_tab TYPE TABLE OF (xdd02v-tabname).
  ASSIGN dref_tab-&gt;* TO &lt;dyn_tab&gt;.
  CREATE DATA dref_wa LIKE LINE OF &lt;dyn_tab&gt;.
  ASSIGN dref_wa-&gt;* TO &lt;dyn_wa&gt;.

* Build dynamic internal table from XML
  FREE: datarow_filter, datarow_iterator, datarow_node.
  datarow_filter = xmldoc-&gt;create_filter_name( `DataRow` ).
  datarow_iterator = xmldoc-&gt;create_iterator_filtered( datarow_filter ).
  datarow_node ?= datarow_iterator-&gt;get_next( ).
  WHILE datarow_node IS NOT INITIAL.
    APPEND INITIAL LINE TO &lt;dyn_tab&gt; ASSIGNING &lt;dyn_wa&gt;.
    me-&gt;getstructurefromattributes(
            EXPORTING   node      = datarow_node
            CHANGING    structure = &lt;dyn_wa&gt; ).
    datarow_node ?= datarow_iterator-&gt;get_next( ).
  ENDWHILE.

* Any records imported from XML, if not, give error.
  IF LINES( &lt;dyn_tab&gt; ) = 0.
    RAISE EXCEPTION TYPE zcx_saplink
        EXPORTING textid = zcx_saplink=&gt;error_message
                  msg    = `No data records present in XML document`.
  ENDIF.

* Change MANDT field to current client number
* Always add imported records to current client number
  IF l_client_dependent = abap_true.
    LOOP AT &lt;dyn_tab&gt; ASSIGNING &lt;dyn_wa&gt;.
      ASSIGN COMPONENT `MANDT` OF STRUCTURE &lt;dyn_wa&gt; TO &lt;fs_mandt&gt;.
      &lt;fs_mandt&gt; = sy-mandt.
    ENDLOOP.
  ENDIF.

* Check that db table is initial, if so, then insert data and exit
  DATA: l_count TYPE i.
  CASE l_client_dependent .
    WHEN abap_true.
      SELECT COUNT( * )  INTO l_count
             FROM (xdd02v-tabname) CLIENT SPECIFIED
                     WHERE mandt = sy-mandt.
    WHEN abap_false.
      SELECT COUNT( * )  INTO l_count
             FROM (xdd02v-tabname).
  ENDCASE.
  IF l_count = 0.
    INSERT (xdd02v-tabname) FROM TABLE &lt;dyn_tab&gt;.
    name = objname.
    RETURN.
  ENDIF.

* Still here, then ask user how he wants to handle the existing
* data, either modify it, of delete/insert
  DATA: text_question TYPE string.

  text_question = `Table contains data which may be modified, ` &amp;
                  `would you like to modify existing records, ` &amp;
                  `or delete existing data first and insert`.

  CALL FUNCTION &apos;POPUP_TO_CONFIRM&apos;
    EXPORTING
      text_question  = text_question
      text_button_1  = &apos;Modify Data&apos;      &quot; UPdate table via MODIFY
      icon_button_1  = &apos;ICON_CHANGE&apos;
      text_button_2  = &apos;Del/Ins Data&apos;     &quot; Delete data first, then INSERT
      icon_button_2  = &apos;ICON_DELETE&apos;
    IMPORTING
      answer         = l_answer
    EXCEPTIONS
      text_not_found = 1
      OTHERS         = 2.
* Check answer
  CASE l_answer .
    WHEN  &apos;1&apos;.   &quot;Modify existing rows, insert new rows based on key
      MODIFY (xdd02v-tabname) FROM TABLE &lt;dyn_tab&gt;.
    WHEN  &apos;2&apos;.   &quot;Delete existing data first, then insert new data
      CASE l_client_dependent .
        WHEN abap_true.
          DELETE FROM (xdd02v-tabname) WHERE mandt = sy-mandt.
        WHEN abap_false.
          DELETE FROM (xdd02v-tabname).
      ENDCASE.
      INSERT (xdd02v-tabname) FROM TABLE &lt;dyn_tab&gt;.
    WHEN  &apos;A&apos;.   &quot;Action has been cancelled
      RAISE EXCEPTION TYPE zcx_saplink
      EXPORTING textid = zcx_saplink=&gt;error_message
                msg    = `Action Cancelled`.
  ENDCASE.

  name = objname.

ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZSAPLINK" CMPNAME="DELETEOBJECT" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/
method DELETEOBJECT.

*      Plugin created by:
*      Rich Heilman
*      rich.heilman.jr@gmail.com

* No implementation

endmethod.</source>
  </method>
  <method CLSNAME="ZSAPLINK" CMPNAME="GETOBJECTTYPE" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/
method GETOBJECTTYPE.

*      Plugin created by:
*      Rich Heilman
*      rich.heilman.jr@gmail.com

  objecttype = &apos;TABU&apos;.  &quot;Table Contents

endmethod.</source>
  </method>
 </CLAS>
 <CLAS CLSNAME="ZSAPLINK_WD_APPLICATION" VERSION="1" LANGU="E" DESCRIPT="SAPlink - Web Dynpro ABAP Application" CATEGORY="00" EXPOSURE="2" STATE="1" RELEASE="0" CLSFINAL="X" CLSCCINCL="X" FIXPT="X" UNICODE="X" CLSBCCAT="00" DURATION_TYPE="0 " RISK_LEVEL="0 " REFCLSNAME="ZSAPLINK">
  <localImplementation>*&quot;* local class implementation for public class
*&quot;* use this source file for the implementation part of
*&quot;* local helper classes</localImplementation>
  <localTypes>*&quot;* use this source file for any type declarations (class
*&quot;* definitions, interfaces or data types) you need for method
*&quot;* implementation or private method&apos;s signature</localTypes>
  <localMacros>*&quot;* use this source file for any macro definitions you need
*&quot;* in the implementation part of the class</localMacros>
  <typeUsage CLSNAME="ZSAPLINK_WD_APPLICATION" TYPEGROUP="WDYN" VERSION="1" TPUTYPE="0" EXPLICIT="X"/>
  <typeUsage CLSNAME="ZSAPLINK_WD_APPLICATION" TYPEGROUP="WDYWB" VERSION="1" TPUTYPE="0" EXPLICIT="X"/>
  <forwardDeclaration>WDYN</forwardDeclaration>
  <forwardDeclaration>WDYWB</forwardDeclaration>
  <inheritance CLSNAME="ZSAPLINK_WD_APPLICATION" REFCLSNAME="ZSAPLINK" VERSION="1" STATE="1">
   <redefinition CLSNAME="ZSAPLINK_WD_APPLICATION" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="CHECKEXISTS" EXPOSURE="2"/>
   <redefinition CLSNAME="ZSAPLINK_WD_APPLICATION" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="CREATEIXMLDOCFROMOBJECT" EXPOSURE="2"/>
   <redefinition CLSNAME="ZSAPLINK_WD_APPLICATION" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="CREATEOBJECTFROMIXMLDOC" EXPOSURE="2"/>
   <redefinition CLSNAME="ZSAPLINK_WD_APPLICATION" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="DELETEOBJECT" EXPOSURE="1"/>
   <redefinition CLSNAME="ZSAPLINK_WD_APPLICATION" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="GETOBJECTTYPE" EXPOSURE="1"/>
  </inheritance>
  <method CLSNAME="ZSAPLINK" CMPNAME="CHECKEXISTS" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>method CHECKEXISTS.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/



  exists = abap_true.

  DATA: application_name TYPE wdy_application_name.
  data: application type wdy_application.
  application_name = objname.
  TRANSLATE application_name TO UPPER CASE.

  SELECT SINGLE * FROM wdy_application INTO application
    WHERE application_name = application_name.
  IF sy-subrc NE 0.
    CLEAR exists.
  ENDIF.


endmethod.</source>
  </method>
  <method CLSNAME="ZSAPLINK_WD_APPLICATION" CMPNAME="CONSTRUCTOR" VERSION="1" LANGU="E" DESCRIPT="CONSTRUCTOR" EXPOSURE="2" STATE="1" EDITORDER="1 " DISPID="0 " MTDTYPE="2" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZSAPLINK_WD_APPLICATION" CMPNAME="CONSTRUCTOR" SCONAME="NAME" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="2" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="STRING"/>
   <source>METHOD constructor.

  CALL METHOD super-&gt;constructor
    EXPORTING
      name = name.

  nugget_level = 99. &quot; WD Application should load last

ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZSAPLINK" CMPNAME="CREATEIXMLDOCFROMOBJECT" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>method CREATEIXMLDOCFROMOBJECT.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/


*xml nodes
  DATA rootnode   TYPE REF TO if_ixml_element.
  DATA help_desc_node          TYPE REF TO if_ixml_element.
  DATA wdy_applicationt_node   TYPE REF TO if_ixml_element.
  DATA wdy_app_prop_node       TYPE REF TO if_ixml_element.
  DATA rc         TYPE sysubrc.

  DATA: application TYPE REF TO if_wdy_md_application.
  TRY.
      application = me-&gt;get_application( ).
    CATCH cx_wdy_md_not_existing.
      RAISE EXCEPTION TYPE zcx_saplink EXPORTING textid = zcx_saplink=&gt;not_found.
      RETURN.
    CATCH cx_wdy_md_permission_failure.
      RAISE EXCEPTION TYPE zcx_saplink EXPORTING textid = zcx_saplink=&gt;not_found.
      RETURN.
  ENDTRY.

  DATA definition TYPE wdy_application.

  application-&gt;if_wdy_md_object~get_definition(
     IMPORTING
       definition = definition ).

* Create parent node
  DATA _objtype TYPE string.
  _objtype = getobjecttype( ).
  rootnode = xmldoc-&gt;create_element( _objtype ).
  setattributesfromstructure( node = rootnode structure = definition ).

  DATA help_desc TYPE wdy_md_translatable_text.
  help_desc = application-&gt;get_help_description( ).
  rc = rootnode-&gt;set_attribute( name = &apos;help_desc_txt&apos; value = help_desc ).


* copy wdy_applicationt
  DATA wdy_applicationt_table TYPE STANDARD TABLE OF wdy_applicationt.
  FIELD-SYMBOLS: &lt;wdy_applicationt&gt; TYPE wdy_applicationt.
  SELECT * FROM wdy_applicationt INTO TABLE wdy_applicationt_table
    WHERE application_name = definition-application_name.
  LOOP AT wdy_applicationt_table ASSIGNING &lt;wdy_applicationt&gt;.
    wdy_applicationt_node = xmldoc-&gt;create_element( &apos;wdy_applicationt&apos; ).
    setattributesfromstructure( node = wdy_applicationt_node structure = &lt;wdy_applicationt&gt; ).
    rc = rootnode-&gt;append_child( wdy_applicationt_node ).
  ENDLOOP.

* Application Properties
  DATA itab_wdy_app_property TYPE wdy_app_property_table.
  DATA prop TYPE REF TO if_wdy_md_application_property.
  FIELD-SYMBOLS: &lt;wdy_app_prop&gt; TYPE wdy_app_property.
  SELECT * FROM wdy_app_property INTO TABLE itab_wdy_app_property
      WHERE application_name = definition-application_name.
  LOOP AT itab_wdy_app_property ASSIGNING &lt;wdy_app_prop&gt;.
    wdy_app_prop_node = xmldoc-&gt;create_element( &apos;wdy_app_prop&apos; ).
    setattributesfromstructure( node = wdy_app_prop_node structure = &lt;wdy_app_prop&gt; ).
    rc = rootnode-&gt;append_child( wdy_app_prop_node ).
  ENDLOOP.

*\--------------------------------------------------------------------/
  rc = xmldoc-&gt;append_child( rootnode ).
  ixmldocument = xmldoc.
endmethod.</source>
  </method>
  <method CLSNAME="ZSAPLINK" CMPNAME="CREATEOBJECTFROMIXMLDOC" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>method CREATEOBJECTFROMIXMLDOC.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/
*
*
*xml nodes
  DATA rootnode   TYPE REF TO if_ixml_element.
*  DATA wdy_application TYPE wdy_application.
  DATA wdy_applicationt_node   TYPE REF TO if_ixml_element.
  DATA wdy_app_prop_node       TYPE REF TO if_ixml_element.
  DATA node        TYPE REF TO if_ixml_element.
  DATA filter      TYPE REF TO if_ixml_node_filter.
  DATA iterator    TYPE REF TO if_ixml_node_iterator.
  DATA rc          TYPE sysubrc.
  DATA _devclass   TYPE devclass.
  DATA checkexists TYPE flag.
  DATA _objtype    TYPE string.
  DATA definition  TYPE wdy_application.

  DATA: application TYPE REF TO if_wdy_md_application.

  _devclass = devclass.
  _objtype = getobjecttype( ).

  xmldoc = ixmldocument.
  rootnode = xmldoc-&gt;find_from_name( _objtype ).

  CALL METHOD getstructurefromattributes
    EXPORTING
      node            = rootnode
      preserveversion = abap_true
    CHANGING
      structure       = definition.

  objname = definition-application_name.
  DATA help_desc TYPE wdy_md_translatable_text.
  help_desc = rootnode-&gt;get_attribute( &apos;help_desc_txt&apos; ).

  checkexists = checkexists( ).
  IF checkexists IS NOT INITIAL.
    IF overwrite IS INITIAL.
      RAISE EXCEPTION TYPE zcx_saplink
        EXPORTING textid = zcx_saplink=&gt;existing.
    ELSE.
*     delete object for new install
      deleteobject( ).
    ENDIF.
  ENDIF.

  application =  cl_wdy_md_application=&gt;create(
  name = definition-application_name
  devclass = _devclass ).

* copy relevant parts of wdy_application
  DATA component TYPE REF TO if_wdy_md_component.
  CALL METHOD cl_wdy_md_component=&gt;get_object_by_key
    EXPORTING
      name      = definition-component
    RECEIVING
      component = component.
  application-&gt;set_component( component ).


  application-&gt;set_help_description( help_desc ).
  application-&gt;set_help_link( definition-help_link ).
  application-&gt;set_message_display_mode( definition-msg_disp_mode ).
  DATA startup_plug TYPE REF TO if_wdy_md_inbound_plug.
  DATA startup_view TYPE REF TO if_wdy_md_abstract_view.
  startup_view = cl_wdy_md_view=&gt;get_object_by_key(
      component_name = definition-component
      view_name      = definition-startup_view  ).
  startup_plug = startup_view-&gt;get_inbound_plug( definition-startup_plug ).
  application-&gt;set_startup_plug( startup_plug ).

  application-&gt;save_to_database( ).


  application-&gt;unlock( ).
  application-&gt;reload( ).

* copy wdy_applicationt
  DATA wdy_applicationt_table TYPE STANDARD TABLE OF wdy_applicationt.
  DATA wdy_applicationt TYPE wdy_applicationt.
  FREE: filter, iterator, node.
  filter = xmldoc-&gt;create_filter_name( &apos;wdy_applicationt&apos; ).
  iterator = xmldoc-&gt;create_iterator_filtered( filter ).
  node ?= iterator-&gt;get_next( ).
  WHILE node IS NOT INITIAL.
    CALL METHOD getstructurefromattributes
      EXPORTING
        node            = node
        preserveversion = abap_true
      CHANGING
        structure       = wdy_applicationt.
    APPEND wdy_applicationt TO wdy_applicationt_table.
    node ?= iterator-&gt;get_next( ).
  ENDWHILE.
  MODIFY wdy_applicationt FROM TABLE wdy_applicationt_table.

* copy wdy_app_property
  DATA wdy_app_property_table TYPE STANDARD TABLE OF wdy_app_property.
  DATA wdy_app_property TYPE wdy_app_property.
  FREE: filter, iterator, node.
  filter = xmldoc-&gt;create_filter_name( &apos;wdy_app_prop&apos; ).
  iterator = xmldoc-&gt;create_iterator_filtered( filter ).
  node ?= iterator-&gt;get_next( ).
  WHILE node IS NOT INITIAL.
    CALL METHOD getstructurefromattributes
      EXPORTING
        node            = node
        preserveversion = abap_true
      CHANGING
        structure       = wdy_app_property.
    APPEND wdy_app_property TO wdy_app_property_table.
    node ?= iterator-&gt;get_next( ).
  ENDWHILE.
  MODIFY wdy_app_property FROM TABLE wdy_app_property_table.

  cl_wdy_md_application=&gt;generate_sicf(
    EXPORTING
      p_applname            = definition-display_name
      p_devclass            = _devclass
    EXCEPTIONS
      invalid_name          = 1
      parent_not_existing   = 2
      enqueue_error         = 3
      node_already_existing = 4
      transport_error       = 5
      tadir_error           = 6
      package_not_found     = 7
      alternate_name_exist  = 8
      error_occured         = 9 ).
  IF sy-subrc &lt;&gt; 0.
  ENDIF.


  COMMIT WORK.
  name = objname.
endmethod.</source>
  </method>
  <method CLSNAME="ZSAPLINK" CMPNAME="DELETEOBJECT" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>method DELETEOBJECT.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/

  DATA: application TYPE REF TO if_wdy_md_application.
  TRY.
      DATA: application_name TYPE wdy_application_name.
      application_name = objname.
      TRANSLATE application_name TO UPPER CASE.
      application = me-&gt;get_application( ).
    CATCH cx_wdy_md_not_existing.
      RAISE EXCEPTION TYPE zcx_saplink EXPORTING textid = zcx_saplink=&gt;not_found.
      RETURN.
    CATCH cx_wdy_md_permission_failure.
      RAISE EXCEPTION TYPE zcx_saplink EXPORTING textid = zcx_saplink=&gt;not_found.
      RETURN.
  ENDTRY.

  application-&gt;if_wdy_md_lockable_object~lock( ).
  application-&gt;if_wdy_md_object~delete( ).
*  cl_wdy_md_application=&gt;delete_sicf( p_applname = application_name  ).
  application-&gt;if_wdy_md_lockable_object~save_to_database( ).
  application-&gt;if_wdy_md_lockable_object~unlock( ).
endmethod.</source>
  </method>
  <method CLSNAME="ZSAPLINK" CMPNAME="GETOBJECTTYPE" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>method GETOBJECTTYPE.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/


  objecttype = wdyn_r3tr_application.  &quot;Web Dynpro Application

endmethod.</source>
  </method>
  <method CLSNAME="ZSAPLINK_WD_APPLICATION" CMPNAME="GET_APPLICATION" VERSION="1" LANGU="E" DESCRIPT="Get Application Object" EXPOSURE="0" STATE="1" EDITORDER="2 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" MTDNEWEXC="X" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZSAPLINK_WD_APPLICATION" CMPNAME="GET_APPLICATION" SCONAME="APPLICATION" VERSION="1" LANGU="E" DESCRIPT="Web Dynpro: Application" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="3" TYPE="IF_WDY_MD_APPLICATION"/>
   <exception CLSNAME="ZSAPLINK_WD_APPLICATION" CMPNAME="GET_APPLICATION" SCONAME="CX_WDY_MD_NOT_EXISTING" VERSION="1" LANGU="E" DESCRIPT="Web Dynpro : Objekt existiert nicht" MTDTYPE="0" EDITORDER="1 "/>
   <exception CLSNAME="ZSAPLINK_WD_APPLICATION" CMPNAME="GET_APPLICATION" SCONAME="CX_WDY_MD_PERMISSION_FAILURE" VERSION="1" LANGU="E" MTDTYPE="0" EDITORDER="2 "/>
   <source>method GET_APPLICATION.

  DATA: application_name TYPE wdy_application_name.
  application_name = objname.
  TRANSLATE application_name TO UPPER CASE.

  DATA: tr_objtype     TYPE trobjtype,
         inactive_vers  TYPE char1,
         working_item   TYPE char1,
         l_obj_key      TYPE e071-obj_name.
  DATA: version TYPE r3state.

  CALL FUNCTION &apos;RS_WORKING_AREA_INIT&apos;.

  tr_objtype = wdyn_r3tr_application.
  l_obj_key = application_name.
  TRANSLATE l_obj_key TO UPPER CASE.                      &quot;#EC SYNTCHAR
  CALL FUNCTION &apos;RS_OBJECT_IN_WORKING_AREA&apos;
    EXPORTING
      object                        = tr_objtype
      obj_name                      = l_obj_key
*     GLOBAL_CHECK                  = &apos; &apos;
      mode                          = &apos;S&apos; &quot;Display
    IMPORTING
      object_is_work_item           = working_item
      object_inactive_version       = inactive_vers.


  IF working_item IS INITIAL.
    version = wdywb_version_active.
  ELSE.
    version = wdywb_version_inactive.
  ENDIF.

  TRY.
      CALL METHOD cl_wdy_md_application=&gt;get_object_by_key
        EXPORTING
          name        = application_name
          version     = version
        RECEIVING
          application = application.
    CATCH cx_wdy_md_not_existing.
      IF version = wdywb_version_active.
        version     = wdywb_version_inactive.
      ELSE.
        version      = wdywb_version_active.
      ENDIF.
      TRY.
        CALL METHOD cl_wdy_md_application=&gt;get_object_by_key
          EXPORTING
            name        = application_name
            version     = version
          RECEIVING
            application = application.
      ENDTRY.
  ENDTRY.
endmethod.</source>
  </method>
 </CLAS>
 <CLAS CLSNAME="ZSAPLINK_WD_COMPONENT" VERSION="1" LANGU="E" DESCRIPT="SAPlink - Web Dynpro ABAP Component" CATEGORY="00" EXPOSURE="2" STATE="1" RELEASE="0" CLSFINAL="X" CLSCCINCL="X" FIXPT="X" UNICODE="X" CLSBCCAT="00" DURATION_TYPE="0 " RISK_LEVEL="0 " REFCLSNAME="ZSAPLINK">
  <localImplementation>*&quot;* local class implementation for public class
*&quot;* use this source file for the implementation part of
*&quot;* local helper classes</localImplementation>
  <localTypes>*&quot;* use this source file for any type declarations (class
*&quot;* definitions, interfaces or data types) you need for method
*&quot;* implementation or private method&apos;s signature</localTypes>
  <localMacros>*&quot;* use this source file for any macro definitions you need
*&quot;* in the implementation part of the class</localMacros>
  <typeUsage CLSNAME="ZSAPLINK_WD_COMPONENT" TYPEGROUP="WDYN" VERSION="1" TPUTYPE="0" EXPLICIT="X"/>
  <typeUsage CLSNAME="ZSAPLINK_WD_COMPONENT" TYPEGROUP="WDYWB" VERSION="1" TPUTYPE="0" EXPLICIT="X"/>
  <forwardDeclaration>WDYN</forwardDeclaration>
  <forwardDeclaration>WDYWB</forwardDeclaration>
  <inheritance CLSNAME="ZSAPLINK_WD_COMPONENT" REFCLSNAME="ZSAPLINK" VERSION="1" STATE="1">
   <redefinition CLSNAME="ZSAPLINK_WD_COMPONENT" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="CHECKEXISTS" EXPOSURE="2"/>
   <redefinition CLSNAME="ZSAPLINK_WD_COMPONENT" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="CREATEIXMLDOCFROMOBJECT" EXPOSURE="2"/>
   <redefinition CLSNAME="ZSAPLINK_WD_COMPONENT" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="CREATEOBJECTFROMIXMLDOC" EXPOSURE="2"/>
   <redefinition CLSNAME="ZSAPLINK_WD_COMPONENT" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="DELETEOBJECT" EXPOSURE="1"/>
   <redefinition CLSNAME="ZSAPLINK_WD_COMPONENT" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="GETOBJECTTYPE" EXPOSURE="1"/>
  </inheritance>
  <method CLSNAME="ZSAPLINK" CMPNAME="CHECKEXISTS" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>method CHECKEXISTS.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/


  DATA: component TYPE REF TO if_wdy_md_component.
  exists = abap_true.
  TRY.
      component = me-&gt;get_component( ).
    CATCH cx_wdy_md_not_existing.
      CLEAR exists.
    CATCH cx_wdy_md_permission_failure.
      CLEAR exists.
  ENDTRY.



endmethod.</source>
  </method>
  <method CLSNAME="ZSAPLINK_WD_COMPONENT" CMPNAME="CONTROLLER_TO_XML" VERSION="1" LANGU="E" EXPOSURE="0" STATE="1" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZSAPLINK_WD_COMPONENT" CMPNAME="CONTROLLER_TO_XML" SCONAME="CONTROLLER" VERSION="1" LANGU="E" DESCRIPT="Web Dynpro: Controller" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="3" TYPE="IF_WDY_MD_CONTROLLER"/>
   <parameter CLSNAME="ZSAPLINK_WD_COMPONENT" CMPNAME="CONTROLLER_TO_XML" SCONAME="XML_NODE" VERSION="1" LANGU="E" DESCRIPT="IF_IXML_ELEMENT" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="3" TYPE="IF_IXML_ELEMENT"/>
   <source>method CONTROLLER_TO_XML.
  DATA definition TYPE wdy_controller.
  DATA rc TYPE i.
  DATA controller_definition_node    TYPE REF TO if_ixml_element.
  DATA wdy_controllert_node          TYPE REF TO if_ixml_element.
  DATA wdy_ctlr_compo_node           TYPE REF TO if_ixml_element.
  DATA wdy_ctlr_compot_node          TYPE REF TO if_ixml_element.
  DATA wdy_ctlr_param_node           TYPE REF TO if_ixml_element.
  DATA wdy_ctlr_paramt_node          TYPE REF TO if_ixml_element.
  DATA wdy_ctlr_usage_node           TYPE REF TO if_ixml_element.
  DATA wdy_ctx_node_node             TYPE REF TO if_ixml_element.
  DATA wdy_ctx_attrib_node           TYPE REF TO if_ixml_element.
  data wdy_ctx_mapping_node          type ref to if_ixml_element.



  controller-&gt;if_wdy_md_object~get_definition(
     IMPORTING
       definition = definition ).

* Create parent node
  DATA _objtype TYPE string.
  _objtype = definition-controller_name.

* Controller Definition
  controller_definition_node = xmldoc-&gt;create_element( &apos;controller_definition&apos; ).
  setattributesfromstructure( node = controller_definition_node structure = definition ).
  rc = xml_node-&gt;append_child( controller_definition_node ).

* copy wdy_controllert
  DATA wdy_controllert_table TYPE STANDARD TABLE OF wdy_controllert.
  FIELD-SYMBOLS: &lt;wdy_controllert&gt; TYPE wdy_controllert.
  SELECT * FROM wdy_controllert INTO TABLE wdy_controllert_table
    WHERE component_name = definition-component_name
      AND controller_name  = definition-controller_name.
  LOOP AT wdy_controllert_table ASSIGNING &lt;wdy_controllert&gt;.
    wdy_controllert_node = xmldoc-&gt;create_element( &apos;wdy_controllert&apos; ).
    setattributesfromstructure( node = wdy_controllert_node structure = &lt;wdy_controllert&gt; ).
    rc = controller_definition_node-&gt;append_child( wdy_controllert_node ).
  ENDLOOP.

* copy components
  DATA it_wdy_ctlr_compo TYPE STANDARD TABLE OF wdy_ctlr_compo.
  FIELD-SYMBOLS: &lt;wdy_ctlr_compo&gt; TYPE wdy_ctlr_compo.
  SELECT * FROM wdy_ctlr_compo INTO TABLE it_wdy_ctlr_compo
    WHERE component_name   = definition-component_name
      AND controller_name  = definition-controller_name.
  IF sy-subrc = 0.
    CASE definition-version.
      WHEN &apos;I&apos;.
        LOOP AT it_wdy_ctlr_compo ASSIGNING &lt;wdy_ctlr_compo&gt; WHERE version &lt;&gt; &apos;D&apos;.
          IF &lt;wdy_ctlr_compo&gt;-version = &apos;A&apos;.
            READ TABLE it_wdy_ctlr_compo TRANSPORTING NO FIELDS
              WITH KEY cmpname = &lt;wdy_ctlr_compo&gt;-cmpname
                       version = &apos;I&apos;.
            IF sy-subrc = 0.
              CONTINUE.
            ENDIF.
          ENDIF.
          &lt;wdy_ctlr_compo&gt;-version = if_wdy_md_object=&gt;co_version_inactive.
          wdy_ctlr_compo_node = xmldoc-&gt;create_element( &apos;wdy_ctlr_compo&apos; ).
          setattributesfromstructure( node = wdy_ctlr_compo_node structure = &lt;wdy_ctlr_compo&gt; ).
          rc = controller_definition_node-&gt;append_child( wdy_ctlr_compo_node ).
        ENDLOOP.
      WHEN &apos;A&apos;.
        LOOP AT it_wdy_ctlr_compo ASSIGNING &lt;wdy_ctlr_compo&gt; WHERE version = &apos;A&apos;.
          &lt;wdy_ctlr_compo&gt;-version = if_wdy_md_object=&gt;co_version_inactive.
          wdy_ctlr_compo_node = xmldoc-&gt;create_element( &apos;wdy_ctlr_compo&apos; ).
          setattributesfromstructure( node = wdy_ctlr_compo_node structure = &lt;wdy_ctlr_compo&gt; ).
          rc = controller_definition_node-&gt;append_child( wdy_ctlr_compo_node ).
        ENDLOOP.
    ENDCASE.
  ENDIF.

* copy wdy_ctlr_compot
  DATA wdy_ctlr_compot_table TYPE STANDARD TABLE OF wdy_ctlr_compot.
  FIELD-SYMBOLS: &lt;wdy_ctlr_compot&gt; TYPE wdy_ctlr_compot.
  SELECT * FROM wdy_ctlr_compot INTO TABLE wdy_ctlr_compot_table
    WHERE component_name = definition-component_name
      AND controller_name  = definition-controller_name.
  LOOP AT wdy_ctlr_compot_table ASSIGNING &lt;wdy_ctlr_compot&gt;.
    wdy_ctlr_compot_node = xmldoc-&gt;create_element( &apos;wdy_ctlr_compot&apos; ).
    setattributesfromstructure( node = wdy_ctlr_compot_node structure = &lt;wdy_ctlr_compot&gt; ).
    rc = controller_definition_node-&gt;append_child( wdy_ctlr_compot_node ).
  ENDLOOP.

* copy parameters
  DATA it_wdy_ctlr_param TYPE STANDARD TABLE OF wdy_ctlr_param.
  FIELD-SYMBOLS: &lt;wdy_ctlr_param&gt; TYPE wdy_ctlr_param.
  SELECT * FROM wdy_ctlr_param INTO TABLE it_wdy_ctlr_param
    WHERE component_name   = definition-component_name
      AND controller_name  = definition-controller_name.
  IF sy-subrc = 0.
    CASE definition-version.
      WHEN &apos;I&apos;.
        LOOP AT it_wdy_ctlr_param ASSIGNING &lt;wdy_ctlr_param&gt; WHERE version &lt;&gt; &apos;D&apos;.
          IF &lt;wdy_ctlr_param&gt;-version = &apos;A&apos;.
            READ TABLE it_wdy_ctlr_param TRANSPORTING NO FIELDS
              WITH KEY cmpname = &lt;wdy_ctlr_param&gt;-cmpname
                       parameter_name = &lt;wdy_ctlr_param&gt;-parameter_name
                       version = &apos;I&apos;.
            IF sy-subrc = 0.
              CONTINUE.
            ENDIF.
          ENDIF.
          &lt;wdy_ctlr_param&gt;-version = if_wdy_md_object=&gt;co_version_inactive.
          wdy_ctlr_param_node = xmldoc-&gt;create_element( &apos;wdy_ctlr_param&apos; ).
          setattributesfromstructure( node = wdy_ctlr_param_node structure = &lt;wdy_ctlr_param&gt; ).
          rc = controller_definition_node-&gt;append_child( wdy_ctlr_param_node ).
        ENDLOOP.
      WHEN &apos;A&apos;.
        LOOP AT it_wdy_ctlr_param ASSIGNING &lt;wdy_ctlr_param&gt; WHERE version = &apos;A&apos;.
          &lt;wdy_ctlr_param&gt;-version = if_wdy_md_object=&gt;co_version_inactive.
          wdy_ctlr_param_node = xmldoc-&gt;create_element( &apos;wdy_ctlr_param&apos; ).
          setattributesfromstructure( node = wdy_ctlr_param_node structure = &lt;wdy_ctlr_param&gt; ).
          rc = controller_definition_node-&gt;append_child( wdy_ctlr_param_node ).
        ENDLOOP.
    ENDCASE.
  ENDIF.

* copy wdy_ctlr_paramt
  DATA wdy_ctlr_paramt_table TYPE STANDARD TABLE OF wdy_ctlr_paramt.
  FIELD-SYMBOLS: &lt;wdy_ctlr_paramt&gt; TYPE wdy_ctlr_paramt.
  SELECT * FROM wdy_ctlr_paramt INTO TABLE wdy_ctlr_paramt_table
    WHERE component_name = definition-component_name
      AND controller_name  = definition-controller_name.
  LOOP AT wdy_ctlr_paramt_table ASSIGNING &lt;wdy_ctlr_paramt&gt;.
    wdy_ctlr_paramt_node = xmldoc-&gt;create_element( &apos;wdy_ctlr_paramt&apos; ).
    setattributesfromstructure( node = wdy_ctlr_paramt_node structure = &lt;wdy_ctlr_paramt&gt; ).
    rc = controller_definition_node-&gt;append_child( wdy_ctlr_paramt_node ).
  ENDLOOP.

* copy controller usages
  DATA it_wdy_ctlr_usage TYPE STANDARD TABLE OF wdy_ctlr_usage.
  FIELD-SYMBOLS: &lt;wdy_ctlr_usage&gt; TYPE wdy_ctlr_usage.
  SELECT * FROM wdy_ctlr_usage INTO TABLE it_wdy_ctlr_usage
    WHERE component_name   = definition-component_name
      AND controller_name  = definition-controller_name.
  IF sy-subrc = 0.
    CASE definition-version.
      WHEN &apos;I&apos;.
        LOOP AT it_wdy_ctlr_usage ASSIGNING &lt;wdy_ctlr_usage&gt; WHERE version &lt;&gt; &apos;D&apos;.
          IF &lt;wdy_ctlr_usage&gt;-version = &apos;A&apos;.
            READ TABLE it_wdy_ctlr_usage TRANSPORTING NO FIELDS
              WITH KEY ctlr_usage_name = &lt;wdy_ctlr_usage&gt;-ctlr_usage_name
                       version = &apos;I&apos;.
            IF sy-subrc = 0.
              CONTINUE.
            ENDIF.
          ENDIF.
          &lt;wdy_ctlr_usage&gt;-version = if_wdy_md_object=&gt;co_version_inactive.
          wdy_ctlr_usage_node = xmldoc-&gt;create_element( &apos;wdy_ctlr_usage&apos; ).
          setattributesfromstructure( node = wdy_ctlr_usage_node structure = &lt;wdy_ctlr_usage&gt; ).
          rc = controller_definition_node-&gt;append_child( wdy_ctlr_usage_node ).
        ENDLOOP.
      WHEN &apos;A&apos;.
        LOOP AT it_wdy_ctlr_usage ASSIGNING &lt;wdy_ctlr_usage&gt; WHERE version = &apos;A&apos;.
          &lt;wdy_ctlr_usage&gt;-version = if_wdy_md_object=&gt;co_version_inactive.
          wdy_ctlr_usage_node = xmldoc-&gt;create_element( &apos;wdy_ctlr_usage&apos; ).
          setattributesfromstructure( node = wdy_ctlr_usage_node structure = &lt;wdy_ctlr_usage&gt; ).
          rc = controller_definition_node-&gt;append_child( wdy_ctlr_usage_node ).
        ENDLOOP.
    ENDCASE.
  ENDIF.

* copy context nodes
  DATA it_wdy_ctx_node TYPE STANDARD TABLE OF wdy_ctx_node.
  FIELD-SYMBOLS: &lt;wdy_ctx_node&gt; TYPE wdy_ctx_node.
  SELECT * FROM wdy_ctx_node INTO TABLE it_wdy_ctx_node
    WHERE component_name   = definition-component_name
      AND controller_name  = definition-controller_name.
  IF sy-subrc = 0.
    CASE definition-version.
      WHEN &apos;I&apos;.
        LOOP AT it_wdy_ctx_node ASSIGNING &lt;wdy_ctx_node&gt; WHERE version &lt;&gt; &apos;D&apos;.
          IF &lt;wdy_ctx_node&gt;-version = &apos;A&apos;.
            READ TABLE it_wdy_ctx_node TRANSPORTING NO FIELDS
              WITH KEY node_name = &lt;wdy_ctx_node&gt;-node_name
                       version = &apos;I&apos;.
            IF sy-subrc = 0.
              CONTINUE.
            ENDIF.
          ENDIF.
          &lt;wdy_ctx_node&gt;-version = if_wdy_md_object=&gt;co_version_inactive.
          wdy_ctx_node_node = xmldoc-&gt;create_element( &apos;wdy_ctx_node&apos; ).
          setattributesfromstructure( node = wdy_ctx_node_node structure = &lt;wdy_ctx_node&gt; ).
          rc = controller_definition_node-&gt;append_child( wdy_ctx_node_node ).
        ENDLOOP.
      WHEN &apos;A&apos;.
        LOOP AT it_wdy_ctx_node ASSIGNING &lt;wdy_ctx_node&gt; WHERE version = &apos;A&apos;.
          &lt;wdy_ctx_node&gt;-version = if_wdy_md_object=&gt;co_version_inactive.
          wdy_ctx_node_node = xmldoc-&gt;create_element( &apos;wdy_ctx_node&apos; ).
          setattributesfromstructure( node = wdy_ctx_node_node structure = &lt;wdy_ctx_node&gt; ).
          rc = controller_definition_node-&gt;append_child( wdy_ctx_node_node ).
        ENDLOOP.
    ENDCASE.
  ENDIF.

* copy context attributes
  DATA it_wdy_ctx_attrib TYPE STANDARD TABLE OF wdy_ctx_attrib.
  FIELD-SYMBOLS: &lt;wdy_ctx_attrib&gt; TYPE wdy_ctx_attrib.
  SELECT * FROM wdy_ctx_attrib INTO TABLE it_wdy_ctx_attrib
    WHERE component_name   = definition-component_name
      AND controller_name  = definition-controller_name.
  IF sy-subrc = 0.
    CASE definition-version.
      WHEN &apos;I&apos;.
        LOOP AT it_wdy_ctx_attrib ASSIGNING &lt;wdy_ctx_attrib&gt; WHERE version &lt;&gt; &apos;D&apos;.
          IF &lt;wdy_ctx_attrib&gt;-version = &apos;A&apos;.
            READ TABLE it_wdy_ctx_attrib TRANSPORTING NO FIELDS
              WITH KEY node_name = &lt;wdy_ctx_attrib&gt;-node_name
                       attribute_name = &lt;wdy_ctx_attrib&gt;-attribute_name
                       version = &apos;I&apos;.
            IF sy-subrc = 0.
              CONTINUE.
            ENDIF.
          ENDIF.
          &lt;wdy_ctx_attrib&gt;-version = if_wdy_md_object=&gt;co_version_inactive.
          wdy_ctx_attrib_node = xmldoc-&gt;create_element( &apos;wdy_ctx_attrib&apos; ).
          setattributesfromstructure( node = wdy_ctx_attrib_node structure = &lt;wdy_ctx_attrib&gt; ).
          rc = controller_definition_node-&gt;append_child( wdy_ctx_attrib_node ).
        ENDLOOP.
      WHEN &apos;A&apos;.
        LOOP AT it_wdy_ctx_attrib ASSIGNING &lt;wdy_ctx_attrib&gt; WHERE version = &apos;A&apos;.
          &lt;wdy_ctx_attrib&gt;-version = if_wdy_md_object=&gt;co_version_inactive.
          wdy_ctx_attrib_node = xmldoc-&gt;create_element( &apos;wdy_ctx_attrib&apos; ).
          setattributesfromstructure( node = wdy_ctx_attrib_node structure = &lt;wdy_ctx_attrib&gt; ).
          rc = controller_definition_node-&gt;append_child( wdy_ctx_attrib_node ).
        ENDLOOP.
    ENDCASE.
  ENDIF.

* copy context mapping
  data it_wdy_ctx_mapping type standard table of wdy_ctx_mapping.
  field-symbols: &lt;wdy_ctx_mapping&gt; type wdy_ctx_mapping.
  select * from wdy_ctx_mapping into table it_wdy_ctx_mapping
    where component_name   = definition-component_name
      and controller_name  = definition-controller_name.
  if sy-subrc = 0.
    case definition-version.
      when &apos;I&apos;.
        loop at it_wdy_ctx_mapping assigning &lt;wdy_ctx_mapping&gt; where version &lt;&gt; &apos;D&apos;.
          if &lt;wdy_ctx_mapping&gt;-version = &apos;A&apos;.
            read table it_wdy_ctx_mapping transporting no fields
              with key ctlr_usage_name = &lt;wdy_ctx_mapping&gt;-ctlr_usage_name
                       ctx_mapp_name = &lt;wdy_ctx_mapping&gt;-ctx_mapp_name
                       version = &apos;I&apos;.
            if sy-subrc = 0.
              continue.
            endif.
          endif.
          &lt;wdy_ctx_mapping&gt;-version = if_wdy_md_object=&gt;co_version_inactive.
         wdy_ctx_mapping_node = xmldoc-&gt;create_element( &apos;wdy_ctx_mapping&apos; ).
          setattributesfromstructure( node = wdy_ctx_mapping_node structure = &lt;wdy_ctx_mapping&gt; ).
          rc = controller_definition_node-&gt;append_child( wdy_ctx_mapping_node ).
        endloop.
      when &apos;A&apos;.
        loop at it_wdy_ctx_mapping assigning &lt;wdy_ctx_mapping&gt; where version = &apos;A&apos;.
          &lt;wdy_ctx_mapping&gt;-version = if_wdy_md_object=&gt;co_version_inactive.
         wdy_ctx_mapping_node = xmldoc-&gt;create_element( &apos;wdy_ctx_mapping&apos; ).
          setattributesfromstructure( node = wdy_ctx_mapping_node structure = &lt;wdy_ctx_mapping&gt; ).
          rc = controller_definition_node-&gt;append_child( wdy_ctx_mapping_node ).
        endloop.
    endcase.
  endif.



endmethod.</source>
  </method>
  <method CLSNAME="ZSAPLINK" CMPNAME="CREATEIXMLDOCFROMOBJECT" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>method CREATEIXMLDOCFROMOBJECT.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/


*xml nodes
  DATA rootnode   TYPE REF TO if_ixml_element.
  DATA wdy_componentt_node   TYPE REF TO if_ixml_element.
  DATA wdy_compo_usage_node  TYPE REF TO if_ixml_element.
  DATA wdy_ext_ctlr_use_node TYPE REF TO if_ixml_element.
  DATA wdy_ext_ctx_map_node  TYPE REF TO if_ixml_element.
  DATA wdy_intf_implem_node  TYPE REF TO if_ixml_element.
  DATA view_node             TYPE REF TO if_ixml_element.
  DATA rc         TYPE sysubrc.

  DATA: component TYPE REF TO if_wdy_md_component.
  TRY.
      component = me-&gt;get_component( ).
    CATCH cx_wdy_md_not_existing.
      RAISE EXCEPTION TYPE zcx_saplink EXPORTING textid = zcx_saplink=&gt;not_found.
      RETURN.
    CATCH cx_wdy_md_permission_failure.
      RAISE EXCEPTION TYPE zcx_saplink EXPORTING textid = zcx_saplink=&gt;not_found.
      RETURN.
  ENDTRY.

  DATA definition TYPE wdy_component.

  component-&gt;if_wdy_md_object~get_definition(
     IMPORTING
       definition = definition ).

* Create parent node
  DATA _objtype TYPE string.
  _objtype = getobjecttype( ).
  rootnode = xmldoc-&gt;create_element( _objtype ).
  setattributesfromstructure( node = rootnode structure = definition ).

* copy wdy_componentt
  DATA wdy_componentt_table TYPE STANDARD TABLE OF wdy_componentt.
  FIELD-SYMBOLS: &lt;wdy_componentt&gt; TYPE wdy_componentt.
  SELECT * FROM wdy_componentt INTO TABLE wdy_componentt_table
    WHERE component_name = definition-component_name.
  LOOP AT wdy_componentt_table ASSIGNING &lt;wdy_componentt&gt;.
    wdy_componentt_node = xmldoc-&gt;create_element( &apos;wdy_componentt&apos; ).
    setattributesfromstructure( node = wdy_componentt_node structure = &lt;wdy_componentt&gt; ).
    rc = rootnode-&gt;append_child( wdy_componentt_node ).
  ENDLOOP.


* copy component usages
  DATA it_wdy_compo_usage TYPE STANDARD TABLE OF wdy_compo_usage.
  FIELD-SYMBOLS: &lt;wdy_compo_usage&gt; TYPE wdy_compo_usage.
  SELECT * FROM wdy_compo_usage INTO TABLE it_wdy_compo_usage
    WHERE component_name   = definition-component_name.
  IF sy-subrc = 0.
    CASE definition-version.
      WHEN &apos;I&apos;.
        LOOP AT it_wdy_compo_usage ASSIGNING &lt;wdy_compo_usage&gt; WHERE version &lt;&gt; &apos;D&apos;.
          IF &lt;wdy_compo_usage&gt;-version = &apos;A&apos;.
            READ TABLE it_wdy_compo_usage TRANSPORTING NO FIELDS
              WITH KEY compo_usage_name = &lt;wdy_compo_usage&gt;-compo_usage_name
                       version = &apos;I&apos;.
            IF sy-subrc = 0.
              CONTINUE.
            ENDIF.
          ENDIF.
          &lt;wdy_compo_usage&gt;-version = if_wdy_md_object=&gt;co_version_inactive.

          wdy_compo_usage_node = xmldoc-&gt;create_element( &apos;wdy_compo_usage&apos; ).
          setattributesfromstructure( node = wdy_compo_usage_node structure = &lt;wdy_compo_usage&gt; ).
          rc = rootnode-&gt;append_child( wdy_compo_usage_node ).
        ENDLOOP.
      WHEN &apos;A&apos;.
        LOOP AT it_wdy_compo_usage ASSIGNING &lt;wdy_compo_usage&gt; WHERE version = &apos;A&apos;.
          &lt;wdy_compo_usage&gt;-version = if_wdy_md_object=&gt;co_version_inactive.
          wdy_compo_usage_node = xmldoc-&gt;create_element( &apos;wdy_compo_usage&apos; ).
          setattributesfromstructure( node = wdy_compo_usage_node structure = &lt;wdy_compo_usage&gt; ).
          rc = rootnode-&gt;append_child( wdy_compo_usage_node ).
        ENDLOOP.
    ENDCASE.
  ENDIF.

* copy external controller usages
  DATA it_wdy_ext_ctlr_use TYPE STANDARD TABLE OF wdy_ext_ctlr_use.
  FIELD-SYMBOLS: &lt;wdy_ext_ctlr_use&gt; TYPE wdy_ext_ctlr_use.
  SELECT * FROM wdy_ext_ctlr_use INTO TABLE it_wdy_ext_ctlr_use
    WHERE component_name   = definition-component_name.
  IF sy-subrc = 0.
    CASE definition-version.
      WHEN &apos;I&apos;.
        LOOP AT it_wdy_ext_ctlr_use ASSIGNING &lt;wdy_ext_ctlr_use&gt; WHERE version &lt;&gt; &apos;D&apos;.
          IF &lt;wdy_ext_ctlr_use&gt;-version = &apos;A&apos;.
            READ TABLE it_wdy_ext_ctlr_use TRANSPORTING NO FIELDS
              WITH KEY component_name = &lt;wdy_ext_ctlr_use&gt;-component_usage
                       ctlr_usage_name = &lt;wdy_ext_ctlr_use&gt;-ctlr_usage_name
                       comp_ctlr_usage = &lt;wdy_ext_ctlr_use&gt;-comp_ctlr_usage
                       version = &apos;I&apos;.
            IF sy-subrc = 0.
              CONTINUE.
            ENDIF.
          ENDIF.
          &lt;wdy_ext_ctlr_use&gt;-version = if_wdy_md_object=&gt;co_version_inactive.
          wdy_ext_ctlr_use_node = xmldoc-&gt;create_element( &apos;wdy_ext_ctlr_use&apos; ).
          setattributesfromstructure( node = wdy_ext_ctlr_use_node structure = &lt;wdy_ext_ctlr_use&gt; ).
          rc = rootnode-&gt;append_child( wdy_ext_ctlr_use_node ).
        ENDLOOP.
      WHEN &apos;A&apos;.
        LOOP AT it_wdy_ext_ctlr_use ASSIGNING &lt;wdy_ext_ctlr_use&gt; WHERE version = &apos;A&apos;.
          &lt;wdy_ext_ctlr_use&gt;-version = if_wdy_md_object=&gt;co_version_inactive.
          wdy_ext_ctlr_use_node = xmldoc-&gt;create_element( &apos;wdy_ext_ctlr_use&apos; ).
          setattributesfromstructure( node = wdy_ext_ctlr_use_node structure = &lt;wdy_ext_ctlr_use&gt; ).
          rc = rootnode-&gt;append_child( wdy_ext_ctlr_use_node ).
        ENDLOOP.
    ENDCASE.
  ENDIF.

* copy external context mappings
  DATA it_wdy_ext_ctx_map TYPE STANDARD TABLE OF wdy_ext_ctx_map.
  FIELD-SYMBOLS: &lt;wdy_ext_ctx_map&gt; TYPE wdy_ext_ctx_map.
  SELECT * FROM wdy_ext_ctx_map INTO TABLE it_wdy_ext_ctx_map
    WHERE component_name   = definition-component_name.
  IF sy-subrc = 0.
    CASE definition-version.
      WHEN &apos;I&apos;.
        LOOP AT it_wdy_ext_ctx_map ASSIGNING &lt;wdy_ext_ctx_map&gt; WHERE version &lt;&gt; &apos;D&apos;.
          IF &lt;wdy_ext_ctx_map&gt;-version = &apos;A&apos;.
            READ TABLE it_wdy_ext_ctx_map TRANSPORTING NO FIELDS
              WITH KEY ctx_mapping_name = &lt;wdy_ext_ctx_map&gt;-ctx_mapping_name
                       ctlr_usage_name = &lt;wdy_ext_ctx_map&gt;-ctlr_usage_name
                       comp_ctlr_usage = &lt;wdy_ext_ctx_map&gt;-comp_ctlr_usage
                       version = &apos;I&apos;.
            IF sy-subrc = 0.
              CONTINUE.
            ENDIF.
          ENDIF.
          &lt;wdy_ext_ctx_map&gt;-version = if_wdy_md_object=&gt;co_version_inactive.
          wdy_ext_ctx_map_node = xmldoc-&gt;create_element( &apos;wdy_ext_ctx_map&apos; ).
          setattributesfromstructure( node = wdy_ext_ctx_map_node structure = &lt;wdy_ext_ctx_map&gt; ).
          rc = rootnode-&gt;append_child( wdy_ext_ctx_map_node ).
        ENDLOOP.
      WHEN &apos;A&apos;.
        LOOP AT it_wdy_ext_ctx_map ASSIGNING &lt;wdy_ext_ctx_map&gt; WHERE version = &apos;A&apos;.
          &lt;wdy_ext_ctx_map&gt;-version = if_wdy_md_object=&gt;co_version_inactive.
          wdy_ext_ctx_map_node = xmldoc-&gt;create_element( &apos;wdy_ext_ctx_map&apos; ).
          setattributesfromstructure( node = wdy_ext_ctx_map_node structure = &lt;wdy_ext_ctx_map&gt; ).
          rc = rootnode-&gt;append_child( wdy_ext_ctx_map_node ).
        ENDLOOP.
    ENDCASE.
  ENDIF.

* copy interface implementations
  DATA it_wdy_intf_implem TYPE STANDARD TABLE OF wdy_intf_implem.
  FIELD-SYMBOLS: &lt;wdy_intf_implem&gt; TYPE wdy_intf_implem.
  SELECT * FROM wdy_intf_implem INTO TABLE it_wdy_intf_implem
    WHERE component_name = definition-component_name.
  IF sy-subrc = 0.
    CASE definition-version.
      WHEN &apos;I&apos;.
        LOOP AT it_wdy_intf_implem ASSIGNING &lt;wdy_intf_implem&gt; WHERE version &lt;&gt; &apos;D&apos;.
          IF &lt;wdy_intf_implem&gt;-version = &apos;A&apos;.
            READ TABLE it_wdy_intf_implem TRANSPORTING NO FIELDS
              WITH KEY interface_name = &lt;wdy_intf_implem&gt;-interface_name
                       version = &apos;I&apos;.
            IF sy-subrc = 0.
              CONTINUE.
            ENDIF.
          ENDIF.
          &lt;wdy_intf_implem&gt;-version = if_wdy_md_object=&gt;co_version_inactive.
          wdy_intf_implem_node = xmldoc-&gt;create_element( &apos;wdy_intf_implem&apos; ).
          setattributesfromstructure( node = wdy_intf_implem_node structure = &lt;wdy_intf_implem&gt; ).
          rc = rootnode-&gt;append_child( wdy_intf_implem_node ).
        ENDLOOP.
      WHEN &apos;A&apos;.
        LOOP AT it_wdy_intf_implem ASSIGNING &lt;wdy_intf_implem&gt; WHERE version = &apos;A&apos;.
          &lt;wdy_intf_implem&gt;-version = if_wdy_md_object=&gt;co_version_inactive.
          wdy_intf_implem_node = xmldoc-&gt;create_element( &apos;wdy_intf_implem&apos; ).
          setattributesfromstructure( node = wdy_intf_implem_node structure = &lt;wdy_intf_implem&gt; ).
          rc = rootnode-&gt;append_child( wdy_intf_implem_node ).
        ENDLOOP.
    ENDCASE.
  ENDIF.

  DATA: map TYPE REF TO if_object_map,
         iter TYPE REF TO if_object_collection_iterator,
         obj_name TYPE wdy_md_object_name,
         view TYPE REF TO if_wdy_md_abstract_view,
         controller TYPE REF TO if_wdy_md_controller.

  IF cl_wdy_md_component=&gt;is_component_interface_def( definition-component_name ) = &apos; &apos;.
*   copy views
    map ?= component-&gt;get_views( ).
    iter = map-&gt;get_values_iterator( ).
    WHILE iter-&gt;has_next( ) = &apos;X&apos;.
      TRY.
        view ?= iter-&gt;get_next( ).
        IF definition-version = if_wdy_md_object=&gt;co_version_active AND
           view-&gt;if_wdy_md_object~get_state( ) = if_wdy_md_object=&gt;co_state_pseudo_active.
          CONTINUE.
        ENDIF.
        me-&gt;view_to_xml(
          EXPORTING
            view = view
            xml_node = rootnode
          IMPORTING
            view_node = view_node ).

        controller = view-&gt;get_view_controller( ).
        IF definition-version = if_wdy_md_object=&gt;co_version_active AND
           controller-&gt;if_wdy_md_object~get_state( ) = if_wdy_md_object=&gt;co_state_pseudo_active.
          CONTINUE.
        ENDIF.

        me-&gt;controller_to_xml(
           EXPORTING
              controller = controller
              xml_node   = view_node ).


      ENDTRY.
    ENDWHILE.

*   copy &quot;window-views&quot;
    map ?= component-&gt;get_windows( ).
    iter = map-&gt;get_values_iterator( ).
    WHILE iter-&gt;has_next( ) = &apos;X&apos;.
      TRY.
        view ?= iter-&gt;get_next( ).
          me-&gt;view_to_xml(
            EXPORTING
              view = view
              xml_node = rootnode
            IMPORTING
              view_node = view_node ).

      controller = view-&gt;get_view_controller( ).
      IF definition-version = if_wdy_md_object=&gt;co_version_active AND
         controller-&gt;if_wdy_md_object~get_state( ) = if_wdy_md_object=&gt;co_state_pseudo_active.
        CONTINUE.
      ENDIF.

          me-&gt;controller_to_xml(
             EXPORTING
                controller = controller
                xml_node   = view_node ).
        CATCH cx_wdy_md_already_existing.
      ENDTRY.
    ENDWHILE.

  ELSE.
*   copy interface views
    DATA component_interface TYPE REF TO if_wdy_md_component_interface.
    component_interface ?= component-&gt;get_component_interface( ).
    map ?= component_interface-&gt;get_interface_views( ).
    iter = map-&gt;get_values_iterator( ).
    WHILE iter-&gt;has_next( ) = &apos;X&apos;.
      TRY.
          view ?= iter-&gt;get_next( ).
          IF definition-version = if_wdy_md_object=&gt;co_version_active AND
             view-&gt;if_wdy_md_object~get_state( ) = if_wdy_md_object=&gt;co_state_pseudo_active.
            CONTINUE.
          ENDIF.
          me-&gt;view_to_xml(
            EXPORTING
              view = view
              xml_node = rootnode
            IMPORTING
              view_node = view_node ).

          controller = view-&gt;get_view_controller( ).
          IF definition-version = if_wdy_md_object=&gt;co_version_active AND
             controller-&gt;if_wdy_md_object~get_state( ) = if_wdy_md_object=&gt;co_state_pseudo_active.
            CONTINUE.
          ENDIF.
          me-&gt;controller_to_xml(
             EXPORTING
              controller = controller
              xml_node   = view_node ).
        CATCH cx_wdy_md_already_existing.
      ENDTRY.
    ENDWHILE.
  ENDIF.

* copy controllers of component
  map ?= component-&gt;get_controllers( ).
  iter = map-&gt;get_values_iterator( ).
  WHILE iter-&gt;has_next( ) = &apos;X&apos;.
    TRY.
        controller ?= iter-&gt;get_next( ).
        IF controller-&gt;get_type( ) = wdyn_ctlr_type_cmp_config.
          CONTINUE.
        ENDIF.
        IF definition-version = if_wdy_md_object=&gt;co_version_active AND
           controller-&gt;if_wdy_md_object~get_state( ) = if_wdy_md_object=&gt;co_state_pseudo_active.
          CONTINUE.
        ENDIF.
        me-&gt;controller_to_xml(
           EXPORTING
            controller = controller
            xml_node   = rootnode ).

      CATCH cx_wdy_md_already_existing.
    ENDTRY.
  ENDWHILE.


*\--------------------------------------------------------------------/
  rc = xmldoc-&gt;append_child( rootnode ).
  ixmldocument = xmldoc.
endmethod.</source>
  </method>
  <method CLSNAME="ZSAPLINK" CMPNAME="CREATEOBJECTFROMIXMLDOC" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>METHOD createobjectfromixmldoc.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/


*xml nodes
  DATA rootnode   TYPE REF TO if_ixml_element.
  DATA wdy_componentt_node   TYPE REF TO if_ixml_element.
  DATA wdy_compo_usage_node  TYPE REF TO if_ixml_element.
  DATA wdy_ext_ctlr_use_node TYPE REF TO if_ixml_element.
  DATA wdy_ext_ctx_map_node  TYPE REF TO if_ixml_element.
  DATA wdy_intf_implem_node  TYPE REF TO if_ixml_element.
  DATA view_node             TYPE REF TO if_ixml_element.
  DATA node        TYPE REF TO if_ixml_element.
  DATA filter      TYPE REF TO if_ixml_node_filter.
  DATA iterator    TYPE REF TO if_ixml_node_iterator.
  DATA node2       TYPE REF TO if_ixml_element.
  DATA filter2     TYPE REF TO if_ixml_node_filter.
  DATA iterator2   TYPE REF TO if_ixml_node_iterator.
  DATA rc          TYPE sysubrc.
  DATA _devclass   TYPE devclass.
  DATA checkexists TYPE flag.
  DATA _objtype    TYPE string.
  DATA definition  TYPE wdy_component.

  DATA: component TYPE REF TO if_wdy_md_component.

  _devclass = devclass.
  _objtype = getobjecttype( ).

  xmldoc = ixmldocument.
  rootnode = xmldoc-&gt;find_from_name( _objtype ).

  CALL METHOD getstructurefromattributes
    EXPORTING
      node            = rootnode
      preserveversion = abap_true
    CHANGING
      structure       = definition.

  objname = definition-component_name.

  checkexists = checkexists( ).
  IF checkexists = abap_true.
    IF overwrite IS INITIAL.
      RAISE EXCEPTION TYPE zcx_saplink
        EXPORTING
          textid = zcx_saplink=&gt;existing.
    ELSE.
      &quot; delete object for new install
      deleteobject( ).
    ENDIF.
  ENDIF.

  cl_wdy_md_component=&gt;create_complete(
    EXPORTING
      name          = definition-component_name
    IMPORTING
      component     = component
    CHANGING
      devclass      = _devclass
  ).

* copy relevant parts of wdy_component (concerning assistance class and configuration properties)
  DATA copy_def TYPE wdy_component.
  CALL METHOD component-&gt;if_wdy_md_object~get_definition
    IMPORTING
      definition = copy_def.
  copy_def-config_props = definition-config_props.
  copy_def-assistance_class = definition-assistance_class.
  MODIFY wdy_component FROM copy_def.

* copy wdy_componentt
  DATA wdy_componentt_table TYPE STANDARD TABLE OF wdy_componentt.
  DATA wdy_componentt TYPE wdy_componentt.
  FREE: filter, iterator, node.
  filter = xmldoc-&gt;create_filter_name( &apos;wdy_componentt&apos; ).
  iterator = xmldoc-&gt;create_iterator_filtered( filter ).
  node ?= iterator-&gt;get_next( ).
  WHILE node IS NOT INITIAL.
    CALL METHOD getstructurefromattributes
      EXPORTING
        node            = node
        preserveversion = abap_true
      CHANGING
        structure       = wdy_componentt.
    APPEND wdy_componentt TO wdy_componentt_table.
    node ?= iterator-&gt;get_next( ).
  ENDWHILE.
  MODIFY wdy_componentt FROM TABLE wdy_componentt_table.

* copy component usages
  DATA it_wdy_compo_usage TYPE STANDARD TABLE OF wdy_compo_usage.
  DATA wdy_compo_usage TYPE wdy_compo_usage.
  FREE: filter, iterator, node.
  filter = xmldoc-&gt;create_filter_name( &apos;wdy_compo_usage&apos; ).
  iterator = xmldoc-&gt;create_iterator_filtered( filter ).
  node ?= iterator-&gt;get_next( ).
  WHILE node IS NOT INITIAL.
    CALL METHOD getstructurefromattributes
      EXPORTING
        node            = node
        preserveversion = abap_true
      CHANGING
        structure       = wdy_compo_usage.
    APPEND wdy_compo_usage TO it_wdy_compo_usage.
    node ?= iterator-&gt;get_next( ).
  ENDWHILE.
  INSERT wdy_compo_usage FROM TABLE it_wdy_compo_usage.

* copy external controller usages
  DATA it_wdy_ext_ctlr_use TYPE STANDARD TABLE OF wdy_ext_ctlr_use.
  DATA wdy_ext_ctlr_use TYPE wdy_ext_ctlr_use.
  FREE: filter, iterator, node.
  filter = xmldoc-&gt;create_filter_name( &apos;wdy_ext_ctlr_use&apos; ).
  iterator = xmldoc-&gt;create_iterator_filtered( filter ).
  node ?= iterator-&gt;get_next( ).
  WHILE node IS NOT INITIAL.
    CALL METHOD getstructurefromattributes
      EXPORTING
        node            = node
        preserveversion = abap_true
      CHANGING
        structure       = wdy_ext_ctlr_use.
    APPEND wdy_ext_ctlr_use TO it_wdy_ext_ctlr_use.
    node ?= iterator-&gt;get_next( ).
  ENDWHILE.
  INSERT wdy_ext_ctlr_use FROM TABLE it_wdy_ext_ctlr_use.

* copy external context mappings
  DATA it_wdy_ext_ctx_map TYPE STANDARD TABLE OF wdy_ext_ctx_map.
  DATA wdy_ext_ctx_map TYPE wdy_ext_ctx_map.
  FREE: filter, iterator, node.
  filter = xmldoc-&gt;create_filter_name( &apos;wdy_ext_ctx_map&apos; ).
  iterator = xmldoc-&gt;create_iterator_filtered( filter ).
  node ?= iterator-&gt;get_next( ).
  WHILE node IS NOT INITIAL.
    CALL METHOD getstructurefromattributes
      EXPORTING
        node            = node
        preserveversion = abap_true
      CHANGING
        structure       = wdy_ext_ctx_map.
    APPEND wdy_ext_ctx_map TO it_wdy_ext_ctx_map.
    node ?= iterator-&gt;get_next( ).
  ENDWHILE.
  INSERT wdy_ext_ctx_map FROM TABLE it_wdy_ext_ctx_map.

* copy interface implementations
  DATA it_wdy_intf_implem TYPE STANDARD TABLE OF wdy_intf_implem.
  DATA wdy_intf_implem TYPE wdy_intf_implem.
  FREE: filter, iterator, node.
  filter = xmldoc-&gt;create_filter_name( &apos;wdy_intf_implem&apos; ).
  iterator = xmldoc-&gt;create_iterator_filtered( filter ).
  node ?= iterator-&gt;get_next( ).
  WHILE node IS NOT INITIAL.
    CALL METHOD getstructurefromattributes
      EXPORTING
        node            = node
        preserveversion = abap_true
      CHANGING
        structure       = wdy_intf_implem.
    APPEND wdy_intf_implem TO it_wdy_intf_implem.
    node ?= iterator-&gt;get_next( ).
  ENDWHILE.
  INSERT wdy_intf_implem FROM TABLE it_wdy_intf_implem.

  TRY.
*   copy views
      FREE: filter, iterator, node.
      filter = xmldoc-&gt;create_filter_name( &apos;view_definition&apos; ).
      iterator = xmldoc-&gt;create_iterator_filtered( filter ).
      node ?= iterator-&gt;get_next( ).
      WHILE node IS NOT INITIAL.
        me-&gt;xml_to_view(
          EXPORTING
            xml_node = node ).
        node ?= iterator-&gt;get_next( ).
      ENDWHILE.

      DATA controller TYPE REF TO if_wdy_md_controller.
      IF cl_wdy_md_component=&gt;is_component_interface_def( definition-component_name ) = &apos; &apos;.
        controller = component-&gt;get_controller( wdyn_component_controller_name ).
        controller-&gt;delete( ).
        controller-&gt;save_to_database( ).
      ENDIF.

* copy controllers of component
      FREE: filter, iterator, node.
      filter = xmldoc-&gt;create_filter_name( &apos;controller_definition&apos; ).
      iterator = xmldoc-&gt;create_iterator_filtered( filter ).
      node ?= iterator-&gt;get_next( ).
      WHILE node IS NOT INITIAL.
        TRY.
            controller = me-&gt;xml_to_controller(
                xml_node = node ).
            node ?= iterator-&gt;get_next( ).
          CATCH cx_wdy_md_already_existing.
            node ?= iterator-&gt;get_next( ).
        ENDTRY.
      ENDWHILE.

    CATCH cx_wdy_md_enqueue_failure.
    CATCH cx_wdy_md_already_existing.

  ENDTRY.
*
*  DATA: trobjtype  TYPE trobjtype,
*        trobj_name TYPE trobj_name.
*  trobjtype  = l_object.
*  trobj_name = l_obj_name.
*  CALL FUNCTION &apos;RS_INSERT_INTO_WORKING_AREA&apos;
*    EXPORTING
*      object            = trobjtype
*      obj_name          = trobj_name
*    EXCEPTIONS
*      wrong_object_name = 1.

  component-&gt;unlock( ).
  component-&gt;reload( ).

  name = objname.
ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZSAPLINK" CMPNAME="DELETEOBJECT" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>method DELETEOBJECT.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/

  DATA: component TYPE REF TO if_wdy_md_component.
  TRY.
      component = me-&gt;get_component( ).
    CATCH cx_wdy_md_not_existing.
      RAISE EXCEPTION TYPE zcx_saplink EXPORTING textid = zcx_saplink=&gt;not_found.
      RETURN.
    CATCH cx_wdy_md_permission_failure.
      RAISE EXCEPTION TYPE zcx_saplink EXPORTING textid = zcx_saplink=&gt;not_found.
      RETURN.
  ENDTRY.

  component-&gt;if_wdy_md_lockable_object~lock( ).
  component-&gt;if_wdy_md_object~delete( ).
  component-&gt;if_wdy_md_lockable_object~save_to_database( ).
  component-&gt;if_wdy_md_lockable_object~unlock( ).
endmethod.</source>
  </method>
  <method CLSNAME="ZSAPLINK" CMPNAME="GETOBJECTTYPE" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>method GETOBJECTTYPE.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/


  objecttype = wdyn_r3tr_component.  &quot;Web Dynpro Component

endmethod.</source>
  </method>
  <method CLSNAME="ZSAPLINK_WD_COMPONENT" CMPNAME="GET_COMPONENT" VERSION="1" LANGU="E" DESCRIPT="Get Component Object" EXPOSURE="0" STATE="1" EDITORDER="1 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" MTDNEWEXC="X" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZSAPLINK_WD_COMPONENT" CMPNAME="GET_COMPONENT" SCONAME="COMPONENT" VERSION="1" LANGU="E" DESCRIPT="Component" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="3" TYPE="IF_WDY_MD_COMPONENT"/>
   <exception CLSNAME="ZSAPLINK_WD_COMPONENT" CMPNAME="GET_COMPONENT" SCONAME="CX_WDY_MD_NOT_EXISTING" VERSION="1" LANGU="E" DESCRIPT="Web Dynpro : Objekt existiert nicht" MTDTYPE="0" EDITORDER="1 "/>
   <exception CLSNAME="ZSAPLINK_WD_COMPONENT" CMPNAME="GET_COMPONENT" SCONAME="CX_WDY_MD_PERMISSION_FAILURE" VERSION="1" LANGU="E" MTDTYPE="0" EDITORDER="2 "/>
   <source>method GET_COMPONENT.

  DATA: component_name TYPE wdy_component_name.
  component_name = objname.
  TRANSLATE component_name TO UPPER CASE.

  DATA: tr_objtype     TYPE trobjtype,
         inactive_vers  TYPE char1,
         working_item   TYPE char1,
         l_obj_key      TYPE e071-obj_name.
  DATA: version TYPE r3state.

  CALL FUNCTION &apos;RS_WORKING_AREA_INIT&apos;.

  tr_objtype = wdyn_limu_component_definition.
  l_obj_key = component_name.
  TRANSLATE l_obj_key TO UPPER CASE.                      &quot;#EC SYNTCHAR
  CALL FUNCTION &apos;RS_OBJECT_IN_WORKING_AREA&apos;
    EXPORTING
      object                        = tr_objtype
      obj_name                      = l_obj_key
*     GLOBAL_CHECK                  = &apos; &apos;
      mode                          = &apos;S&apos; &quot;Display
    IMPORTING
      object_is_work_item           = working_item
      object_inactive_version       = inactive_vers.


  IF working_item IS INITIAL.
    version = wdywb_version_active.
  ELSE.
    version = wdywb_version_inactive.
  ENDIF.

  TRY.
      CALL METHOD cl_wdy_md_component=&gt;get_object_by_key
        EXPORTING
          name      = component_name
          version   = version
        RECEIVING
          component = component.
    CATCH cx_wdy_md_not_existing.
      IF version = wdywb_version_active.
        version     = wdywb_version_inactive.
      ELSE.
        version      = wdywb_version_active.
      ENDIF.
      TRY.
        CALL METHOD cl_wdy_md_component=&gt;get_object_by_key
          EXPORTING
            name      = component_name
            version   = version
          RECEIVING
            component = component.
      ENDTRY.
  ENDTRY.
endmethod.</source>
  </method>
  <method CLSNAME="ZSAPLINK_WD_COMPONENT" CMPNAME="VIEW_TO_XML" VERSION="1" LANGU="E" DESCRIPT="Convert View Information to XML" EXPOSURE="0" STATE="1" EDITORDER="2 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZSAPLINK_WD_COMPONENT" CMPNAME="VIEW_TO_XML" SCONAME="VIEW" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="3" TYPE="IF_WDY_MD_ABSTRACT_VIEW"/>
   <parameter CLSNAME="ZSAPLINK_WD_COMPONENT" CMPNAME="VIEW_TO_XML" SCONAME="XML_NODE" VERSION="1" LANGU="E" DESCRIPT="IF_IXML_ELEMENT" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="3" TYPE="IF_IXML_ELEMENT"/>
   <parameter CLSNAME="ZSAPLINK_WD_COMPONENT" CMPNAME="VIEW_TO_XML" SCONAME="VIEW_NODE" VERSION="1" LANGU="E" DESCRIPT="IF_IXML_ELEMENT" CMPTYPE="1" MTDTYPE="0" EDITORDER="3 " DISPID="0 " PARDECLTYP="1" PARPASSTYP="1" TYPTYPE="3" TYPE="IF_IXML_ELEMENT"/>
   <source>method VIEW_TO_XML.
  DATA definition TYPE wdy_view.
  DATA rc TYPE i.
  DATA view_definition_node    TYPE REF TO if_ixml_element.
  DATA view_window_node        TYPE REF TO if_ixml_element.
  DATA wdy_viewt_node          TYPE REF TO if_ixml_element.
  DATA wdy_iobound_plug_node   TYPE REF TO if_ixml_element.
  DATA wdy_iobound_plgt_node   TYPE REF TO if_ixml_element.
  DATA wdy_ui_element_node     TYPE REF TO if_ixml_element.
  DATA wdy_ui_property_node    TYPE REF TO if_ixml_element.
  DATA wdy_view_cntr_node      TYPE REF TO if_ixml_element.
  DATA wdy_view_cntrt_node     TYPE REF TO if_ixml_element.
  DATA wdy_plug_param_node     TYPE REF TO if_ixml_element.
  DATA wdy_ui_ctx_bind_node    TYPE REF TO if_ixml_element.
  DATA wdy_ui_ddic_bind_node   TYPE REF TO if_ixml_element.
  DATA wdy_ui_evt_bind_node    TYPE REF TO if_ixml_element.
  DATA wdy_nav_link_node       TYPE REF TO if_ixml_element.
  DATA wdy_nav_targref_node    TYPE REF TO if_ixml_element.
  DATA wdy_vsh_node_node       TYPE REF TO if_ixml_element.
  DATA wdy_vsh_pholder_node    TYPE REF TO if_ixml_element.
  DATA wdy_vs_property_node    TYPE REF TO if_ixml_element.


  view-&gt;if_wdy_md_object~get_definition(
     IMPORTING
       definition = definition ).

* Create parent node
  DATA _objtype TYPE string.
  _objtype = definition-view_name.

* View Definition
  view_definition_node = xmldoc-&gt;create_element( &apos;view_definition&apos; ).
  setattributesfromstructure( node = view_definition_node structure = definition ).
  rc = xml_node-&gt;append_child( view_definition_node ).
  view_node = view_definition_node.

* View Window
  TRY.
      DATA window TYPE REF TO if_wdy_md_window.
      window ?= view.
      DATA title TYPE wdy_md_translatable_text.
      title = window-&gt;get_title( ).
      view_window_node = xmldoc-&gt;create_element( &apos;view_window&apos; ).
      rc = view_window_node-&gt;set_attribute( name = &apos;title&apos; value = title ).
*   data def_root_node type ref to if_wdy_md_vset_hierarchy_node.
*   def_root_node ?= window-&gt;get_root_node( definition-def_root_node ).
      rc = view_definition_node-&gt;append_child( view_window_node ).
    CATCH cx_sy_move_cast_error.
  ENDTRY.

* copy wdy_viewt
  DATA wdy_viewt_table TYPE STANDARD TABLE OF wdy_viewt.
  FIELD-SYMBOLS: &lt;wdy_viewt&gt; TYPE wdy_viewt.
  SELECT * FROM wdy_viewt INTO TABLE wdy_viewt_table
    WHERE component_name = definition-component_name
      AND view_name  = definition-view_name.
  LOOP AT wdy_viewt_table ASSIGNING &lt;wdy_viewt&gt;.
    wdy_viewt_node = xmldoc-&gt;create_element( &apos;wdy_viewt&apos; ).
    setattributesfromstructure( node = wdy_viewt_node structure = &lt;wdy_viewt&gt; ).
    rc = view_definition_node-&gt;append_child( wdy_viewt_node ).
  ENDLOOP.

* copy wdy_iobound_plug.
  DATA it_wdy_iobound_plug TYPE STANDARD TABLE OF wdy_iobound_plug.
  DATA it_wdy_iobound_plug_copy TYPE STANDARD TABLE OF wdy_iobound_plug.
  FIELD-SYMBOLS: &lt;wdy_iobound_plug&gt; TYPE wdy_iobound_plug.
  SELECT * FROM wdy_iobound_plug INTO TABLE it_wdy_iobound_plug
    WHERE component_name = definition-component_name
      AND view_name  = definition-view_name.
  IF sy-subrc = 0.
    CASE definition-version.
      WHEN &apos;I&apos;.
        LOOP AT it_wdy_iobound_plug ASSIGNING &lt;wdy_iobound_plug&gt; WHERE version &lt;&gt; &apos;D&apos;.
          IF &lt;wdy_iobound_plug&gt;-version = &apos;A&apos;.
            READ TABLE it_wdy_iobound_plug TRANSPORTING NO FIELDS
              WITH KEY plug_name = &lt;wdy_iobound_plug&gt;-plug_name
                       version = &apos;I&apos;.
            IF sy-subrc = 0.
              CONTINUE.
            ENDIF.
          ENDIF.
          &lt;wdy_iobound_plug&gt;-version   = if_wdy_md_object=&gt;co_version_inactive.
          wdy_iobound_plug_node = xmldoc-&gt;create_element( &apos;wdy_iobound_plug&apos; ).
          setattributesfromstructure( node = wdy_iobound_plug_node structure = &lt;wdy_iobound_plug&gt; ).
          rc = view_definition_node-&gt;append_child( wdy_iobound_plug_node ).
        ENDLOOP.
      WHEN &apos;A&apos;.
        LOOP AT it_wdy_iobound_plug ASSIGNING &lt;wdy_iobound_plug&gt; WHERE version = &apos;A&apos;.
          &lt;wdy_iobound_plug&gt;-version   = if_wdy_md_object=&gt;co_version_inactive.
          wdy_iobound_plug_node = xmldoc-&gt;create_element( &apos;wdy_iobound_plug&apos; ).
          setattributesfromstructure( node = wdy_iobound_plug_node structure = &lt;wdy_iobound_plug&gt; ).
          rc = view_definition_node-&gt;append_child( wdy_iobound_plug_node ).
        ENDLOOP.
    ENDCASE.
  ENDIF.

* copy wdy_iobound_plgt
  DATA it_wdy_iobound_plgt TYPE STANDARD TABLE OF wdy_iobound_plgt.
  FIELD-SYMBOLS: &lt;plgt&gt; TYPE wdy_iobound_plgt.
  SELECT * FROM wdy_iobound_plgt INTO TABLE it_wdy_iobound_plgt
    WHERE component_name = definition-component_name
      AND view_name = definition-view_name.
  IF sy-subrc = 0.
    LOOP AT it_wdy_iobound_plgt ASSIGNING &lt;plgt&gt;.
      wdy_iobound_plgt_node = xmldoc-&gt;create_element( &apos;wdy_iobound_plgt&apos; ).
      setattributesfromstructure( node = wdy_iobound_plgt_node structure = &lt;plgt&gt; ).
      rc = view_definition_node-&gt;append_child( wdy_iobound_plgt_node ).
    ENDLOOP.
  ENDIF.

* copy WDY_UI_ELEMENT.
  DATA it_wdy_ui_element TYPE STANDARD TABLE OF wdy_ui_element.
  FIELD-SYMBOLS: &lt;wdy_ui_element&gt; TYPE wdy_ui_element.
  SELECT * FROM wdy_ui_element INTO TABLE it_wdy_ui_element
    WHERE component_name = definition-component_name
      AND view_name  = definition-view_name.
  IF sy-subrc = 0.
    CASE definition-version.
      WHEN &apos;I&apos;.
        LOOP AT it_wdy_ui_element ASSIGNING &lt;wdy_ui_element&gt; WHERE version &lt;&gt; &apos;D&apos;.
          IF &lt;wdy_ui_element&gt;-version = &apos;A&apos;.
            READ TABLE it_wdy_ui_element TRANSPORTING NO FIELDS
              WITH KEY element_name = &lt;wdy_ui_element&gt;-element_name
                       version = &apos;I&apos;.
            IF sy-subrc = 0.
              CONTINUE.
            ENDIF.
          ENDIF.
          &lt;wdy_ui_element&gt;-version = if_wdy_md_object=&gt;co_version_inactive.
          wdy_ui_element_node = xmldoc-&gt;create_element( &apos;wdy_ui_element&apos; ).
          setattributesfromstructure( node = wdy_ui_element_node structure = &lt;wdy_ui_element&gt; ).
          rc = view_definition_node-&gt;append_child( wdy_ui_element_node ).
        ENDLOOP.
      WHEN &apos;A&apos;.
        LOOP AT it_wdy_ui_element ASSIGNING &lt;wdy_ui_element&gt; WHERE version = &apos;A&apos;.
          &lt;wdy_ui_element&gt;-version = if_wdy_md_object=&gt;co_version_inactive.
          wdy_ui_element_node = xmldoc-&gt;create_element( &apos;wdy_ui_element&apos; ).
          setattributesfromstructure( node = wdy_ui_element_node structure = &lt;wdy_ui_element&gt; ).
          rc = view_definition_node-&gt;append_child( wdy_ui_element_node ).
        ENDLOOP.
    ENDCASE.
  ENDIF.

* copy WDY_UI_PROPERTY.
  DATA text TYPE string.
  DATA text_id TYPE wdy_md_translatable_text.
  DATA text_repository TYPE REF TO if_wdy_md_text_repository.
  text_repository = view-&gt;if_wdy_md_lockable_object~get_text_repository( ).
  DATA it_wdy_ui_property TYPE STANDARD TABLE OF wdy_ui_property.

  FIELD-SYMBOLS: &lt;wdy_ui_property&gt; TYPE wdy_ui_property.
  SELECT * FROM wdy_ui_property INTO TABLE it_wdy_ui_property
    WHERE component_name = definition-component_name
      AND view_name  = definition-view_name.
  IF sy-subrc = 0.
    DATA str TYPE string.
    DATA header TYPE sotr_head.
    DATA concept TYPE sotr_head-concept.
    CASE definition-version.
      WHEN &apos;I&apos;.
        LOOP AT it_wdy_ui_property ASSIGNING &lt;wdy_ui_property&gt; WHERE version &lt;&gt; &apos;D&apos;.
          IF &lt;wdy_ui_property&gt;-version = &apos;A&apos;.
            READ TABLE it_wdy_ui_property TRANSPORTING NO FIELDS
              WITH KEY element_name  = &lt;wdy_ui_property&gt;-element_name
                       property_name = &lt;wdy_ui_property&gt;-property_name
                       version = &apos;I&apos;.
            IF sy-subrc = 0.
              CONTINUE.
            ENDIF.
          ENDIF.
          &lt;wdy_ui_property&gt;-version = if_wdy_md_object=&gt;co_version_inactive.
          wdy_ui_property_node = xmldoc-&gt;create_element( &apos;wdy_ui_property&apos; ).
          setattributesfromstructure( node = wdy_ui_property_node structure = &lt;wdy_ui_property&gt; ).
          rc = view_definition_node-&gt;append_child( wdy_ui_property_node ).
          TRY.
              str = &lt;wdy_ui_property&gt;-property_value.
              text = text_repository-&gt;get_text( str ).
              rc = wdy_ui_property_node-&gt;set_attribute( name = &apos;PropText&apos; value = text ).
            CATCH cx_root.
          ENDTRY.
        ENDLOOP.
      WHEN &apos;A&apos;.
        LOOP AT it_wdy_ui_property ASSIGNING &lt;wdy_ui_property&gt; WHERE version = &apos;A&apos;.
          &lt;wdy_ui_property&gt;-version = if_wdy_md_object=&gt;co_version_inactive.
          wdy_ui_property_node = xmldoc-&gt;create_element( &apos;wdy_ui_property&apos; ).
          setattributesfromstructure( node = wdy_ui_property_node structure = &lt;wdy_ui_property&gt; ).
          rc = view_definition_node-&gt;append_child( wdy_ui_property_node ).
          TRY.
              str = &lt;wdy_ui_property&gt;-property_value.
              text = text_repository-&gt;get_text( str ).
              rc = wdy_ui_property_node-&gt;set_attribute( name = &apos;PropText&apos; value = text ).
            CATCH cx_root.
          ENDTRY.
        ENDLOOP.
    ENDCASE.
  ENDIF.

* copy WDY_VIEW_CNTR.
  DATA it_wdy_view_cntr TYPE STANDARD TABLE OF wdy_view_cntr.
  FIELD-SYMBOLS: &lt;wdy_view_cntr&gt; TYPE wdy_view_cntr.
  SELECT * FROM wdy_view_cntr INTO TABLE it_wdy_view_cntr
    WHERE component_name = definition-component_name
      AND view_name  = definition-view_name.
  IF sy-subrc = 0.
    CASE definition-version.
      WHEN &apos;I&apos;.
        LOOP AT it_wdy_view_cntr ASSIGNING &lt;wdy_view_cntr&gt; WHERE version &lt;&gt; &apos;D&apos;.
          IF &lt;wdy_view_cntr&gt;-version = &apos;A&apos;.
            READ TABLE it_wdy_view_cntr TRANSPORTING NO FIELDS
              WITH KEY container_name  = &lt;wdy_view_cntr&gt;-container_name
                       version = &apos;I&apos;.
            IF sy-subrc = 0.
              CONTINUE.
            ENDIF.
          ENDIF.
          &lt;wdy_view_cntr&gt;-version = if_wdy_md_object=&gt;co_version_inactive.
          wdy_view_cntr_node = xmldoc-&gt;create_element( &apos;wdy_view_cntr&apos; ).
          setattributesfromstructure( node = wdy_view_cntr_node structure = &lt;wdy_view_cntr&gt; ).
          rc = view_definition_node-&gt;append_child( wdy_view_cntr_node ).
        ENDLOOP.
      WHEN &apos;A&apos;.
        LOOP AT it_wdy_view_cntr ASSIGNING &lt;wdy_view_cntr&gt; WHERE version = &apos;A&apos;.
          &lt;wdy_view_cntr&gt;-version = if_wdy_md_object=&gt;co_version_inactive.
          wdy_view_cntr_node = xmldoc-&gt;create_element( &apos;wdy_view_cntr&apos; ).
          setattributesfromstructure( node = wdy_view_cntr_node structure = &lt;wdy_view_cntr&gt; ).
          rc = view_definition_node-&gt;append_child( wdy_view_cntr_node ).
        ENDLOOP.
    ENDCASE.
  ENDIF.


* copy wdy_view_cntrt
  DATA wdy_view_cntrt_table TYPE STANDARD TABLE OF wdy_view_cntrt.
  FIELD-SYMBOLS: &lt;wdy_view_cntrt&gt; TYPE wdy_view_cntrt.
  SELECT * FROM wdy_view_cntrt INTO TABLE wdy_view_cntrt_table
    WHERE component_name = definition-component_name
      AND view_name  = definition-view_name.
  LOOP AT wdy_view_cntrt_table ASSIGNING &lt;wdy_view_cntrt&gt;.
    wdy_view_cntrt_node = xmldoc-&gt;create_element( &apos;wdy_view_cntrt&apos; ).
    setattributesfromstructure( node = wdy_view_cntrt_node structure = &lt;wdy_view_cntrt&gt; ).
    rc = view_definition_node-&gt;append_child( wdy_view_cntrt_node ).
  ENDLOOP.

*  copy WDY_PLUG_PARAM.
  DATA it_wdy_plug_param TYPE STANDARD TABLE OF wdy_plug_param.
  FIELD-SYMBOLS: &lt;wdy_plug_param&gt; TYPE wdy_plug_param.
  SELECT * FROM wdy_plug_param INTO TABLE it_wdy_plug_param
    WHERE component_name = definition-component_name
      AND view_name  = definition-view_name.
  IF sy-subrc = 0.
    CASE definition-version.
      WHEN &apos;I&apos;.
        LOOP AT it_wdy_plug_param ASSIGNING &lt;wdy_plug_param&gt; WHERE version &lt;&gt; &apos;D&apos;.
          IF &lt;wdy_plug_param&gt;-version = &apos;A&apos;.
            READ TABLE it_wdy_plug_param TRANSPORTING NO FIELDS
              WITH KEY plug_name = &lt;wdy_plug_param&gt;-plug_name
                       parameter_name = &lt;wdy_plug_param&gt;-parameter_name
                       version = &apos;I&apos;.
            IF sy-subrc = 0.
              CONTINUE.
            ENDIF.
          ENDIF.
          &lt;wdy_plug_param&gt;-version = if_wdy_md_object=&gt;co_version_inactive.
          wdy_plug_param_node = xmldoc-&gt;create_element( &apos;wdy_plug_param&apos; ).
          setattributesfromstructure( node = wdy_plug_param_node structure = &lt;wdy_plug_param&gt; ).
          rc = view_definition_node-&gt;append_child( wdy_plug_param_node ).
        ENDLOOP.
      WHEN &apos;A&apos;.
        LOOP AT it_wdy_plug_param ASSIGNING &lt;wdy_plug_param&gt; WHERE version = &apos;A&apos;.
          &lt;wdy_plug_param&gt;-version = if_wdy_md_object=&gt;co_version_inactive.
          wdy_plug_param_node = xmldoc-&gt;create_element( &apos;wdy_plug_param&apos; ).
          setattributesfromstructure( node = wdy_plug_param_node structure = &lt;wdy_plug_param&gt; ).
          rc = view_definition_node-&gt;append_child( wdy_plug_param_node ).
        ENDLOOP.
    ENDCASE.
  ENDIF.

*  copy WDY_UI_CTX_BIND.
  DATA it_wdy_ui_ctx_bind TYPE STANDARD TABLE OF wdy_ui_ctx_bind.
  FIELD-SYMBOLS: &lt;wdy_ui_ctx_bind&gt; TYPE wdy_ui_ctx_bind.
  SELECT * FROM wdy_ui_ctx_bind INTO TABLE it_wdy_ui_ctx_bind
    WHERE component_name = definition-component_name
      AND view_name  = definition-view_name.
  IF sy-subrc = 0.
    CASE definition-version.
      WHEN &apos;I&apos;.
        LOOP AT it_wdy_ui_ctx_bind ASSIGNING &lt;wdy_ui_ctx_bind&gt; WHERE version &lt;&gt; &apos;D&apos;.
          IF &lt;wdy_ui_ctx_bind&gt;-version = &apos;A&apos;.
            READ TABLE it_wdy_ui_ctx_bind TRANSPORTING NO FIELDS
              WITH KEY binding_name = &lt;wdy_ui_ctx_bind&gt;-binding_name
                       element_name = &lt;wdy_ui_ctx_bind&gt;-element_name
                       version = &apos;I&apos;.
            IF sy-subrc = 0.
              CONTINUE.
            ENDIF.
          ENDIF.
          &lt;wdy_ui_ctx_bind&gt;-version = if_wdy_md_object=&gt;co_version_inactive.
          wdy_ui_ctx_bind_node = xmldoc-&gt;create_element( &apos;wdy_ui_ctx_bind&apos; ).
          setattributesfromstructure( node = wdy_ui_ctx_bind_node structure = &lt;wdy_ui_ctx_bind&gt; ).
          rc = view_definition_node-&gt;append_child( wdy_ui_ctx_bind_node ).
        ENDLOOP.
      WHEN &apos;A&apos;.
        LOOP AT it_wdy_ui_ctx_bind ASSIGNING &lt;wdy_ui_ctx_bind&gt; WHERE version = &apos;A&apos;.
          &lt;wdy_ui_ctx_bind&gt;-version = if_wdy_md_object=&gt;co_version_inactive.
          wdy_ui_ctx_bind_node = xmldoc-&gt;create_element( &apos;wdy_ui_ctx_bind&apos; ).
          setattributesfromstructure( node = wdy_ui_ctx_bind_node structure = &lt;wdy_ui_ctx_bind&gt; ).
          rc = view_definition_node-&gt;append_child( wdy_ui_ctx_bind_node ).
        ENDLOOP.
    ENDCASE.
  ENDIF.

*  copy WDY_UI_DDIC_BIND.
  DATA it_wdy_ui_ddic_bind TYPE STANDARD TABLE OF wdy_ui_ddic_bind.
  FIELD-SYMBOLS: &lt;wdy_ui_ddic_bind&gt; TYPE wdy_ui_ddic_bind.
  SELECT * FROM wdy_ui_ddic_bind INTO TABLE it_wdy_ui_ddic_bind
    WHERE component_name = definition-component_name
      AND view_name  = definition-view_name.
  IF sy-subrc = 0.
    CASE definition-version.
      WHEN &apos;I&apos;.
        LOOP AT it_wdy_ui_ddic_bind ASSIGNING &lt;wdy_ui_ddic_bind&gt; WHERE version &lt;&gt; &apos;D&apos;.
          IF &lt;wdy_ui_ddic_bind&gt;-version = &apos;A&apos;.
            READ TABLE it_wdy_ui_ddic_bind TRANSPORTING NO FIELDS
              WITH KEY binding_name = &lt;wdy_ui_ddic_bind&gt;-binding_name
                       element_name = &lt;wdy_ui_ddic_bind&gt;-element_name
                       version = &apos;I&apos;.
            IF sy-subrc = 0.
              CONTINUE.
            ENDIF.
          ENDIF.
          &lt;wdy_ui_ddic_bind&gt;-version = if_wdy_md_object=&gt;co_version_inactive.
          wdy_ui_ddic_bind_node = xmldoc-&gt;create_element( &apos;wdy_ui_ddic_bind&apos; ).
          setattributesfromstructure( node = wdy_ui_ddic_bind_node structure = &lt;wdy_ui_ddic_bind&gt; ).
          rc = view_definition_node-&gt;append_child( wdy_ui_ddic_bind_node ).
        ENDLOOP.
      WHEN &apos;A&apos;.
        LOOP AT it_wdy_ui_ddic_bind ASSIGNING &lt;wdy_ui_ddic_bind&gt; WHERE version = &apos;A&apos;.
          &lt;wdy_ui_ddic_bind&gt;-version = if_wdy_md_object=&gt;co_version_inactive.
          wdy_ui_ddic_bind_node = xmldoc-&gt;create_element( &apos;wdy_ui_ddic_bind&apos; ).
          setattributesfromstructure( node = wdy_ui_ddic_bind_node structure = &lt;wdy_ui_ddic_bind&gt; ).
          rc = view_definition_node-&gt;append_child( wdy_ui_ddic_bind_node ).
        ENDLOOP.
    ENDCASE.
  ENDIF.

*  copy WDY_UI_EVT_BIND.
  DATA it_wdy_ui_evt_bind TYPE STANDARD TABLE OF wdy_ui_evt_bind.
  FIELD-SYMBOLS: &lt;wdy_ui_evt_bind&gt; TYPE wdy_ui_evt_bind.
  SELECT * FROM wdy_ui_evt_bind INTO TABLE it_wdy_ui_evt_bind
    WHERE component_name = definition-component_name
      AND view_name  = definition-view_name.
  IF sy-subrc = 0.
    CASE definition-version.
      WHEN &apos;I&apos;.
        LOOP AT it_wdy_ui_evt_bind ASSIGNING &lt;wdy_ui_evt_bind&gt; WHERE version &lt;&gt; &apos;D&apos;.
          IF &lt;wdy_ui_evt_bind&gt;-version = &apos;A&apos;.
            READ TABLE it_wdy_ui_evt_bind TRANSPORTING NO FIELDS
              WITH KEY binding_name = &lt;wdy_ui_evt_bind&gt;-binding_name
                       element_name = &lt;wdy_ui_evt_bind&gt;-element_name
                       version = &apos;I&apos;.
            IF sy-subrc = 0.
              CONTINUE.
            ENDIF.
          ENDIF.
          &lt;wdy_ui_evt_bind&gt;-version = if_wdy_md_object=&gt;co_version_inactive.
          wdy_ui_evt_bind_node = xmldoc-&gt;create_element( &apos;wdy_ui_evt_bind&apos; ).
          setattributesfromstructure( node = wdy_ui_evt_bind_node structure = &lt;wdy_ui_evt_bind&gt; ).
          rc = view_definition_node-&gt;append_child( wdy_ui_evt_bind_node ).
        ENDLOOP.
      WHEN &apos;A&apos;.
        LOOP AT it_wdy_ui_evt_bind ASSIGNING &lt;wdy_ui_evt_bind&gt; WHERE version = &apos;A&apos;.
          &lt;wdy_ui_evt_bind&gt;-version = if_wdy_md_object=&gt;co_version_inactive.
          wdy_ui_evt_bind_node = xmldoc-&gt;create_element( &apos;wdy_ui_evt_bind&apos; ).
          setattributesfromstructure( node = wdy_ui_evt_bind_node structure = &lt;wdy_ui_evt_bind&gt; ).
          rc = view_definition_node-&gt;append_child( wdy_ui_evt_bind_node ).
        ENDLOOP.
    ENDCASE.
  ENDIF.

  IF definition-type = &apos;CL_WDY_MD_WINDOW&apos;.                  &quot;#EC NOTEXT
*   copy WDY_NAV_LINK.
    DATA it_wdy_nav_link TYPE STANDARD TABLE OF wdy_nav_link.
    FIELD-SYMBOLS: &lt;wdy_nav_link&gt; TYPE wdy_nav_link.
    SELECT * FROM wdy_nav_link INTO TABLE it_wdy_nav_link
      WHERE component_name = definition-component_name
        AND window_name  = definition-view_name.
    IF sy-subrc = 0.
      CASE definition-version.
        WHEN &apos;I&apos;.
          LOOP AT it_wdy_nav_link ASSIGNING &lt;wdy_nav_link&gt; WHERE version &lt;&gt; &apos;D&apos;.
            IF &lt;wdy_nav_link&gt;-version = &apos;A&apos;.
              READ TABLE it_wdy_nav_link TRANSPORTING NO FIELDS
                WITH KEY nav_link_name = &lt;wdy_nav_link&gt;-nav_link_name
                         version = &apos;I&apos;.
              IF sy-subrc = 0.
                CONTINUE.
              ENDIF.
            ENDIF.
            &lt;wdy_nav_link&gt;-version = if_wdy_md_object=&gt;co_version_inactive.
            wdy_nav_link_node = xmldoc-&gt;create_element( &apos;wdy_nav_link&apos; ).
            setattributesfromstructure( node = wdy_nav_link_node structure = &lt;wdy_nav_link&gt; ).
            rc = view_definition_node-&gt;append_child( wdy_nav_link_node ).
          ENDLOOP.
        WHEN &apos;A&apos;.
          LOOP AT it_wdy_nav_link ASSIGNING &lt;wdy_nav_link&gt; WHERE version = &apos;A&apos;.
            &lt;wdy_nav_link&gt;-version = if_wdy_md_object=&gt;co_version_inactive.
            wdy_nav_link_node = xmldoc-&gt;create_element( &apos;wdy_nav_link&apos; ).
            setattributesfromstructure( node = wdy_nav_link_node structure = &lt;wdy_nav_link&gt; ).
            rc = view_definition_node-&gt;append_child( wdy_nav_link_node ).
          ENDLOOP.
      ENDCASE.
    ENDIF.

*   copy WDY_NAV_TARGREF.
    DATA it_wdy_nav_targref TYPE STANDARD TABLE OF wdy_nav_targref.
    FIELD-SYMBOLS: &lt;wdy_nav_targref&gt; TYPE wdy_nav_targref.
    SELECT * FROM wdy_nav_targref INTO TABLE it_wdy_nav_targref
      WHERE component_name = definition-component_name
        AND window_name  = definition-view_name.
    IF sy-subrc = 0.
      CASE definition-version.
        WHEN &apos;I&apos;.
          LOOP AT it_wdy_nav_targref ASSIGNING &lt;wdy_nav_targref&gt; WHERE version &lt;&gt; &apos;D&apos;.
            IF &lt;wdy_nav_targref&gt;-version = &apos;A&apos;.
              READ TABLE it_wdy_nav_targref TRANSPORTING NO FIELDS
                WITH KEY nav_link_name = &lt;wdy_nav_targref&gt;-nav_link_name
                         nav_targref_name = &lt;wdy_nav_targref&gt;-nav_targref_name
                         version = &apos;I&apos;.
              IF sy-subrc = 0.
                CONTINUE.
              ENDIF.
            ENDIF.
            &lt;wdy_nav_targref&gt;-version = if_wdy_md_object=&gt;co_version_inactive.
            wdy_nav_targref_node = xmldoc-&gt;create_element( &apos;wdy_nav_targref&apos; ).
            setattributesfromstructure( node = wdy_nav_targref_node structure = &lt;wdy_nav_targref&gt; ).
            rc = view_definition_node-&gt;append_child( wdy_nav_targref_node ).
          ENDLOOP.
        WHEN &apos;A&apos;.
          LOOP AT it_wdy_nav_targref ASSIGNING &lt;wdy_nav_targref&gt; WHERE version = &apos;A&apos;.
            &lt;wdy_nav_targref&gt;-version = if_wdy_md_object=&gt;co_version_inactive.
            wdy_nav_targref_node = xmldoc-&gt;create_element( &apos;wdy_nav_targref&apos; ).
            setattributesfromstructure( node = wdy_nav_targref_node structure = &lt;wdy_nav_targref&gt; ).
            rc = view_definition_node-&gt;append_child( wdy_nav_targref_node ).
          ENDLOOP.
      ENDCASE.
    ENDIF.

*   copy WDY_VSH_NODE.
    DATA it_wdy_vsh_node TYPE STANDARD TABLE OF wdy_vsh_node.
    FIELD-SYMBOLS: &lt;wdy_vsh_node&gt; TYPE wdy_vsh_node.
    SELECT * FROM wdy_vsh_node INTO TABLE it_wdy_vsh_node
      WHERE component_name = definition-component_name
        AND window_name  = definition-view_name.
    IF sy-subrc = 0.
      CASE definition-version.
        WHEN &apos;I&apos;.
          LOOP AT it_wdy_vsh_node ASSIGNING &lt;wdy_vsh_node&gt; WHERE version &lt;&gt; &apos;D&apos;.
            IF &lt;wdy_vsh_node&gt;-version = &apos;A&apos;.
              READ TABLE it_wdy_vsh_node TRANSPORTING NO FIELDS
                WITH KEY vsh_node_name = &lt;wdy_vsh_node&gt;-vsh_node_name
                         version = &apos;I&apos;.
              IF sy-subrc = 0.
                CONTINUE.
              ENDIF.
            ENDIF.
            &lt;wdy_vsh_node&gt;-version = if_wdy_md_object=&gt;co_version_inactive.
            wdy_vsh_node_node = xmldoc-&gt;create_element( &apos;wdy_vsh_node&apos; ).
            setattributesfromstructure( node = wdy_vsh_node_node structure = &lt;wdy_vsh_node&gt; ).
            rc = view_definition_node-&gt;append_child( wdy_vsh_node_node ).
          ENDLOOP.
        WHEN &apos;A&apos;.
          LOOP AT it_wdy_vsh_node ASSIGNING &lt;wdy_vsh_node&gt; WHERE version = &apos;A&apos;.
            &lt;wdy_vsh_node&gt;-version = if_wdy_md_object=&gt;co_version_inactive.
            wdy_vsh_node_node = xmldoc-&gt;create_element( &apos;wdy_vsh_node&apos; ).
            setattributesfromstructure( node = wdy_vsh_node_node structure = &lt;wdy_vsh_node&gt; ).
            rc = view_definition_node-&gt;append_child( wdy_vsh_node_node ).
          ENDLOOP.
      ENDCASE.
    ENDIF.

*   copy WDY_VSH_PHOLDER.
    DATA it_wdy_vsh_pholder TYPE STANDARD TABLE OF wdy_vsh_pholder.
    FIELD-SYMBOLS: &lt;wdy_vsh_pholder&gt; TYPE wdy_vsh_pholder.
    SELECT * FROM wdy_vsh_pholder INTO TABLE it_wdy_vsh_pholder
      WHERE component_name = definition-component_name
        AND window_name  = definition-view_name.
    IF sy-subrc = 0.
      CASE definition-version.
        WHEN &apos;I&apos;.
          LOOP AT it_wdy_vsh_pholder ASSIGNING &lt;wdy_vsh_pholder&gt; WHERE version &lt;&gt; &apos;D&apos;.
            IF &lt;wdy_vsh_pholder&gt;-version = &apos;A&apos;.
              READ TABLE it_wdy_vsh_pholder TRANSPORTING NO FIELDS
                WITH KEY vsh_node_name = &lt;wdy_vsh_pholder&gt;-vsh_node_name
                         vsh_pholder_name = &lt;wdy_vsh_pholder&gt;-vsh_pholder_name
                         version = &apos;I&apos;.
              IF sy-subrc = 0.
                CONTINUE.
              ENDIF.
            ENDIF.
            &lt;wdy_vsh_pholder&gt;-version = if_wdy_md_object=&gt;co_version_inactive.
            wdy_vsh_pholder_node = xmldoc-&gt;create_element( &apos;wdy_vsh_pholder&apos; ).
            setattributesfromstructure( node = wdy_vsh_pholder_node structure = &lt;wdy_vsh_pholder&gt; ).
            rc = view_definition_node-&gt;append_child( wdy_vsh_pholder_node ).
          ENDLOOP.
        WHEN &apos;A&apos;.
          LOOP AT it_wdy_vsh_pholder ASSIGNING &lt;wdy_vsh_pholder&gt; WHERE version = &apos;A&apos;.
            &lt;wdy_vsh_pholder&gt;-version = if_wdy_md_object=&gt;co_version_inactive.
            wdy_vsh_pholder_node = xmldoc-&gt;create_element( &apos;wdy_vsh_pholder&apos; ).
            setattributesfromstructure( node = wdy_vsh_pholder_node structure = &lt;wdy_vsh_pholder&gt; ).
            rc = view_definition_node-&gt;append_child( wdy_vsh_pholder_node ).
          ENDLOOP.
      ENDCASE.
    ENDIF.

*   copy WDY_VS_PROPERTY.
    DATA it_wdy_vs_property TYPE STANDARD TABLE OF wdy_vs_property.
    FIELD-SYMBOLS: &lt;wdy_vs_property&gt; TYPE wdy_vs_property.
    SELECT * FROM wdy_vs_property INTO TABLE it_wdy_vs_property
      WHERE component_name = definition-component_name
        AND window_name  = definition-view_name.
    IF sy-subrc = 0.
      CASE definition-version.
        WHEN &apos;I&apos;.
          LOOP AT it_wdy_vs_property ASSIGNING &lt;wdy_vs_property&gt; WHERE version &lt;&gt; &apos;D&apos;.
            IF &lt;wdy_vs_property&gt;-version = &apos;A&apos;.
              READ TABLE it_wdy_vs_property TRANSPORTING NO FIELDS
                WITH KEY vsh_node_name = &lt;wdy_vs_property&gt;-vsh_node_name
                         vs_prop_def_name = &lt;wdy_vs_property&gt;-vs_prop_def_name
                         version = &apos;I&apos;.
              IF sy-subrc = 0.
                CONTINUE.
              ENDIF.
            ENDIF.
            &lt;wdy_vs_property&gt;-version = if_wdy_md_object=&gt;co_version_inactive.
            wdy_vs_property_node = xmldoc-&gt;create_element( &apos;wdy_vs_property&apos; ).
            setattributesfromstructure( node = wdy_vs_property_node structure = &lt;wdy_vs_property&gt; ).
            rc = view_definition_node-&gt;append_child( wdy_vs_property_node ).
          ENDLOOP.
        WHEN &apos;A&apos;.
          LOOP AT it_wdy_vs_property ASSIGNING &lt;wdy_vs_property&gt; WHERE version = &apos;A&apos;.
            &lt;wdy_vs_property&gt;-version = if_wdy_md_object=&gt;co_version_inactive.
            wdy_vs_property_node = xmldoc-&gt;create_element( &apos;wdy_vs_property&apos; ).
            setattributesfromstructure( node = wdy_vs_property_node structure = &lt;wdy_vs_property&gt; ).
            rc = view_definition_node-&gt;append_child( wdy_vs_property_node ).
          ENDLOOP.
      ENDCASE.
    ENDIF.

  ENDIF.

endmethod.</source>
  </method>
  <method CLSNAME="ZSAPLINK_WD_COMPONENT" CMPNAME="XML_TO_CONTROLLER" VERSION="1" LANGU="E" EXPOSURE="0" STATE="1" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" MTDNEWEXC="X" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZSAPLINK_WD_COMPONENT" CMPNAME="XML_TO_CONTROLLER" SCONAME="XML_NODE" VERSION="1" LANGU="E" DESCRIPT="IF_IXML_ELEMENT" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="3" TYPE="IF_IXML_ELEMENT"/>
   <parameter CLSNAME="ZSAPLINK_WD_COMPONENT" CMPNAME="XML_TO_CONTROLLER" SCONAME="CONTROLLER" VERSION="1" LANGU="E" DESCRIPT="Web Dynpro: Controller" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="3" TYPE="IF_WDY_MD_CONTROLLER"/>
   <exception CLSNAME="ZSAPLINK_WD_COMPONENT" CMPNAME="XML_TO_CONTROLLER" SCONAME="CX_WDY_MD_ENQUEUE_FAILURE" VERSION="1" LANGU="E" MTDTYPE="0" EDITORDER="1 "/>
   <exception CLSNAME="ZSAPLINK_WD_COMPONENT" CMPNAME="XML_TO_CONTROLLER" SCONAME="CX_WDY_MD_ALREADY_EXISTING" VERSION="1" LANGU="E" DESCRIPT="Web Dynpro : Objekt existiert bereits" MTDTYPE="0" EDITORDER="2 "/>
   <source>method XML_TO_CONTROLLER.
*xml nodes
  DATA definition TYPE wdy_controller.
  DATA rc TYPE i.
  DATA node        TYPE REF TO if_ixml_element.
  DATA filter      TYPE REF TO if_ixml_node_filter.
  DATA iterator    TYPE REF TO if_ixml_node_iterator.


  CALL METHOD getstructurefromattributes
    EXPORTING
      node            = xml_node
      preserveversion = abap_true
    CHANGING
      structure       = definition.

  DATA: controller_key TYPE wdy_controller_key,
*         controller TYPE REF TO if_wdy_md_controller,
         context_node TYPE REF TO if_wdy_md_context_node.

  controller_key-component_name = definition-component_name.
  controller_key-controller_name = definition-controller_name.

  CALL METHOD cl_wdy_md_controller=&gt;create
    EXPORTING
      component_name             = controller_key-component_name
      controller_name            = controller_key-controller_name
      suppress_access_permission = &apos;X&apos;
    RECEIVING
      controller                 = controller.

  controller-&gt;set_type( definition-controller_type ).
  controller-&gt;save_to_database( ).
  TRANSLATE controller_key TO UPPER CASE.                &quot;#EC TRANSLANG

  IF NOT definition-context IS INITIAL.
    UPDATE wdy_controller
      SET context = &apos;CONTEXT&apos;
      WHERE component_name  = controller_key-component_name
        AND controller_name = controller_key-controller_name
        AND version         = if_wdy_md_object=&gt;co_version_inactive.
    definition-context = &apos;CONTEXT&apos;.
  ENDIF.

* copy wdy_controllert
  DATA wdy_controllert_table TYPE STANDARD TABLE OF wdy_controllert.
  DATA wdy_controllert TYPE wdy_controllert.
  FREE: filter, iterator, node.
  filter = xml_node-&gt;create_filter_name( &apos;wdy_controllert&apos; ).
  iterator = xml_node-&gt;create_iterator_filtered( filter ).
  node ?= iterator-&gt;get_next( ).
  WHILE node IS NOT INITIAL.
    CALL METHOD getstructurefromattributes
      EXPORTING
        node            = node
        preserveversion = abap_true
      CHANGING
        structure       = wdy_controllert.
    APPEND wdy_controllert TO wdy_controllert_table.
    node ?= iterator-&gt;get_next( ).
  ENDWHILE.
  INSERT wdy_controllert FROM TABLE wdy_controllert_table.

* copy components
  DATA it_wdy_ctlr_compo TYPE STANDARD TABLE OF wdy_ctlr_compo.
  DATA wdy_ctlr_compo TYPE wdy_ctlr_compo.
  FREE: filter, iterator, node.
  filter = xml_node-&gt;create_filter_name( &apos;wdy_ctlr_compo&apos; ).
  iterator = xml_node-&gt;create_iterator_filtered( filter ).
  node ?= iterator-&gt;get_next( ).
  WHILE node IS NOT INITIAL.
    CALL METHOD getstructurefromattributes
      EXPORTING
        node            = node
        preserveversion = abap_true
      CHANGING
        structure       = wdy_ctlr_compo.
    APPEND wdy_ctlr_compo TO it_wdy_ctlr_compo.
    node ?= iterator-&gt;get_next( ).
  ENDWHILE.
  INSERT wdy_ctlr_compo FROM TABLE it_wdy_ctlr_compo.

* copy wdy_ctlr_compot
  DATA wdy_ctlr_compot_table TYPE STANDARD TABLE OF wdy_ctlr_compot.
  DATA wdy_ctlr_compot TYPE wdy_ctlr_compot.
  FREE: filter, iterator, node.
  filter = xml_node-&gt;create_filter_name( &apos;wdy_ctlr_compot&apos; ).
  iterator = xml_node-&gt;create_iterator_filtered( filter ).
  node ?= iterator-&gt;get_next( ).
  WHILE node IS NOT INITIAL.
    CALL METHOD getstructurefromattributes
      EXPORTING
        node            = node
        preserveversion = abap_true
      CHANGING
        structure       = wdy_ctlr_compot.
    APPEND wdy_ctlr_compot TO wdy_ctlr_compot_table.
    node ?= iterator-&gt;get_next( ).
  ENDWHILE.
  INSERT wdy_ctlr_compot FROM TABLE wdy_ctlr_compot_table.

* copy parameters
  DATA it_wdy_ctlr_param TYPE STANDARD TABLE OF wdy_ctlr_param.
  DATA wdy_ctlr_param TYPE wdy_ctlr_param.
  FREE: filter, iterator, node.
  filter = xml_node-&gt;create_filter_name( &apos;wdy_ctlr_param&apos; ).
  iterator = xml_node-&gt;create_iterator_filtered( filter ).
  node ?= iterator-&gt;get_next( ).
  WHILE node IS NOT INITIAL.
    CALL METHOD getstructurefromattributes
      EXPORTING
        node            = node
        preserveversion = abap_true
      CHANGING
        structure       = wdy_ctlr_param.
    APPEND wdy_ctlr_param TO it_wdy_ctlr_param.
    node ?= iterator-&gt;get_next( ).
  ENDWHILE.
  INSERT wdy_ctlr_param FROM TABLE it_wdy_ctlr_param.

* copy wdy_ctlr_paramt
  DATA wdy_ctlr_paramt_table TYPE STANDARD TABLE OF wdy_ctlr_paramt.
  DATA wdy_ctlr_paramt TYPE wdy_ctlr_paramt.
  FREE: filter, iterator, node.
  filter = xml_node-&gt;create_filter_name( &apos;wdy_ctlr_paramt&apos; ).
  iterator = xml_node-&gt;create_iterator_filtered( filter ).
  node ?= iterator-&gt;get_next( ).
  WHILE node IS NOT INITIAL.
    CALL METHOD getstructurefromattributes
      EXPORTING
        node            = node
        preserveversion = abap_true
      CHANGING
        structure       = wdy_ctlr_paramt.
    APPEND wdy_ctlr_paramt TO wdy_ctlr_paramt_table.
    node ?= iterator-&gt;get_next( ).
  ENDWHILE.
  INSERT wdy_ctlr_paramt FROM TABLE wdy_ctlr_paramt_table.

* copy controller usages
  DATA it_wdy_ctlr_usage TYPE STANDARD TABLE OF wdy_ctlr_usage.
  DATA wdy_ctlr_usage TYPE wdy_ctlr_usage.
  FREE: filter, iterator, node.
  filter = xml_node-&gt;create_filter_name( &apos;wdy_ctlr_usage&apos; ).
  iterator = xml_node-&gt;create_iterator_filtered( filter ).
  node ?= iterator-&gt;get_next( ).
  WHILE node IS NOT INITIAL.
    CALL METHOD getstructurefromattributes
      EXPORTING
        node            = node
        preserveversion = abap_true
      CHANGING
        structure       = wdy_ctlr_usage.
    APPEND wdy_ctlr_usage TO it_wdy_ctlr_usage.
    node ?= iterator-&gt;get_next( ).
  ENDWHILE.
  INSERT wdy_ctlr_usage FROM TABLE it_wdy_ctlr_usage.

* copy context nodes
  DATA it_wdy_ctx_node TYPE STANDARD TABLE OF wdy_ctx_node.
  DATA wdy_ctx_node TYPE wdy_ctx_node.
  FREE: filter, iterator, node.
  filter = xml_node-&gt;create_filter_name( &apos;wdy_ctx_node&apos; ).
  iterator = xml_node-&gt;create_iterator_filtered( filter ).
  node ?= iterator-&gt;get_next( ).
  WHILE node IS NOT INITIAL.
    CALL METHOD getstructurefromattributes
      EXPORTING
        node            = node
        preserveversion = abap_true
      CHANGING
        structure       = wdy_ctx_node.
    APPEND wdy_ctx_node TO it_wdy_ctx_node.
    node ?= iterator-&gt;get_next( ).
  ENDWHILE.
  INSERT wdy_ctx_node FROM TABLE it_wdy_ctx_node.

* copy context attributes
  DATA it_wdy_ctx_attrib TYPE STANDARD TABLE OF wdy_ctx_attrib.
  DATA wdy_ctx_attrib TYPE wdy_ctx_attrib.
  FREE: filter, iterator, node.
  filter = xml_node-&gt;create_filter_name( &apos;wdy_ctx_attrib&apos; ).
  iterator = xml_node-&gt;create_iterator_filtered( filter ).
  node ?= iterator-&gt;get_next( ).
  WHILE node IS NOT INITIAL.
    CALL METHOD getstructurefromattributes
      EXPORTING
        node            = node
        preserveversion = abap_true
      CHANGING
        structure       = wdy_ctx_attrib.
    APPEND wdy_ctx_attrib TO it_wdy_ctx_attrib.
    node ?= iterator-&gt;get_next( ).
  ENDWHILE.
  INSERT wdy_ctx_attrib FROM TABLE it_wdy_ctx_attrib.

* copy context mapping
  DATA it_wdy_ctx_mapping TYPE STANDARD TABLE OF wdy_ctx_mapping.
  DATA wdy_ctx_mapping TYPE wdy_ctx_mapping.
  FREE: filter, iterator, node.
  filter = xml_node-&gt;create_filter_name( &apos;wdy_ctx_mapping&apos; ).
  iterator = xml_node-&gt;create_iterator_filtered( filter ).
  node ?= iterator-&gt;get_next( ).
  WHILE node IS NOT INITIAL.
    CALL METHOD getstructurefromattributes
      EXPORTING
        node            = node
        preserveversion = abap_true
      CHANGING
        structure       = wdy_ctx_mapping.
    APPEND wdy_ctx_mapping TO it_wdy_ctx_mapping.
    node ?= iterator-&gt;get_next( ).
  ENDWHILE.
  INSERT wdy_ctx_mapping FROM TABLE it_wdy_ctx_mapping.

* if the controller is a configuration
  IF definition-controller_type = wdyn_ctlr_type_custom AND
     cl_wdy_md_component=&gt;get_config_controller_name( definition-component_name ) = definition-controller_name.
    DATA component TYPE REF TO cl_wdy_md_component.
    component ?= controller-&gt;if_wdy_md_object~get_parent( ).
    component-&gt;if_wdy_md_component~set_configuration_controller( controller ).
    component-&gt;save_to_db_definition_only( ).
  ENDIF.

* unlock
  controller-&gt;unlock( ).
  controller-&gt;reload( ).

endmethod.</source>
  </method>
  <method CLSNAME="ZSAPLINK_WD_COMPONENT" CMPNAME="XML_TO_VIEW" VERSION="1" LANGU="E" EXPOSURE="0" STATE="1" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" MTDNEWEXC="X" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZSAPLINK_WD_COMPONENT" CMPNAME="XML_TO_VIEW" SCONAME="XML_NODE" VERSION="1" LANGU="E" DESCRIPT="IF_IXML_ELEMENT" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="3" TYPE="IF_IXML_ELEMENT"/>
   <exception CLSNAME="ZSAPLINK_WD_COMPONENT" CMPNAME="XML_TO_VIEW" SCONAME="CX_WDY_MD_ENQUEUE_FAILURE" VERSION="1" LANGU="E" MTDTYPE="0" EDITORDER="1 "/>
   <source>METHOD xml_to_view.
*xml nodes
  DATA definition TYPE wdy_view.
  DATA rc TYPE i.
  DATA node        TYPE REF TO if_ixml_element.
  DATA filter      TYPE REF TO if_ixml_node_filter.
  DATA iterator    TYPE REF TO if_ixml_node_iterator.


  CALL METHOD getstructurefromattributes
    EXPORTING
      node            = xml_node
      preserveversion = abap_true
    CHANGING
      structure       = definition.

  DATA: view     TYPE REF TO if_wdy_md_view,
        abstract_view TYPE REF TO if_wdy_md_abstract_view,
        view_key TYPE wdy_md_view_key,
        window   TYPE REF TO cl_wdy_md_window. &quot;if_wdy_md_window.
  view_key-component_name = definition-component_name.
  view_key-view_name = definition-view_name.



  CALL METHOD cl_wdy_md_abstract_view=&gt;create
    EXPORTING
      component_name             = view_key-component_name
      view_name                  = view_key-view_name
      suppress_access_permission = &apos;X&apos;
      type                       = definition-type
    RECEIVING
      view                       = abstract_view.

  abstract_view-&gt;set_type( definition-view_type ).
  abstract_view-&gt;set_lifespan( definition-lifespan ).

  TRY.
      view ?= abstract_view.
      view-&gt;create_root_container( ).
    CATCH cx_sy_move_cast_error.
  ENDTRY.


  TRY.
      DATA def_root_node TYPE REF TO if_wdy_md_vset_hierarchy_node.
      DATA title TYPE wdy_md_translatable_text.
      window ?= abstract_view.
      title = definition-title.
      IF definition-def_root_node IS NOT INITIAL.
        def_root_node = window-&gt;find_viewset_hierarchy_node( name = definition-def_root_node ).
        IF def_root_node IS INITIAL.
          def_root_node = window-&gt;if_wdy_md_window~create_root_node( name = definition-def_root_node
                                                                      type = &apos;CL_WDY_MD_VIEW_USAGE&apos; ).
        ENDIF.
        window-&gt;if_wdy_md_window~set_default_root_node( def_root_node ).
      ENDIF.

      IF NOT title IS INITIAL.
        window-&gt;if_wdy_md_window~set_title( title = title ).
      ENDIF.
    CATCH cx_sy_move_cast_error.
  ENDTRY.

  abstract_view-&gt;save_to_database( ).
  TRANSLATE view_key TO UPPER CASE.                      &quot;#EC TRANSLANG

* copy wdy_viewt
  DATA wdy_viewt_table TYPE STANDARD TABLE OF wdy_viewt.
  DATA wdy_viewt TYPE wdy_viewt.
  FREE: filter, iterator, node.
  filter = xml_node-&gt;create_filter_name( &apos;wdy_viewt&apos; ).
  iterator = xml_node-&gt;create_iterator_filtered( filter ).
  node ?= iterator-&gt;get_next( ).
  WHILE node IS NOT INITIAL.
    CALL METHOD getstructurefromattributes
      EXPORTING
        node            = node
        preserveversion = abap_true
      CHANGING
        structure       = wdy_viewt.
    APPEND wdy_viewt TO wdy_viewt_table.
    node ?= iterator-&gt;get_next( ).
  ENDWHILE.
  INSERT wdy_viewt FROM TABLE wdy_viewt_table.

* copy wdy_iobound_plug.
  DATA it_wdy_iobound_plug TYPE STANDARD TABLE OF wdy_iobound_plug.
  DATA wdy_iobound_plug TYPE wdy_iobound_plug.
  FREE: filter, iterator, node.
  filter = xml_node-&gt;create_filter_name( &apos;wdy_iobound_plug&apos; ).
  iterator = xml_node-&gt;create_iterator_filtered( filter ).
  node ?= iterator-&gt;get_next( ).
  WHILE node IS NOT INITIAL.
    CALL METHOD getstructurefromattributes
      EXPORTING
        node            = node
        preserveversion = abap_true
      CHANGING
        structure       = wdy_iobound_plug.
    APPEND wdy_iobound_plug TO it_wdy_iobound_plug.
    node ?= iterator-&gt;get_next( ).
  ENDWHILE.
  MODIFY wdy_iobound_plug FROM TABLE it_wdy_iobound_plug.

* copy wdy_iobound_plgt
  DATA it_wdy_iobound_plgt TYPE STANDARD TABLE OF wdy_iobound_plgt.
  DATA plgt TYPE wdy_iobound_plgt.
  FREE: filter, iterator, node.
  filter = xml_node-&gt;create_filter_name( &apos;wdy_iobound_plgt&apos; ).
  iterator = xml_node-&gt;create_iterator_filtered( filter ).
  node ?= iterator-&gt;get_next( ).
  WHILE node IS NOT INITIAL.
    CALL METHOD getstructurefromattributes
      EXPORTING
        node            = node
        preserveversion = abap_true
      CHANGING
        structure       = plgt.
    APPEND plgt TO it_wdy_iobound_plgt.
    node ?= iterator-&gt;get_next( ).
  ENDWHILE.
  MODIFY wdy_iobound_plgt FROM TABLE it_wdy_iobound_plgt.


* copy WDY_UI_ELEMENT.
  DATA it_wdy_ui_element TYPE STANDARD TABLE OF wdy_ui_element.
  DATA wdy_ui_element TYPE wdy_ui_element.
  FREE: filter, iterator, node.
  filter = xml_node-&gt;create_filter_name( &apos;wdy_ui_element&apos; ).
  iterator = xml_node-&gt;create_iterator_filtered( filter ).
  node ?= iterator-&gt;get_next( ).
  WHILE node IS NOT INITIAL.
    CALL METHOD getstructurefromattributes
      EXPORTING
        node            = node
        preserveversion = abap_true
      CHANGING
        structure       = wdy_ui_element.
    APPEND wdy_ui_element TO it_wdy_ui_element.
    node ?= iterator-&gt;get_next( ).
  ENDWHILE.
  MODIFY wdy_ui_element FROM TABLE it_wdy_ui_element.

* copy WDY_UI_PROPERTY.
  DATA text_repository_of_copy TYPE REF TO if_wdy_md_text_repository.
  DATA text TYPE string.
  DATA text_id TYPE wdy_md_translatable_text.
  DATA str TYPE string.
  DATA header TYPE sotr_head.
  DATA concept TYPE sotr_head-concept.
  text_repository_of_copy ?= abstract_view-&gt;if_wdy_md_lockable_object~get_text_repository( ).
  DATA it_wdy_ui_property TYPE STANDARD TABLE OF wdy_ui_property.
  DATA wdy_ui_property TYPE wdy_ui_property.
  FREE: filter, iterator, node.
  filter = xml_node-&gt;create_filter_name( &apos;wdy_ui_property&apos; ).
  iterator = xml_node-&gt;create_iterator_filtered( filter ).
  node ?= iterator-&gt;get_next( ).
  WHILE node IS NOT INITIAL.
    CALL METHOD getstructurefromattributes
      EXPORTING
        node            = node
        preserveversion = abap_true
      CHANGING
        structure       = wdy_ui_property.
    TRY.
        str = wdy_ui_property-property_value.
        text = text_repository_of_copy-&gt;get_text( str ).
        IF NOT text IS INITIAL.
*               check if the guid corresponds to an otr alias, in that case DO NOT create a new one
          concept = str.
          CALL FUNCTION &apos;SOTR_GET_CONCEPT&apos;
            EXPORTING
              concept = concept
            IMPORTING
              header  = header.
          IF header-alias_name IS INITIAL.
            wdy_ui_property-property_value = text_repository_of_copy-&gt;create_text( text ).
          ENDIF.
        ENDIF.
      CATCH cx_wb_text_not_existing.
        CLEAR str.
        str = node-&gt;get_attribute( name = &apos;PropText&apos; ).
        IF str IS NOT INITIAL.
          wdy_ui_property-property_value = text_repository_of_copy-&gt;create_text( str ).
        ENDIF.
      CATCH cx_wb_text_create_exception.
        CLEAR wdy_ui_property-property_value.
    ENDTRY.
    APPEND wdy_ui_property TO it_wdy_ui_property.
    node ?= iterator-&gt;get_next( ).
  ENDWHILE.
  MODIFY wdy_ui_property FROM TABLE it_wdy_ui_property.

* copy WDY_VIEW_CNTR.
  DATA it_wdy_view_cntr TYPE STANDARD TABLE OF wdy_view_cntr.
  DATA wdy_view_cntr TYPE wdy_view_cntr.
  FREE: filter, iterator, node.
  filter = xml_node-&gt;create_filter_name( &apos;wdy_view_cntr&apos; ).
  iterator = xml_node-&gt;create_iterator_filtered( filter ).
  node ?= iterator-&gt;get_next( ).
  WHILE node IS NOT INITIAL.
    CALL METHOD getstructurefromattributes
      EXPORTING
        node            = node
        preserveversion = abap_true
      CHANGING
        structure       = wdy_view_cntr.
    APPEND wdy_view_cntr TO it_wdy_view_cntr.
    node ?= iterator-&gt;get_next( ).
  ENDWHILE.
  MODIFY wdy_view_cntr FROM TABLE it_wdy_view_cntr.

* copy wdy_view_cntrt
  DATA wdy_view_cntrt_table TYPE STANDARD TABLE OF wdy_view_cntrt.
  DATA wdy_view_cntrt TYPE wdy_view_cntrt.
  FREE: filter, iterator, node.
  filter = xml_node-&gt;create_filter_name( &apos;wdy_view_cntrt&apos; ).
  iterator = xml_node-&gt;create_iterator_filtered( filter ).
  node ?= iterator-&gt;get_next( ).
  WHILE node IS NOT INITIAL.
    CALL METHOD getstructurefromattributes
      EXPORTING
        node            = node
        preserveversion = abap_true
      CHANGING
        structure       = wdy_view_cntrt.
    APPEND wdy_view_cntrt TO wdy_view_cntrt_table.
    node ?= iterator-&gt;get_next( ).
  ENDWHILE.
  INSERT wdy_view_cntrt FROM TABLE wdy_view_cntrt_table.

*  copy WDY_PLUG_PARAM.
  DATA it_wdy_plug_param TYPE STANDARD TABLE OF wdy_plug_param.
  DATA wdy_plug_param TYPE wdy_plug_param.
  FREE: filter, iterator, node.
  filter = xml_node-&gt;create_filter_name( &apos;wdy_plug_param&apos; ).
  iterator = xml_node-&gt;create_iterator_filtered( filter ).
  node ?= iterator-&gt;get_next( ).
  WHILE node IS NOT INITIAL.
    CALL METHOD getstructurefromattributes
      EXPORTING
        node            = node
        preserveversion = abap_true
      CHANGING
        structure       = wdy_plug_param.
    APPEND wdy_plug_param TO it_wdy_plug_param.
    node ?= iterator-&gt;get_next( ).
  ENDWHILE.
  MODIFY wdy_plug_param FROM TABLE it_wdy_plug_param.

*  copy WDY_UI_CTX_BIND.
  DATA it_wdy_ui_ctx_bind TYPE STANDARD TABLE OF wdy_ui_ctx_bind.
  DATA wdy_ui_ctx_bind TYPE wdy_ui_ctx_bind.
  FREE: filter, iterator, node.
  filter = xml_node-&gt;create_filter_name( &apos;wdy_ui_ctx_bind&apos; ).
  iterator = xml_node-&gt;create_iterator_filtered( filter ).
  node ?= iterator-&gt;get_next( ).
  WHILE node IS NOT INITIAL.
    CALL METHOD getstructurefromattributes
      EXPORTING
        node            = node
        preserveversion = abap_true
      CHANGING
        structure       = wdy_ui_ctx_bind.
    APPEND wdy_ui_ctx_bind TO it_wdy_ui_ctx_bind.
    node ?= iterator-&gt;get_next( ).
  ENDWHILE.
  MODIFY wdy_ui_ctx_bind FROM TABLE it_wdy_ui_ctx_bind.

*  copy WDY_UI_DDIC_BIND.
  DATA it_wdy_ui_ddic_bind TYPE STANDARD TABLE OF wdy_ui_ddic_bind.
  DATA wdy_ui_ddic_bind TYPE wdy_ui_ddic_bind.
  FREE: filter, iterator, node.
  filter = xml_node-&gt;create_filter_name( &apos;wdy_ui_ddic_bind&apos; ).
  iterator = xml_node-&gt;create_iterator_filtered( filter ).
  node ?= iterator-&gt;get_next( ).
  WHILE node IS NOT INITIAL.
    CALL METHOD getstructurefromattributes
      EXPORTING
        node            = node
        preserveversion = abap_true
      CHANGING
        structure       = wdy_ui_ddic_bind.
    APPEND wdy_ui_ddic_bind TO it_wdy_ui_ddic_bind.
    node ?= iterator-&gt;get_next( ).
  ENDWHILE.
  MODIFY wdy_ui_ddic_bind FROM TABLE it_wdy_ui_ddic_bind.

*  copy WDY_UI_EVT_BIND.
  DATA it_wdy_ui_evt_bind TYPE STANDARD TABLE OF wdy_ui_evt_bind.
  DATA wdy_ui_evt_bind TYPE wdy_ui_evt_bind.
  FREE: filter, iterator, node.
  filter = xml_node-&gt;create_filter_name( &apos;wdy_ui_evt_bind&apos; ).
  iterator = xml_node-&gt;create_iterator_filtered( filter ).
  node ?= iterator-&gt;get_next( ).
  WHILE node IS NOT INITIAL.
    CALL METHOD getstructurefromattributes
      EXPORTING
        node            = node
        preserveversion = abap_true
      CHANGING
        structure       = wdy_ui_evt_bind.
    APPEND wdy_ui_evt_bind TO it_wdy_ui_evt_bind.
    node ?= iterator-&gt;get_next( ).
  ENDWHILE.
  MODIFY wdy_ui_evt_bind FROM TABLE it_wdy_ui_evt_bind.

  IF definition-type = &apos;CL_WDY_MD_WINDOW&apos;.                  &quot;#EC NOTEXT
*   copy WDY_NAV_LINK.
    DATA it_wdy_nav_link TYPE STANDARD TABLE OF wdy_nav_link.
    DATA wdy_nav_link TYPE wdy_nav_link.
    FREE: filter, iterator, node.
    filter = xml_node-&gt;create_filter_name( &apos;wdy_nav_link&apos; ).
    iterator = xml_node-&gt;create_iterator_filtered( filter ).
    node ?= iterator-&gt;get_next( ).
    WHILE node IS NOT INITIAL.
      CALL METHOD getstructurefromattributes
        EXPORTING
          node            = node
          preserveversion = abap_true
        CHANGING
          structure       = wdy_nav_link.
      APPEND wdy_nav_link TO it_wdy_nav_link.
      node ?= iterator-&gt;get_next( ).
    ENDWHILE.
    MODIFY wdy_nav_link FROM TABLE it_wdy_nav_link.

*   copy WDY_NAV_TARGREF.
    DATA it_wdy_nav_targref TYPE STANDARD TABLE OF wdy_nav_targref.
    DATA wdy_nav_targref TYPE wdy_nav_targref.
    FREE: filter, iterator, node.
    filter = xml_node-&gt;create_filter_name( &apos;wdy_nav_targref&apos; ).
    iterator = xml_node-&gt;create_iterator_filtered( filter ).
    node ?= iterator-&gt;get_next( ).
    WHILE node IS NOT INITIAL.
      CALL METHOD getstructurefromattributes
        EXPORTING
          node            = node
          preserveversion = abap_true
        CHANGING
          structure       = wdy_nav_targref.
      APPEND wdy_nav_targref TO it_wdy_nav_targref.
      node ?= iterator-&gt;get_next( ).
    ENDWHILE.
    MODIFY wdy_nav_targref FROM TABLE it_wdy_nav_targref.

*   copy WDY_VSH_NODE.
    DATA it_wdy_vsh_node TYPE STANDARD TABLE OF wdy_vsh_node.
    DATA wdy_vsh_node TYPE wdy_vsh_node.
    FREE: filter, iterator, node.
    filter = xml_node-&gt;create_filter_name( &apos;wdy_vsh_node&apos; ).
    iterator = xml_node-&gt;create_iterator_filtered( filter ).
    node ?= iterator-&gt;get_next( ).
    WHILE node IS NOT INITIAL.
      CALL METHOD getstructurefromattributes
        EXPORTING
          node            = node
          preserveversion = abap_true
        CHANGING
          structure       = wdy_vsh_node.
      APPEND wdy_vsh_node TO it_wdy_vsh_node.
      node ?= iterator-&gt;get_next( ).
    ENDWHILE.
    MODIFY wdy_vsh_node FROM TABLE it_wdy_vsh_node.

*   copy WDY_VSH_PHOLDER.
    DATA it_wdy_vsh_pholder TYPE STANDARD TABLE OF wdy_vsh_pholder.
    DATA wdy_vsh_pholder TYPE wdy_vsh_pholder.
    FREE: filter, iterator, node.
    filter = xml_node-&gt;create_filter_name( &apos;wdy_vsh_pholder&apos; ).
    iterator = xml_node-&gt;create_iterator_filtered( filter ).
    node ?= iterator-&gt;get_next( ).
    WHILE node IS NOT INITIAL.
      CALL METHOD getstructurefromattributes
        EXPORTING
          node            = node
          preserveversion = abap_true
        CHANGING
          structure       = wdy_vsh_pholder.
      APPEND wdy_vsh_pholder TO it_wdy_vsh_pholder.
      node ?= iterator-&gt;get_next( ).
    ENDWHILE.
    MODIFY wdy_vsh_pholder FROM TABLE it_wdy_vsh_pholder.

*   copy WDY_VS_PROPERTY.
    DATA it_wdy_vs_property TYPE STANDARD TABLE OF wdy_vs_property.
    DATA wdy_vs_property TYPE wdy_vs_property.
    FREE: filter, iterator, node.
    filter = xml_node-&gt;create_filter_name( &apos;wdy_vs_property&apos; ).
    iterator = xml_node-&gt;create_iterator_filtered( filter ).
    node ?= iterator-&gt;get_next( ).
    WHILE node IS NOT INITIAL.
      CALL METHOD getstructurefromattributes
        EXPORTING
          node            = node
          preserveversion = abap_true
        CHANGING
          structure       = wdy_vs_property.
      APPEND wdy_vs_property TO it_wdy_vs_property.
      node ?= iterator-&gt;get_next( ).
    ENDWHILE.
    MODIFY wdy_vs_property FROM TABLE it_wdy_vs_property.

  ENDIF.

  abstract_view-&gt;unlock( ).
  abstract_view-&gt;reload( ).

  TRY.
* copy controllers of component
      DATA  controller TYPE REF TO if_wdy_md_controller.
      FREE: filter, iterator, node.
      filter = xml_node-&gt;create_filter_name( &apos;controller_definition&apos; ).
      iterator = xml_node-&gt;create_iterator_filtered( filter ).
      node ?= iterator-&gt;get_next( ).
      WHILE node IS NOT INITIAL.
        TRY.
            controller = me-&gt;xml_to_controller(
                xml_node = node ).
            node ?= iterator-&gt;get_next( ).
            abstract_view-&gt;set_view_controller( controller ).
          CATCH cx_wdy_md_already_existing.
            node ?= iterator-&gt;get_next( ).
        ENDTRY.
      ENDWHILE.
      abstract_view-&gt;if_wdy_md_lockable_object~save_to_database( ).
    CATCH cx_wdy_md_already_existing.
  ENDTRY.

ENDMETHOD.</source>
  </method>
 </CLAS>
 <CLAS CLSNAME="ZSAPLINK_WD_CONFIG_APPL" VERSION="1" LANGU="E" DESCRIPT="SAPlink - Web Dynpro ABAP Application Configuration" CATEGORY="00" EXPOSURE="2" STATE="1" RELEASE="0" CLSFINAL="X" CLSCCINCL="X" FIXPT="X" UNICODE="X" CLSBCCAT="00" DURATION_TYPE="0 " RISK_LEVEL="0 " REFCLSNAME="ZSAPLINK">
  <localImplementation>*&quot;* local class implementation for public class
*&quot;* use this source file for the implementation part of
*&quot;* local helper classes</localImplementation>
  <localTypes>*&quot;* use this source file for any type declarations (class
*&quot;* definitions, interfaces or data types) you need for method
*&quot;* implementation or private method&apos;s signature</localTypes>
  <localMacros>*&quot;* use this source file for any macro definitions you need
*&quot;* in the implementation part of the class</localMacros>
  <typeUsage CLSNAME="ZSAPLINK_WD_CONFIG_APPL" TYPEGROUP="WDYN" VERSION="1" TPUTYPE="0" EXPLICIT="X"/>
  <typeUsage CLSNAME="ZSAPLINK_WD_CONFIG_APPL" TYPEGROUP="WDYWB" VERSION="1" TPUTYPE="0" EXPLICIT="X"/>
  <forwardDeclaration>WDYN</forwardDeclaration>
  <forwardDeclaration>WDYWB</forwardDeclaration>
  <inheritance CLSNAME="ZSAPLINK_WD_CONFIG_APPL" REFCLSNAME="ZSAPLINK" VERSION="1" STATE="1">
   <redefinition CLSNAME="ZSAPLINK_WD_CONFIG_APPL" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="CHECKEXISTS" EXPOSURE="2"/>
   <redefinition CLSNAME="ZSAPLINK_WD_CONFIG_APPL" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="CREATEIXMLDOCFROMOBJECT" EXPOSURE="2"/>
   <redefinition CLSNAME="ZSAPLINK_WD_CONFIG_APPL" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="CREATEOBJECTFROMIXMLDOC" EXPOSURE="2"/>
   <redefinition CLSNAME="ZSAPLINK_WD_CONFIG_APPL" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="DELETEOBJECT" EXPOSURE="1"/>
   <redefinition CLSNAME="ZSAPLINK_WD_CONFIG_APPL" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="GETOBJECTTYPE" EXPOSURE="1"/>
  </inheritance>
  <method CLSNAME="ZSAPLINK" CMPNAME="CHECKEXISTS" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/
METHOD CHECKEXISTS.



  exists = abap_true.

  DATA: config_id TYPE WDY_CONFIG_ID.
  config_id = objname.
  TRANSLATE config_id TO UPPER CASE.

  SELECT SINGLE config_id FROM wdy_config_appl INTO config_id
    WHERE config_id = config_id.
  IF sy-subrc NE 0.
    CLEAR exists.
  ENDIF.


ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZSAPLINK" CMPNAME="CREATEIXMLDOCFROMOBJECT" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/
METHOD createixmldocfromobject.


*xml nodes
  DATA rootnode   TYPE REF TO if_ixml_element.
  DATA wdy_config_appl_node   TYPE REF TO if_ixml_element.
  DATA wdy_config_appt_node   TYPE REF TO if_ixml_element.
  DATA rc         TYPE sysubrc.

  DATA wdy_config_appl_table TYPE STANDARD TABLE OF wdy_config_appl.
  DATA wdy_config_appt_table TYPE STANDARD TABLE OF wdy_config_appt.
  FIELD-SYMBOLS &lt;wdy_config_appl&gt; TYPE wdy_config_appl.
  FIELD-SYMBOLS &lt;wdy_config_appt&gt; TYPE wdy_config_appt.

  DATA: config_id TYPE wdy_config_id.
  config_id = objname.
  TRANSLATE config_id TO UPPER CASE.

  SELECT * FROM wdy_config_appl INTO TABLE wdy_config_appl_table
    WHERE config_id = config_id.
  SELECT * FROM wdy_config_appt INTO TABLE wdy_config_appt_table
    WHERE config_id = config_id.

* Create parent node
  DATA _objtype TYPE string.
  _objtype = getobjecttype( ).
  rootnode = xmldoc-&gt;create_element( _objtype ).
  rc = rootnode-&gt;set_attribute( name = &apos;OBJNAME&apos; value = objname ).

* copy wdy_config_appl
  LOOP AT wdy_config_appl_table ASSIGNING &lt;wdy_config_appl&gt;.
    wdy_config_appl_node = xmldoc-&gt;create_element( &apos;wdy_config_appl&apos; ).
    setattributesfromstructure( node = wdy_config_appl_node structure = &lt;wdy_config_appl&gt; ).
    rc = rootnode-&gt;append_child( wdy_config_appl_node ).
  ENDLOOP.

* copy wdy_config_appt
  LOOP AT wdy_config_appt_table ASSIGNING &lt;wdy_config_appt&gt;.
    wdy_config_appt_node = xmldoc-&gt;create_element( &apos;wdy_config_appt&apos; ).
    setattributesfromstructure( node = wdy_config_appt_node structure = &lt;wdy_config_appt&gt; ).
    rc = rootnode-&gt;append_child( wdy_config_appt_node ).
  ENDLOOP.

*\--------------------------------------------------------------------/
  rc = xmldoc-&gt;append_child( rootnode ).
  ixmldocument = xmldoc.
ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZSAPLINK" CMPNAME="CREATEOBJECTFROMIXMLDOC" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/
METHOD createobjectfromixmldoc.
*
*
*xml nodes
  DATA rootnode   TYPE REF TO if_ixml_element.
  DATA wdy_config_appl_node   TYPE REF TO if_ixml_element.
  DATA wdy_config_appt_node   TYPE REF TO if_ixml_element.
  DATA node        TYPE REF TO if_ixml_element.
  DATA filter      TYPE REF TO if_ixml_node_filter.
  DATA iterator    TYPE REF TO if_ixml_node_iterator.
  DATA rc          TYPE sysubrc.
  DATA _devclass   TYPE devclass.
  DATA checkexists TYPE flag.
  DATA _objtype    TYPE string.


  _devclass = devclass.
  _objtype = getobjecttype( ).

  xmldoc = ixmldocument.
  rootnode = xmldoc-&gt;find_from_name( _objtype ).



  DATA wdy_config_appl_table TYPE STANDARD TABLE OF wdy_config_appl.
  DATA wdy_config_appt_table TYPE STANDARD TABLE OF wdy_config_appt.
  DATA wdy_config_appl TYPE wdy_config_appl.
  DATA wdy_config_appt TYPE wdy_config_appt.

  FREE: filter, iterator, node.
  filter = xmldoc-&gt;create_filter_name( &apos;wdy_config_appl&apos; ).
  iterator = xmldoc-&gt;create_iterator_filtered( filter ).
  node ?= iterator-&gt;get_next( ).
  WHILE node IS NOT INITIAL.
    CALL METHOD getstructurefromattributes
      EXPORTING
        node            = node
        preserveversion = abap_true
      CHANGING
        structure       = wdy_config_appl.
    APPEND wdy_config_appl TO wdy_config_appl_table.
    node ?= iterator-&gt;get_next( ).
  ENDWHILE.

  objname = wdy_config_appl-config_id.
  checkexists = checkexists( ).
  IF checkexists IS NOT INITIAL.
    IF overwrite IS INITIAL.
      RAISE EXCEPTION TYPE zcx_saplink
        EXPORTING textid = zcx_saplink=&gt;existing.
    ELSE.
*     delete object for new install
      deleteobject( ).
    ENDIF.
  ENDIF.

  MODIFY wdy_config_appl FROM TABLE wdy_config_appl_table.

  FREE: filter, iterator, node.
  filter = xmldoc-&gt;create_filter_name( &apos;wdy_config_appt&apos; ).
  iterator = xmldoc-&gt;create_iterator_filtered( filter ).
  node ?= iterator-&gt;get_next( ).
  WHILE node IS NOT INITIAL.
    CALL METHOD getstructurefromattributes
      EXPORTING
        node            = node
        preserveversion = abap_true
      CHANGING
        structure       = wdy_config_appt.
    APPEND wdy_config_appt TO wdy_config_appt_table.
    node ?= iterator-&gt;get_next( ).
  ENDWHILE.
  MODIFY wdy_config_appt FROM TABLE wdy_config_appt_table.

  COMMIT WORK.
  name = objname.
ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZSAPLINK" CMPNAME="DELETEOBJECT" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/
METHOD deleteobject.
  DATA: config_id TYPE wdy_config_id.
  config_id = objname.
  TRANSLATE config_id TO UPPER CASE.
  DELETE FROM wdy_config_appl WHERE config_id = config_id.
  DELETE FROM wdy_config_appt WHERE config_id = config_id.

  COMMIT WORK.

ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZSAPLINK" CMPNAME="GETOBJECTTYPE" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/
method GETOBJECTTYPE.


  objecttype = &apos;WDCA&apos;.

endmethod.</source>
  </method>
 </CLAS>
 <CLAS CLSNAME="ZSAPLINK_WD_CONFIG_COMP" VERSION="1" LANGU="E" DESCRIPT="SAPlink - Web Dynpro ABAP Component Configuration" CATEGORY="00" EXPOSURE="2" STATE="1" RELEASE="0" CLSFINAL="X" CLSCCINCL="X" FIXPT="X" UNICODE="X" CLSBCCAT="00" DURATION_TYPE="0 " RISK_LEVEL="0 " REFCLSNAME="ZSAPLINK">
  <localImplementation>*&quot;* local class implementation for public class
*&quot;* use this source file for the implementation part of
*&quot;* local helper classes</localImplementation>
  <localTypes>*&quot;* use this source file for any type declarations (class
*&quot;* definitions, interfaces or data types) you need for method
*&quot;* implementation or private method&apos;s signature</localTypes>
  <localMacros>*&quot;* use this source file for any macro definitions you need
*&quot;* in the implementation part of the class</localMacros>
  <typeUsage CLSNAME="ZSAPLINK_WD_CONFIG_COMP" TYPEGROUP="WDYN" VERSION="1" TPUTYPE="0" EXPLICIT="X"/>
  <typeUsage CLSNAME="ZSAPLINK_WD_CONFIG_COMP" TYPEGROUP="WDYWB" VERSION="1" TPUTYPE="0" EXPLICIT="X"/>
  <forwardDeclaration>WDYN</forwardDeclaration>
  <forwardDeclaration>WDYWB</forwardDeclaration>
  <inheritance CLSNAME="ZSAPLINK_WD_CONFIG_COMP" REFCLSNAME="ZSAPLINK" VERSION="1" STATE="1">
   <redefinition CLSNAME="ZSAPLINK_WD_CONFIG_COMP" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="CHECKEXISTS" EXPOSURE="2"/>
   <redefinition CLSNAME="ZSAPLINK_WD_CONFIG_COMP" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="CREATEIXMLDOCFROMOBJECT" EXPOSURE="2"/>
   <redefinition CLSNAME="ZSAPLINK_WD_CONFIG_COMP" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="CREATEOBJECTFROMIXMLDOC" EXPOSURE="2"/>
   <redefinition CLSNAME="ZSAPLINK_WD_CONFIG_COMP" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="DELETEOBJECT" EXPOSURE="1"/>
   <redefinition CLSNAME="ZSAPLINK_WD_CONFIG_COMP" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="GETOBJECTTYPE" EXPOSURE="1"/>
  </inheritance>
  <method CLSNAME="ZSAPLINK" CMPNAME="CHECKEXISTS" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/
METHOD CHECKEXISTS.



  exists = abap_true.

  DATA: config_id TYPE WDY_CONFIG_ID.
  config_id = objname.
  TRANSLATE config_id TO UPPER CASE.

  SELECT SINGLE config_id FROM wdy_config_data INTO config_id
    WHERE config_id = config_id.
  IF sy-subrc NE 0.
    CLEAR exists.
  ENDIF.


ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZSAPLINK" CMPNAME="CREATEIXMLDOCFROMOBJECT" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/
METHOD CREATEIXMLDOCFROMOBJECT.


*xml nodes
  DATA rootnode   TYPE REF TO if_ixml_element.
  DATA wdy_config_data_node   TYPE REF TO if_ixml_element.
  DATA wdy_config_datt_node   TYPE REF TO if_ixml_element.
  DATA rc         TYPE sysubrc.

  DATA wdy_config_data_table TYPE STANDARD TABLE OF wdy_config_data.
  DATA wdy_config_datt_table TYPE STANDARD TABLE OF wdy_config_datt.
  FIELD-SYMBOLS &lt;wdy_config_data&gt; TYPE wdy_config_data.
  FIELD-SYMBOLS &lt;wdy_config_datt&gt; TYPE wdy_config_datt.

  DATA: config_id TYPE wdy_config_id.
  config_id = objname.
  TRANSLATE config_id TO UPPER CASE.

  SELECT * FROM wdy_config_data INTO TABLE wdy_config_data_table
    WHERE config_id = config_id.
  SELECT * FROM wdy_config_datt INTO TABLE wdy_config_datt_table
    WHERE config_id = config_id.

* Create parent node
  DATA _objtype TYPE string.
  _objtype = getobjecttype( ).
  rootnode = xmldoc-&gt;create_element( _objtype ).
  rc = rootnode-&gt;set_attribute( name = &apos;OBJNAME&apos; value = objname ).

* copy wdy_config_data
  LOOP AT wdy_config_data_table ASSIGNING &lt;wdy_config_data&gt;.
    wdy_config_data_node = xmldoc-&gt;create_element( &apos;wdy_config_data&apos; ).
    setattributesfromstructure( node = wdy_config_data_node structure = &lt;wdy_config_data&gt; ).
    rc = rootnode-&gt;append_child( wdy_config_data_node ).
  ENDLOOP.

* copy wdy_config_datt
  LOOP AT wdy_config_datt_table ASSIGNING &lt;wdy_config_datt&gt;.
    wdy_config_datt_node = xmldoc-&gt;create_element( &apos;wdy_config_datt&apos; ).
    setattributesfromstructure( node = wdy_config_datt_node structure = &lt;wdy_config_datt&gt; ).
    rc = rootnode-&gt;append_child( wdy_config_datt_node ).
  ENDLOOP.

*\--------------------------------------------------------------------/
  rc = xmldoc-&gt;append_child( rootnode ).
  ixmldocument = xmldoc.
ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZSAPLINK" CMPNAME="CREATEOBJECTFROMIXMLDOC" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/
METHOD CREATEOBJECTFROMIXMLDOC.
*
*
*xml nodes
  DATA rootnode   TYPE REF TO if_ixml_element.
  DATA wdy_config_data_node   TYPE REF TO if_ixml_element.
  DATA wdy_config_datt_node   TYPE REF TO if_ixml_element.
  DATA node        TYPE REF TO if_ixml_element.
  DATA filter      TYPE REF TO if_ixml_node_filter.
  DATA iterator    TYPE REF TO if_ixml_node_iterator.
  DATA rc          TYPE sysubrc.
  DATA _devclass   TYPE devclass.
  DATA checkexists TYPE flag.
  DATA _objtype    TYPE string.


  _devclass = devclass.
  _objtype = getobjecttype( ).

  xmldoc = ixmldocument.
  rootnode = xmldoc-&gt;find_from_name( _objtype ).



  DATA wdy_config_data_table TYPE STANDARD TABLE OF wdy_config_data.
  DATA wdy_config_datt_table TYPE STANDARD TABLE OF wdy_config_datt.
  DATA wdy_config_data TYPE wdy_config_data.
  DATA wdy_config_datt TYPE wdy_config_datt.

  FREE: filter, iterator, node.
  filter = xmldoc-&gt;create_filter_name( &apos;wdy_config_data&apos; ).
  iterator = xmldoc-&gt;create_iterator_filtered( filter ).
  node ?= iterator-&gt;get_next( ).
  WHILE node IS NOT INITIAL.
    CALL METHOD getstructurefromattributes
      EXPORTING
        node            = node
        preserveversion = abap_true
      CHANGING
        structure       = wdy_config_data.
    APPEND wdy_config_data TO wdy_config_data_table.
    node ?= iterator-&gt;get_next( ).
  ENDWHILE.

  objname = wdy_config_data-config_id.
  checkexists = checkexists( ).
  IF checkexists IS NOT INITIAL.
    IF overwrite IS INITIAL.
      RAISE EXCEPTION TYPE zcx_saplink
        EXPORTING textid = zcx_saplink=&gt;existing.
    ELSE.
*     delete object for new install
      deleteobject( ).
    ENDIF.
  ENDIF.

  MODIFY wdy_config_data FROM TABLE wdy_config_data_table.

  FREE: filter, iterator, node.
  filter = xmldoc-&gt;create_filter_name( &apos;wdy_config_datt&apos; ).
  iterator = xmldoc-&gt;create_iterator_filtered( filter ).
  node ?= iterator-&gt;get_next( ).
  WHILE node IS NOT INITIAL.
    CALL METHOD getstructurefromattributes
      EXPORTING
        node            = node
        preserveversion = abap_true
      CHANGING
        structure       = wdy_config_datt.
    APPEND wdy_config_datt TO wdy_config_datt_table.
    node ?= iterator-&gt;get_next( ).
  ENDWHILE.
  MODIFY wdy_config_datt FROM TABLE wdy_config_datt_table.

  COMMIT WORK.
  name = objname.
ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZSAPLINK" CMPNAME="DELETEOBJECT" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/
METHOD DELETEOBJECT.
  DATA: config_id TYPE wdy_config_id.
  config_id = objname.
  TRANSLATE config_id TO UPPER CASE.
  DELETE FROM wdy_config_data WHERE config_id = config_id.
  DELETE FROM wdy_config_datt WHERE config_id = config_id.

  COMMIT WORK.

ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZSAPLINK" CMPNAME="GETOBJECTTYPE" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/
method GETOBJECTTYPE.


  objecttype = &apos;WDCC&apos;.

endmethod.</source>
  </method>
 </CLAS>
 <CLAS CLSNAME="ZSAPLINK_INDEX" VERSION="1" LANGU="E" DESCRIPT="SAPlink - Data Dictionary  - Index" CATEGORY="00" EXPOSURE="2" STATE="1" RELEASE="0" CLSFINAL="X" CLSCCINCL="X" FIXPT="X" UNICODE="X" CLSBCCAT="00" DURATION_TYPE="0 " RISK_LEVEL="0 " REFCLSNAME="ZSAPLINK">
  <localImplementation>*&quot;* local class implementation for public class
*&quot;* use this source file for the implementation part of
*&quot;* local helper classes</localImplementation>
  <localTypes>*&quot;* use this source file for any type declarations (class
*&quot;* definitions, interfaces or data types) you need for method
*&quot;* implementation or private method&apos;s signature</localTypes>
  <localMacros>*&quot;* use this source file for any macro definitions you need
*&quot;* in the implementation part of the class</localMacros>
  <inheritance CLSNAME="ZSAPLINK_INDEX" REFCLSNAME="ZSAPLINK" VERSION="1" STATE="1">
   <redefinition CLSNAME="ZSAPLINK_INDEX" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="CHECKEXISTS" EXPOSURE="2"/>
   <redefinition CLSNAME="ZSAPLINK_INDEX" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="CREATEIXMLDOCFROMOBJECT" EXPOSURE="2"/>
   <redefinition CLSNAME="ZSAPLINK_INDEX" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="CREATEOBJECTFROMIXMLDOC" EXPOSURE="2"/>
   <redefinition CLSNAME="ZSAPLINK_INDEX" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="DELETEOBJECT" EXPOSURE="1"/>
   <redefinition CLSNAME="ZSAPLINK_INDEX" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="GETOBJECTTYPE" EXPOSURE="1"/>
  </inheritance>
  <method CLSNAME="ZSAPLINK" CMPNAME="CHECKEXISTS" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/
METHOD CHECKEXISTS.

*      Plugin created by:
*      Thomas Jung
*      thomas.jung1@gmail.com

  DATA: l_name TYPE ddobjname,
        dd12v_wa type dd12v.
  l_name = objname.
  CALL FUNCTION &apos;DDIF_INDX_GET&apos;
    EXPORTING
      name          = l_name
    IMPORTING
      dd12v_wa      = dd12v_wa
    EXCEPTIONS
      illegal_input = 1
      OTHERS        = 2.
  IF sy-subrc = 0 AND dd12v_wa-INDEXNAME IS NOT INITIAL.
    exists = &apos;X&apos;.
  ENDIF.
ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZSAPLINK" CMPNAME="CREATEIXMLDOCFROMOBJECT" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/
METHOD CREATEIXMLDOCFROMOBJECT.

*      Plugin created by:
*      Thomas Jung
*      thomas.jung1@gmail.com

  DATA: gotstate TYPE ddgotstate,
        dd12v_wa TYPE dd12v,
        dd17v_tab TYPE STANDARD TABLE OF dd17v.

*xml nodes
  DATA rootnode   TYPE REF TO if_ixml_element.
  DATA dd17v_node TYPE REF TO if_ixml_element.
  DATA rc         TYPE sysubrc.
  DATA _indxname  TYPE ddobjname.
  _indxname = objname.

  CALL FUNCTION &apos;DDIF_INDX_GET&apos;
    EXPORTING
      name          = _indxname
      langu         = sy-langu
    IMPORTING
      gotstate      = gotstate
      dd12v_wa      = dd12v_wa
    TABLES
      dd17v_tab     = dd17v_tab
    EXCEPTIONS
      illegal_input = 1
      OTHERS        = 2.
  IF sy-subrc &lt;&gt; 0 OR dd12v_wa-INDEXNAME IS INITIAL.
    RAISE EXCEPTION TYPE zcx_saplink
      EXPORTING textid = zcx_saplink=&gt;not_found.
  ENDIF.

* Create parent node
  DATA _objtype TYPE string.
  _objtype = getobjecttype( ).
  rootnode = xmldoc-&gt;create_element( _objtype ).
  setattributesfromstructure( node = rootnode structure = dd12v_wa ).

  DATA: wa_dd17v LIKE LINE OF dd17v_tab.
  LOOP AT dd17v_tab INTO wa_dd17v.
    dd17v_node = xmldoc-&gt;create_element( &apos;dd17v&apos; ).
    setattributesfromstructure( node = dd17v_node structure = wa_dd17v ).
    rc = rootnode-&gt;append_child( dd17v_node ).
  ENDLOOP.

*\--------------------------------------------------------------------/
  rc = xmldoc-&gt;append_child( rootnode ).
  ixmldocument = xmldoc.
ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZSAPLINK" CMPNAME="CREATEOBJECTFROMIXMLDOC" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/
METHOD CREATEOBJECTFROMIXMLDOC.

*      Plugin created by:
*      Thomas Jung
*      thomas.jung1@gmail.com

  DATA: gotstate TYPE ddgotstate,
        dd12v_wa TYPE dd12v,
        dd17v_tab TYPE STANDARD TABLE OF dd17v.

*xml nodes
  DATA rootnode    TYPE REF TO if_ixml_element.
  DATA dd17v_node  TYPE REF TO if_ixml_element.
  DATA node        TYPE REF TO if_ixml_element.
  DATA filter      TYPE REF TO if_ixml_node_filter.
  DATA iterator    TYPE REF TO if_ixml_node_iterator.
  DATA rc          TYPE sysubrc.
  DATA _indxname   TYPE ddobjname.
  DATA _devclass   TYPE devclass.
  DATA checkexists TYPE flag.
  DATA _objtype    TYPE string.

  _devclass = devclass.
  _objtype = getobjecttype( ).

  xmldoc = ixmldocument.
  rootnode = xmldoc-&gt;find_from_name( _objtype ).

  CALL METHOD getstructurefromattributes
    EXPORTING
      node      = rootnode
    CHANGING
      structure = dd12v_wa.

  objname = dd12v_wa-INDEXNAME.

  checkexists = checkexists( ).
  IF checkexists IS NOT INITIAL.
    IF overwrite IS INITIAL.
      RAISE EXCEPTION TYPE zcx_saplink
        EXPORTING textid = zcx_saplink=&gt;existing.
    ELSE.
*     delete object for new install
      deleteobject( ).
    ENDIF.
  ENDIF.

* retrieve Domain details
  FREE: filter, iterator, node.
  filter = xmldoc-&gt;create_filter_name( &apos;dd17v&apos; ).
  iterator = xmldoc-&gt;create_iterator_filtered( filter ).
  node ?= iterator-&gt;get_next( ).

  DATA: wa_dd17v LIKE LINE OF dd17v_tab.
  WHILE node IS NOT INITIAL.
    CLEAR dd17v_node.
    CALL METHOD getstructurefromattributes
      EXPORTING
        node      = node
      CHANGING
        structure = wa_dd17v.
    APPEND wa_dd17v TO dd17v_tab.
    node ?= iterator-&gt;get_next( ).
  ENDWHILE.

  DATA : l_pgmid         TYPE tadir-pgmid,
           l_object      TYPE tadir-object,
           l_obj_name    TYPE tadir-obj_name,
           l_dd_objname  TYPE ddobjname,
           l_srcsystem   TYPE tadir-srcsystem,
           l_author      TYPE tadir-author,
           l_devclass    TYPE tadir-devclass,
           l_masterlang  TYPE tadir-masterlang.


  l_pgmid      = &apos;R3TR&apos;.
  l_object     = _objtype.
  l_obj_name   = objname.
  l_dd_objname = objname.
  l_srcsystem  = sy-sysid.
  l_author     = sy-uname.
  l_devclass   = _devclass.
  l_masterlang = sy-langu.

  data: itadir type tadir.
  itadir-pgmid      = l_pgmid.
  itadir-object     = l_object.
  itadir-obj_name   = l_obj_name.
  itadir-srcsystem  = l_srcsystem.
  itadir-author     = l_author.
  itadir-devclass   = l_devclass.
  itadir-masterlang = l_masterlang.
  modify tadir from itadir.

 CALL FUNCTION &apos;TR_TADIR_INTERFACE&apos;
    EXPORTING
      wi_test_modus                  = &apos; &apos;
      wi_delete_tadir_entry          = &apos;X&apos;
      wi_tadir_pgmid                 = l_pgmid
      wi_tadir_object                = l_object
      wi_tadir_obj_name              = l_obj_name
      wi_tadir_srcsystem             = l_srcsystem
      wi_tadir_author                = l_author
      wi_tadir_devclass              = l_devclass
      wi_tadir_masterlang            = l_masterlang
      iv_set_edtflag                 = &apos;&apos;
    EXCEPTIONS
      tadir_entry_not_existing       = 1
      tadir_entry_ill_type           = 2
      no_systemname                  = 3
      no_systemtype                  = 4
      original_system_conflict       = 5
      object_reserved_for_devclass   = 6
      object_exists_global           = 7
      object_exists_local            = 8
      object_is_distributed          = 9
      obj_specification_not_unique   = 10
      no_authorization_to_delete     = 11
      devclass_not_existing          = 12
      simultanious_set_remove_repair = 13
      order_missing                  = 14
      no_modification_of_head_syst   = 15
      pgmid_object_not_allowed       = 16
      masterlanguage_not_specified   = 17
      devclass_not_specified         = 18
      specify_owner_unique           = 19
      loc_priv_objs_no_repair        = 20
      gtadir_not_reached             = 21
      object_locked_for_order        = 22
      change_of_class_not_allowed    = 23
      no_change_from_sap_to_tmp      = 24
      OTHERS                         = 25.
  IF sy-subrc NE 0.
    CASE sy-subrc.
      when 1 or 9 or 7 or 8. &quot;OK! - Doesn&apos;t exist yet
      WHEN 11 OR 23 OR 24.
        RAISE EXCEPTION TYPE zcx_saplink
          EXPORTING textid = zcx_saplink=&gt;not_authorized.
      WHEN 22.
        RAISE EXCEPTION TYPE zcx_saplink
          EXPORTING textid = zcx_saplink=&gt;locked.
      WHEN OTHERS.
        RAISE EXCEPTION TYPE zcx_saplink
          EXPORTING textid = zcx_saplink=&gt;system_error.
    ENDCASE.
  ENDIF.

  CALL FUNCTION &apos;DDIF_INDX_PUT&apos;
    EXPORTING
      name              = l_dd_objname
      dd12v_wa          = dd12v_wa
    TABLES
      dd17v_tab         = dd17v_tab
    EXCEPTIONS
      indx_not_found    = 1
      name_inconsistent = 2
      indx_inconsistent = 3
      put_failure       = 4
      put_refused       = 5
      OTHERS            = 6.
  IF sy-subrc &lt;&gt; 0.
    RAISE EXCEPTION TYPE zcx_saplink
      EXPORTING textid = zcx_saplink=&gt;system_error.
  ENDIF.



  data: TROBJTYPE  type TROBJTYPE,
        TROBJ_NAME type TROBJ_NAME.
  TROBJTYPE  = l_object.
  TROBJ_NAME = l_obj_name.
  CALL FUNCTION &apos;RS_INSERT_INTO_WORKING_AREA&apos;
    EXPORTING
      object            = TROBJTYPE
      obj_name          = TROBJ_NAME
    EXCEPTIONS
      wrong_object_name = 1.

  name = objName.

ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZSAPLINK" CMPNAME="DELETEOBJECT" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/
method DELETEOBJECT.

*      Plugin created by:
*      Thomas Jung
*      thomas.jung1@gmail.com

endmethod.</source>
  </method>
  <method CLSNAME="ZSAPLINK" CMPNAME="GETOBJECTTYPE" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/
method GETOBJECTTYPE.

*      Plugin created by:
*      Thomas Jung
*      thomas.jung1@gmail.com

  objecttype = &apos;INDX&apos;.  &quot;Index
endmethod.</source>
  </method>
 </CLAS>
 <CLAS CLSNAME="ZSAPLINK_LOCK_OBJECTS" VERSION="1" LANGU="E" DESCRIPT="SAPlink - Data Dictionary  - Lock Objects" CATEGORY="00" EXPOSURE="2" STATE="1" RELEASE="0" CLSFINAL="X" CLSCCINCL="X" FIXPT="X" UNICODE="X" CLSBCCAT="00" DURATION_TYPE="0 " RISK_LEVEL="0 " REFCLSNAME="ZSAPLINK">
  <localImplementation>*&quot;* local class implementation for public class
*&quot;* use this source file for the implementation part of
*&quot;* local helper classes</localImplementation>
  <localTypes>*&quot;* use this source file for any type declarations (class
*&quot;* definitions, interfaces or data types) you need for method
*&quot;* implementation or private method&apos;s signature</localTypes>
  <localMacros>*&quot;* use this source file for any macro definitions you need
*&quot;* in the implementation part of the class</localMacros>
  <inheritance CLSNAME="ZSAPLINK_LOCK_OBJECTS" REFCLSNAME="ZSAPLINK" VERSION="1" STATE="1">
   <redefinition CLSNAME="ZSAPLINK_LOCK_OBJECTS" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="CHECKEXISTS" EXPOSURE="2"/>
   <redefinition CLSNAME="ZSAPLINK_LOCK_OBJECTS" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="CREATEIXMLDOCFROMOBJECT" EXPOSURE="2"/>
   <redefinition CLSNAME="ZSAPLINK_LOCK_OBJECTS" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="CREATEOBJECTFROMIXMLDOC" EXPOSURE="2"/>
   <redefinition CLSNAME="ZSAPLINK_LOCK_OBJECTS" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="DELETEOBJECT" EXPOSURE="1"/>
   <redefinition CLSNAME="ZSAPLINK_LOCK_OBJECTS" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="GETOBJECTTYPE" EXPOSURE="1"/>
  </inheritance>
  <method CLSNAME="ZSAPLINK" CMPNAME="CHECKEXISTS" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/
METHOD CHECKEXISTS.

*      Plugin created by:
*      Thomas Jung
*      thomas.jung1@gmail.com

  DATA: l_name TYPE ddobjname,
        dd25v_wa TYPE dd25v.
  l_name = objname.

  CALL FUNCTION &apos;DDIF_ENQU_GET&apos;
    EXPORTING
      name          = l_name
    IMPORTING
      dd25v_wa      = dd25v_wa
    EXCEPTIONS
      illegal_input = 1
      OTHERS        = 2.
  IF sy-subrc = 0 AND dd25v_wa-VIEWNAME IS NOT INITIAL.
    exists = &apos;X&apos;.
  ENDIF.


ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZSAPLINK" CMPNAME="CREATEIXMLDOCFROMOBJECT" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/
METHOD CREATEIXMLDOCFROMOBJECT.

*      Plugin created by:
*      Thomas Jung
*      thomas.jung1@gmail.com

  DATA: gotstate  TYPE ddgotstate,
        dd25v_wa  TYPE dd25v,
        dd26e_tab TYPE STANDARD TABLE OF dd26e,
        dd26e_wa  LIKE LINE OF dd26e_tab,
        dd27p_tab TYPE STANDARD TABLE OF dd27p,
        dd27p_wa  LIKE LINE OF dd27p_tab,
        ddena_tab TYPE STANDARD TABLE OF ddena,
        ddena_wa  LIKE LINE OF ddena_tab.

*xml nodes
  DATA rootnode   TYPE REF TO if_ixml_element.
  DATA dd26e_node TYPE REF TO if_ixml_element.
  DATA dd27p_node TYPE REF TO if_ixml_element.
  DATA ddena_node TYPE REF TO if_ixml_element.
  DATA rc         TYPE sysubrc.
  DATA _enquname  TYPE ddobjname.
  _enquname = objname.

  CALL FUNCTION &apos;DDIF_ENQU_GET&apos;
    EXPORTING
      name          = _enquname
      langu         = sy-langu
    IMPORTING
      gotstate      = gotstate
      dd25v_wa      = dd25v_wa
    TABLES
      dd26e_tab     = dd26e_tab
      dd27p_tab     = dd27p_tab
      ddena_tab     = ddena_tab
    EXCEPTIONS
      illegal_input = 1
      OTHERS        = 2.

  IF sy-subrc &lt;&gt; 0 OR dd25v_wa-viewname IS INITIAL.
    RAISE EXCEPTION TYPE zcx_saplink
      EXPORTING textid = zcx_saplink=&gt;not_found.
  ENDIF.

* Create parent node
  DATA _objtype TYPE string.
  _objtype = getobjecttype( ).
  rootnode = xmldoc-&gt;create_element( _objtype ).
  setattributesfromstructure( node = rootnode structure = dd25v_wa ).

  LOOP AT dd26e_tab INTO dd26e_wa.
    dd26e_node = xmldoc-&gt;create_element( &apos;dd26e&apos; ).
    setattributesfromstructure( node = dd26e_node structure = dd26e_wa ).
    rc = rootnode-&gt;append_child( dd26e_node ).
  ENDLOOP.

  LOOP AT dd27p_tab INTO dd27p_wa.
    dd27p_node = xmldoc-&gt;create_element( &apos;dd27p&apos; ).
    setattributesfromstructure( node = dd27p_node structure = dd27p_wa ).
    rc = rootnode-&gt;append_child( dd27p_node ).
  ENDLOOP.

  LOOP AT ddena_tab INTO ddena_wa.
    ddena_node = xmldoc-&gt;create_element( &apos;ddena&apos; ).
    setattributesfromstructure( node = ddena_node structure = ddena_wa ).
    rc = rootnode-&gt;append_child( ddena_node ).
  ENDLOOP.

*\--------------------------------------------------------------------/
  rc = xmldoc-&gt;append_child( rootnode ).
  ixmldocument = xmldoc.
ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZSAPLINK" CMPNAME="CREATEOBJECTFROMIXMLDOC" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/
METHOD CREATEOBJECTFROMIXMLDOC.

*      Plugin created by:
*      Thomas Jung
*      thomas.jung1@gmail.com

  DATA: gotstate  TYPE ddgotstate,
        dd25v_wa  TYPE dd25v,
        dd26e_tab TYPE STANDARD TABLE OF dd26e,
        dd26e_wa  LIKE LINE OF dd26e_tab,
        dd27p_tab TYPE STANDARD TABLE OF dd27p,
        dd27p_wa  LIKE LINE OF dd27p_tab,
        ddena_tab TYPE STANDARD TABLE OF ddena,
        ddena_wa  LIKE LINE OF ddena_tab.

*xml nodes
  DATA rootnode    TYPE REF TO if_ixml_element.
  DATA dd26e_node  TYPE REF TO if_ixml_element.
  DATA dd27p_node  TYPE REF TO if_ixml_element.
  DATA ddena_node  TYPE REF TO if_ixml_element.
  DATA node        TYPE REF TO if_ixml_element.
  DATA filter      TYPE REF TO if_ixml_node_filter.
  DATA iterator    TYPE REF TO if_ixml_node_iterator.
  DATA rc          TYPE sysubrc.
  DATA _enquname   TYPE ddobjname.
  DATA _devclass   TYPE devclass.
  DATA checkexists TYPE flag.
  DATA _objtype    TYPE string.

  _devclass = devclass.
  _objtype = getobjecttype( ).

  xmldoc = ixmldocument.
  rootnode = xmldoc-&gt;find_from_name( _objtype ).

  CALL METHOD getstructurefromattributes
    EXPORTING
      node      = rootnode
    CHANGING
      structure = dd25v_wa.

  objname = dd25v_wa-viewname.

  checkexists = checkexists( ).
  IF checkexists IS NOT INITIAL.
    IF overwrite IS INITIAL.
      RAISE EXCEPTION TYPE zcx_saplink
        EXPORTING textid = zcx_saplink=&gt;existing.
    ELSE.
*     delete object for new install
      deleteobject( ).
    ENDIF.
  ENDIF.

* retrieve Tabl details
  FREE: filter, iterator, node.
  filter = xmldoc-&gt;create_filter_name( &apos;dd26e&apos; ).
  iterator = xmldoc-&gt;create_iterator_filtered( filter ).
  node ?= iterator-&gt;get_next( ).
  WHILE node IS NOT INITIAL.
    CLEAR dd26e_node.
    CALL METHOD getstructurefromattributes
      EXPORTING
        node      = node
      CHANGING
        structure = dd26e_wa.
    APPEND dd26e_wa TO dd26e_tab.
    node ?= iterator-&gt;get_next( ).
  ENDWHILE.

  FREE: filter, iterator, node.
  filter = xmldoc-&gt;create_filter_name( &apos;dd27p&apos; ).
  iterator = xmldoc-&gt;create_iterator_filtered( filter ).
  node ?= iterator-&gt;get_next( ).
  WHILE node IS NOT INITIAL.
    CLEAR dd27p_node.
    CALL METHOD getstructurefromattributes
      EXPORTING
        node      = node
      CHANGING
        structure = dd27p_wa.
    APPEND dd27p_wa TO dd27p_tab.
    node ?= iterator-&gt;get_next( ).
  ENDWHILE.

  FREE: filter, iterator, node.
  filter = xmldoc-&gt;create_filter_name( &apos;ddena&apos; ).
  iterator = xmldoc-&gt;create_iterator_filtered( filter ).
  node ?= iterator-&gt;get_next( ).
  WHILE node IS NOT INITIAL.
    CLEAR ddena_node.
    CALL METHOD getstructurefromattributes
      EXPORTING
        node      = node
      CHANGING
        structure = ddena_wa.
    APPEND ddena_wa TO ddena_tab.
    node ?= iterator-&gt;get_next( ).
  ENDWHILE.

  DATA : l_pgmid         TYPE tadir-pgmid,
           l_object      TYPE tadir-object,
           l_obj_name    TYPE tadir-obj_name,
           l_dd_objname  TYPE ddobjname,
           l_srcsystem   TYPE tadir-srcsystem,
           l_author      TYPE tadir-author,
           l_devclass    TYPE tadir-devclass,
           l_masterlang  TYPE tadir-masterlang.


  l_pgmid      = &apos;R3TR&apos;.
  l_object     = _objtype.
  l_obj_name   = objname.
  l_dd_objname = objname.
  l_srcsystem  = sy-sysid.
  l_author     = sy-uname.
  l_devclass   = _devclass.
  l_masterlang = sy-langu.

  DATA: itadir TYPE tadir.
  itadir-pgmid      = l_pgmid.
  itadir-object     = l_object.
  itadir-obj_name   = l_obj_name.
  itadir-srcsystem  = l_srcsystem.
  itadir-author     = l_author.
  itadir-devclass   = l_devclass.
  itadir-masterlang = l_masterlang.
  MODIFY tadir FROM itadir.

  CALL FUNCTION &apos;TR_TADIR_INTERFACE&apos;
    EXPORTING
      wi_test_modus                  = &apos; &apos;
      wi_delete_tadir_entry          = &apos;X&apos;
      wi_tadir_pgmid                 = l_pgmid
      wi_tadir_object                = l_object
      wi_tadir_obj_name              = l_obj_name
      wi_tadir_srcsystem             = l_srcsystem
      wi_tadir_author                = l_author
      wi_tadir_devclass              = l_devclass
      wi_tadir_masterlang            = l_masterlang
      iv_set_edtflag                 = &apos;&apos;
    EXCEPTIONS
      tadir_entry_not_existing       = 1
      tadir_entry_ill_type           = 2
      no_systemname                  = 3
      no_systemtype                  = 4
      original_system_conflict       = 5
      object_reserved_for_devclass   = 6
      object_exists_global           = 7
      object_exists_local            = 8
      object_is_distributed          = 9
      obj_specification_not_unique   = 10
      no_authorization_to_delete     = 11
      devclass_not_existing          = 12
      simultanious_set_remove_repair = 13
      order_missing                  = 14
      no_modification_of_head_syst   = 15
      pgmid_object_not_allowed       = 16
      masterlanguage_not_specified   = 17
      devclass_not_specified         = 18
      specify_owner_unique           = 19
      loc_priv_objs_no_repair        = 20
      gtadir_not_reached             = 21
      object_locked_for_order        = 22
      change_of_class_not_allowed    = 23
      no_change_from_sap_to_tmp      = 24
      OTHERS                         = 25.
  IF sy-subrc NE 0.
    CASE sy-subrc.
      WHEN 1 OR 9 OR 7 OR 8. &quot;OK! - Doesn&apos;t exist yet
      WHEN 11 OR 23 OR 24.
        RAISE EXCEPTION TYPE zcx_saplink
          EXPORTING textid = zcx_saplink=&gt;not_authorized.
      WHEN 22.
        RAISE EXCEPTION TYPE zcx_saplink
          EXPORTING textid = zcx_saplink=&gt;locked.
      WHEN OTHERS.
        RAISE EXCEPTION TYPE zcx_saplink
          EXPORTING textid = zcx_saplink=&gt;system_error.
    ENDCASE.
  ENDIF.

  CALL FUNCTION &apos;DDIF_ENQU_PUT&apos;
    EXPORTING
      name              = l_dd_objname
      dd25v_wa          = dd25v_wa
    TABLES
      dd26e_tab         = dd26e_tab
      dd27p_tab         = dd27p_tab
    EXCEPTIONS
      enqu_not_found    = 1
      name_inconsistent = 2
      enqu_inconsistent = 3
      put_failure       = 4
      put_refused       = 5
      OTHERS            = 6.

  IF sy-subrc &lt;&gt; 0.
    RAISE EXCEPTION TYPE zcx_saplink
      EXPORTING textid = zcx_saplink=&gt;system_error.
  ENDIF.

  DATA: trobjtype  TYPE trobjtype,
        trobj_name TYPE trobj_name.
  trobjtype  = l_object.
  trobj_name = l_obj_name.
  CALL FUNCTION &apos;RS_INSERT_INTO_WORKING_AREA&apos;
    EXPORTING
      object            = trobjtype
      obj_name          = trobj_name
    EXCEPTIONS
      wrong_object_name = 1.

  name = objName.
ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZSAPLINK" CMPNAME="DELETEOBJECT" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/
method DELETEOBJECT.

*      Plugin created by:
*      Thomas Jung
*      thomas.jung1@gmail.com

endmethod.</source>
  </method>
  <method CLSNAME="ZSAPLINK" CMPNAME="GETOBJECTTYPE" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/
method GETOBJECTTYPE.

*      Plugin created by:
*      Thomas Jung
*      thomas.jung1@gmail.com

  objecttype = &apos;ENQU&apos;.  &quot;Lock Objects
endmethod.</source>
  </method>
 </CLAS>
 <CLAS CLSNAME="ZSAPLINK_SEARCH_HELPS" VERSION="1" LANGU="E" DESCRIPT="SAPlink - Data Dictionary  - Search Helps" CATEGORY="00" EXPOSURE="2" STATE="1" RELEASE="0" CLSFINAL="X" CLSCCINCL="X" FIXPT="X" UNICODE="X" CLSBCCAT="00" DURATION_TYPE="0 " RISK_LEVEL="0 " REFCLSNAME="ZSAPLINK">
  <localImplementation>*&quot;* local class implementation for public class
*&quot;* use this source file for the implementation part of
*&quot;* local helper classes</localImplementation>
  <localTypes>*&quot;* use this source file for any type declarations (class
*&quot;* definitions, interfaces or data types) you need for method
*&quot;* implementation or private method&apos;s signature</localTypes>
  <localMacros>*&quot;* use this source file for any macro definitions you need
*&quot;* in the implementation part of the class</localMacros>
  <inheritance CLSNAME="ZSAPLINK_SEARCH_HELPS" REFCLSNAME="ZSAPLINK" VERSION="1" STATE="1">
   <redefinition CLSNAME="ZSAPLINK_SEARCH_HELPS" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="CHECKEXISTS" EXPOSURE="2"/>
   <redefinition CLSNAME="ZSAPLINK_SEARCH_HELPS" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="CREATEIXMLDOCFROMOBJECT" EXPOSURE="2"/>
   <redefinition CLSNAME="ZSAPLINK_SEARCH_HELPS" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="CREATEOBJECTFROMIXMLDOC" EXPOSURE="2"/>
   <redefinition CLSNAME="ZSAPLINK_SEARCH_HELPS" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="DELETEOBJECT" EXPOSURE="1"/>
   <redefinition CLSNAME="ZSAPLINK_SEARCH_HELPS" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="GETOBJECTTYPE" EXPOSURE="1"/>
  </inheritance>
  <method CLSNAME="ZSAPLINK" CMPNAME="CHECKEXISTS" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>METHOD CHECKEXISTS.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   The code of this project is provided to you under the current     |
*|   version of the SAP Code Exchange Terms of Use. You can find the   |
*|   text on the SAP Code Exchange webpage at http://www.sdn.sap.com   |
*|                                                                     |
*|   SAPlink is provided to you AS IS with no guarantee, warranty or   |
*|   support.                                                          |
*\---------------------------------------------------------------------/

*      Plugin created by:
*      Thomas Jung
*      thomas.jung1@gmail.com

  DATA: l_name TYPE ddobjname,
        dd30v_wa TYPE dd30v.
  l_name = objname.

  CALL FUNCTION &apos;DDIF_SHLP_GET&apos;
    EXPORTING
      name          = l_name
    IMPORTING
      dd30v_wa      = dd30v_wa
    EXCEPTIONS
      illegal_input = 1
      OTHERS        = 2.
  IF sy-subrc = 0 AND dd30v_wa-SHLPNAME IS NOT INITIAL.
    exists = &apos;X&apos;.
  ENDIF.


ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZSAPLINK" CMPNAME="CREATEIXMLDOCFROMOBJECT" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>METHOD CREATEIXMLDOCFROMOBJECT.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   The code of this project is provided to you under the current     |
*|   version of the SAP Code Exchange Terms of Use. You can find the   |
*|   text on the SAP Code Exchange webpage at http://www.sdn.sap.com   |
*|                                                                     |
*|   SAPlink is provided to you AS IS with no guarantee, warranty or   |
*|   support.                                                          |
*\---------------------------------------------------------------------/

*      Plugin created by:
*      Thomas Jung
*      thomas.jung1@gmail.com

  DATA: gotstate  TYPE ddgotstate,
        dd30v_wa  TYPE dd30v,
        dd31v_tab TYPE STANDARD TABLE OF dd31v,
        dd31v_wa  LIKE LINE OF dd31v_tab,
        dd32p_tab TYPE STANDARD TABLE OF dd32p,
        dd32p_wa  LIKE LINE OF dd32p_tab,
        dd33v_tab TYPE STANDARD TABLE OF dd33v,
        dd33v_wa  LIKE LINE OF dd33v_tab.

*xml nodes
  DATA rootnode   TYPE REF TO if_ixml_element.
  DATA dd31v_node TYPE REF TO if_ixml_element.
  DATA dd32p_node TYPE REF TO if_ixml_element.
  DATA dd33v_node TYPE REF TO if_ixml_element.
  DATA rc         TYPE sysubrc.
  DATA _shlpname  TYPE ddobjname.
  _shlpname = objname.

  CALL FUNCTION &apos;DDIF_SHLP_GET&apos;
    EXPORTING
      name          = _shlpname
      langu         = sy-langu
    IMPORTING
      gotstate      = gotstate
      dd30v_wa      = dd30v_wa
    TABLES
      dd31v_tab     = dd31v_tab
      dd32p_tab     = dd32p_tab
      dd33v_tab     = dd33v_tab
    EXCEPTIONS
      illegal_input = 1
      OTHERS        = 2.

  IF sy-subrc &lt;&gt; 0 OR dd30v_wa-SHLPNAME IS INITIAL.
    RAISE EXCEPTION TYPE zcx_saplink
      EXPORTING textid = zcx_saplink=&gt;not_found.
  ENDIF.

* Create parent node
  DATA _objtype TYPE string.
  _objtype = getobjecttype( ).
  rootnode = xmldoc-&gt;create_element( _objtype ).
  setattributesfromstructure( node = rootnode structure = dd30v_wa ).

  LOOP AT dd31v_tab INTO dd31v_wa.
    dd31v_node = xmldoc-&gt;create_element( &apos;dd31v&apos; ).
    setattributesfromstructure( node = dd31v_node structure = dd31v_wa ).
    rc = rootnode-&gt;append_child( dd31v_node ).
  ENDLOOP.

  LOOP AT dd32p_tab INTO dd32p_wa.
    dd32p_node = xmldoc-&gt;create_element( &apos;dd32p&apos; ).
    setattributesfromstructure( node = dd32p_node structure = dd32p_wa ).
    rc = rootnode-&gt;append_child( dd32p_node ).
  ENDLOOP.

  LOOP AT dd33v_tab INTO dd33v_wa.
    dd33v_node = xmldoc-&gt;create_element( &apos;dd33v&apos; ).
    setattributesfromstructure( node = dd33v_node structure = dd33v_wa ).
    rc = rootnode-&gt;append_child( dd33v_node ).
  ENDLOOP.

*\--------------------------------------------------------------------/
  rc = xmldoc-&gt;append_child( rootnode ).
  ixmldocument = xmldoc.
ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZSAPLINK" CMPNAME="CREATEOBJECTFROMIXMLDOC" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>METHOD CREATEOBJECTFROMIXMLDOC.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   The code of this project is provided to you under the current     |
*|   version of the SAP Code Exchange Terms of Use. You can find the   |
*|   text on the SAP Code Exchange webpage at http://www.sdn.sap.com   |
*|                                                                     |
*|   SAPlink is provided to you AS IS with no guarantee, warranty or   |
*|   support.                                                          |
*\---------------------------------------------------------------------/

*      Plugin created by:
*      Thomas Jung
*      thomas.jung1@gmail.com

  DATA: gotstate  TYPE ddgotstate,
        dd30v_wa  TYPE dd30v,
        dd31v_tab TYPE STANDARD TABLE OF dd31v,
        dd31v_wa  LIKE LINE OF dd31v_tab,
        dd32p_tab TYPE STANDARD TABLE OF dd32p,
        dd32p_wa  LIKE LINE OF dd32p_tab,
        dd33v_tab TYPE STANDARD TABLE OF dd33v,
        dd33v_wa  LIKE LINE OF dd33v_tab.

*xml nodes
  DATA rootnode    TYPE REF TO if_ixml_element.
  DATA dd31v_node  TYPE REF TO if_ixml_element.
  DATA dd32p_node  TYPE REF TO if_ixml_element.
  DATA dd33v_node  TYPE REF TO if_ixml_element.
  DATA node        TYPE REF TO if_ixml_element.
  DATA filter      TYPE REF TO if_ixml_node_filter.
  DATA iterator    TYPE REF TO if_ixml_node_iterator.
  DATA rc          TYPE sysubrc.
  DATA _shlpname   TYPE ddobjname.
  DATA _devclass   TYPE devclass.
  DATA checkexists TYPE flag.
  DATA _objtype    TYPE string.

  _devclass = devclass.
  _objtype = getobjecttype( ).

  xmldoc = ixmldocument.
  rootnode = xmldoc-&gt;find_from_name( _objtype ).

  CALL METHOD getstructurefromattributes
    EXPORTING
      node      = rootnode
    CHANGING
      structure = dd30v_wa.

  objname = dd30v_wa-shlpname.

  checkexists = checkexists( ).
  IF checkexists IS NOT INITIAL.
    IF overwrite IS INITIAL.
      RAISE EXCEPTION TYPE zcx_saplink
        EXPORTING textid = zcx_saplink=&gt;existing.
    ELSE.
*     delete object for new install
      deleteobject( ).
    ENDIF.
  ENDIF.

* retrieve Tabl details
  FREE: filter, iterator, node.
  filter = xmldoc-&gt;create_filter_name( &apos;dd31v&apos; ).
  iterator = xmldoc-&gt;create_iterator_filtered( filter ).
  node ?= iterator-&gt;get_next( ).
  WHILE node IS NOT INITIAL.
    CLEAR dd31v_node.
    CALL METHOD getstructurefromattributes
      EXPORTING
        node      = node
      CHANGING
        structure = dd31v_wa.
    APPEND dd31v_wa TO dd31v_tab.
    node ?= iterator-&gt;get_next( ).
  ENDWHILE.

  FREE: filter, iterator, node.
  filter = xmldoc-&gt;create_filter_name( &apos;dd32p&apos; ).
  iterator = xmldoc-&gt;create_iterator_filtered( filter ).
  node ?= iterator-&gt;get_next( ).
  WHILE node IS NOT INITIAL.
    CLEAR dd32p_node.
    CALL METHOD getstructurefromattributes
      EXPORTING
        node      = node
      CHANGING
        structure = dd32p_wa.
    APPEND dd32p_wa TO dd32p_tab.
    node ?= iterator-&gt;get_next( ).
  ENDWHILE.

  FREE: filter, iterator, node.
  filter = xmldoc-&gt;create_filter_name( &apos;dd33v&apos; ).
  iterator = xmldoc-&gt;create_iterator_filtered( filter ).
  node ?= iterator-&gt;get_next( ).
  WHILE node IS NOT INITIAL.
    CLEAR dd33v_node.
    CALL METHOD getstructurefromattributes
      EXPORTING
        node      = node
      CHANGING
        structure = dd33v_wa.
    APPEND dd33v_wa TO dd33v_tab.
    node ?= iterator-&gt;get_next( ).
  ENDWHILE.

  DATA : l_pgmid         TYPE tadir-pgmid,
           l_object      TYPE tadir-object,
           l_obj_name    TYPE tadir-obj_name,
           l_dd_objname  TYPE ddobjname,
           l_srcsystem   TYPE tadir-srcsystem,
           l_author      TYPE tadir-author,
           l_devclass    TYPE tadir-devclass,
           l_masterlang  TYPE tadir-masterlang.


  l_pgmid      = &apos;R3TR&apos;.
  l_object     = _objtype.
  l_obj_name   = objname.
  l_dd_objname = objname.
  l_srcsystem  = sy-sysid.
  l_author     = sy-uname.
  l_devclass   = _devclass.
  l_masterlang = sy-langu.

  DATA: itadir TYPE tadir.
  itadir-pgmid      = l_pgmid.
  itadir-object     = l_object.
  itadir-obj_name   = l_obj_name.
  itadir-srcsystem  = l_srcsystem.
  itadir-author     = l_author.
  itadir-devclass   = l_devclass.
  itadir-masterlang = l_masterlang.
  MODIFY tadir FROM itadir.

  CALL FUNCTION &apos;TR_TADIR_INTERFACE&apos;
    EXPORTING
      wi_test_modus                  = &apos; &apos;
      wi_delete_tadir_entry          = &apos;X&apos;
      wi_tadir_pgmid                 = l_pgmid
      wi_tadir_object                = l_object
      wi_tadir_obj_name              = l_obj_name
      wi_tadir_srcsystem             = l_srcsystem
      wi_tadir_author                = l_author
      wi_tadir_devclass              = l_devclass
      wi_tadir_masterlang            = l_masterlang
      iv_set_edtflag                 = &apos;&apos;
    EXCEPTIONS
      tadir_entry_not_existing       = 1
      tadir_entry_ill_type           = 2
      no_systemname                  = 3
      no_systemtype                  = 4
      original_system_conflict       = 5
      object_reserved_for_devclass   = 6
      object_exists_global           = 7
      object_exists_local            = 8
      object_is_distributed          = 9
      obj_specification_not_unique   = 10
      no_authorization_to_delete     = 11
      devclass_not_existing          = 12
      simultanious_set_remove_repair = 13
      order_missing                  = 14
      no_modification_of_head_syst   = 15
      pgmid_object_not_allowed       = 16
      masterlanguage_not_specified   = 17
      devclass_not_specified         = 18
      specify_owner_unique           = 19
      loc_priv_objs_no_repair        = 20
      gtadir_not_reached             = 21
      object_locked_for_order        = 22
      change_of_class_not_allowed    = 23
      no_change_from_sap_to_tmp      = 24
      OTHERS                         = 25.
  IF sy-subrc NE 0.
    CASE sy-subrc.
      WHEN 1 OR 9 OR 7 OR 8. &quot;OK! - Doesn&apos;t exist yet
      WHEN 11 OR 23 OR 24.
        RAISE EXCEPTION TYPE zcx_saplink
          EXPORTING textid = zcx_saplink=&gt;not_authorized.
      WHEN 22.
        RAISE EXCEPTION TYPE zcx_saplink
          EXPORTING textid = zcx_saplink=&gt;locked.
      WHEN OTHERS.
        RAISE EXCEPTION TYPE zcx_saplink
          EXPORTING textid = zcx_saplink=&gt;system_error.
    ENDCASE.
  ENDIF.

  CALL FUNCTION &apos;DDIF_SHLP_PUT&apos;
    EXPORTING
      name              = l_dd_objname
      dd30v_wa          = dd30v_wa
    TABLES
      dd31v_tab         = dd31v_tab
      dd32p_tab         = dd32p_tab
      dd33v_tab         = dd33v_tab
    EXCEPTIONS
      shlp_not_found    = 1
      name_inconsistent = 2
      shlp_inconsistent = 3
      put_failure       = 4
      put_refused       = 5
      OTHERS            = 6.

  IF sy-subrc &lt;&gt; 0.
    RAISE EXCEPTION TYPE zcx_saplink
      EXPORTING textid = zcx_saplink=&gt;system_error.
  ENDIF.

  DATA: trobjtype  TYPE trobjtype,
        trobj_name TYPE trobj_name.
  trobjtype  = l_object.
  trobj_name = l_obj_name.
  CALL FUNCTION &apos;RS_INSERT_INTO_WORKING_AREA&apos;
    EXPORTING
      object            = trobjtype
      obj_name          = trobj_name
    EXCEPTIONS
      wrong_object_name = 1.

  name = objName.
ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZSAPLINK" CMPNAME="DELETEOBJECT" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>method DELETEOBJECT.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   The code of this project is provided to you under the current     |
*|   version of the SAP Code Exchange Terms of Use. You can find the   |
*|   text on the SAP Code Exchange webpage at http://www.sdn.sap.com   |
*|                                                                     |
*|   SAPlink is provided to you AS IS with no guarantee, warranty or   |
*|   support.                                                          |
*\---------------------------------------------------------------------/

*      Plugin created by:
*      Thomas Jung
*      thomas.jung1@gmail.com

endmethod.</source>
  </method>
  <method CLSNAME="ZSAPLINK" CMPNAME="GETOBJECTTYPE" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>method GETOBJECTTYPE.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   The code of this project is provided to you under the current     |
*|   version of the SAP Code Exchange Terms of Use. You can find the   |
*|   text on the SAP Code Exchange webpage at http://www.sdn.sap.com   |
*|                                                                     |
*|   SAPlink is provided to you AS IS with no guarantee, warranty or   |
*|   support.                                                          |
*\---------------------------------------------------------------------/

*      Plugin created by:
*      Thomas Jung
*      thomas.jung1@gmail.com

  objecttype = &apos;SHLP&apos;.  &quot;Search Helps
endmethod.</source>
  </method>
 </CLAS>
 <CLAS CLSNAME="ZSAPLINK_TABLE_TECH_SETTINGS" VERSION="1" LANGU="E" DESCRIPT="SAPlink - Data Dictionary - Table Technical Settings" CATEGORY="00" EXPOSURE="2" STATE="1" RELEASE="0" CLSFINAL="X" CLSCCINCL="X" FIXPT="X" UNICODE="X" CLSBCCAT="00" DURATION_TYPE="0 " RISK_LEVEL="0 " REFCLSNAME="ZSAPLINK">
  <localImplementation>*&quot;* local class implementation for public class
*&quot;* use this source file for the implementation part of
*&quot;* local helper classes</localImplementation>
  <localTypes>*&quot;* use this source file for any type declarations (class
*&quot;* definitions, interfaces or data types) you need for method
*&quot;* implementation or private method&apos;s signature</localTypes>
  <localMacros>*&quot;* use this source file for any macro definitions you need
*&quot;* in the implementation part of the class</localMacros>
  <inheritance CLSNAME="ZSAPLINK_TABLE_TECH_SETTINGS" REFCLSNAME="ZSAPLINK" VERSION="1" STATE="1">
   <redefinition CLSNAME="ZSAPLINK_TABLE_TECH_SETTINGS" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="CHECKEXISTS" EXPOSURE="2"/>
   <redefinition CLSNAME="ZSAPLINK_TABLE_TECH_SETTINGS" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="CREATEIXMLDOCFROMOBJECT" EXPOSURE="2"/>
   <redefinition CLSNAME="ZSAPLINK_TABLE_TECH_SETTINGS" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="CREATEOBJECTFROMIXMLDOC" EXPOSURE="2"/>
   <redefinition CLSNAME="ZSAPLINK_TABLE_TECH_SETTINGS" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="DELETEOBJECT" EXPOSURE="1"/>
   <redefinition CLSNAME="ZSAPLINK_TABLE_TECH_SETTINGS" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="GETOBJECTTYPE" EXPOSURE="1"/>
  </inheritance>
  <method CLSNAME="ZSAPLINK" CMPNAME="CHECKEXISTS" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/
METHOD CHECKEXISTS.

  DATA: l_name TYPE ddobjname,
        dd09l_wa type dd09l.
  l_name = objname.

  CALL FUNCTION &apos;DDIF_TABT_GET&apos;
    EXPORTING
      name                = l_name
    IMPORTING
      DD09l_WA            = DD09l_WA
    EXCEPTIONS
      ILLEGAL_INPUT       = 1
      OTHERS              = 2.
  IF sy-subrc = 0 AND dd09l_wa-TABNAME IS NOT INITIAL.
    exists = &apos;X&apos;.
  ENDIF.


ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZSAPLINK" CMPNAME="CREATEIXMLDOCFROMOBJECT" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/
METHOD CREATEIXMLDOCFROMOBJECT.

  DATA: gotstate TYPE ddgotstate,
        dd09l_wa TYPE dd09l.

*xml nodes
  DATA rootnode   TYPE REF TO if_ixml_element.
  DATA rc         TYPE sysubrc.
  DATA _tabtname  TYPE ddobjname.
  _tabtname = objname.

  CALL FUNCTION &apos;DDIF_TABT_GET&apos;
    EXPORTING
      name          = _tabtname
    IMPORTING
      gotstate      = gotstate
      dd09l_wa      = dd09l_wa
    EXCEPTIONS
      illegal_input = 1
      OTHERS        = 2.

  IF sy-subrc &lt;&gt; 0 OR dd09l_wa-tabname IS INITIAL.
    RAISE EXCEPTION TYPE zcx_saplink
      EXPORTING textid = zcx_saplink=&gt;not_found.
  ENDIF.

* Create parent node
  DATA _objtype TYPE string.
  _objtype = getobjecttype( ).
  rootnode = xmldoc-&gt;create_element( _objtype ).
  setattributesfromstructure( node = rootnode structure = dd09l_wa ).

*\--------------------------------------------------------------------/
  rc = xmldoc-&gt;append_child( rootnode ).
  ixmldocument = xmldoc.
ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZSAPLINK" CMPNAME="CREATEOBJECTFROMIXMLDOC" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/
METHOD CREATEOBJECTFROMIXMLDOC.

  DATA: gotstate TYPE ddgotstate,
        dd09l_wa TYPE dd09l.

*xml nodes
  DATA rootnode    TYPE REF TO if_ixml_element.
  DATA rc          TYPE sysubrc.
  DATA _tabtname   TYPE ddobjname.
  DATA _devclass   TYPE devclass.
  DATA checkexists TYPE flag.
  DATA _objtype    TYPE string.

  _devclass = devclass.
  _objtype = getobjecttype( ).

  xmldoc = ixmldocument.
  rootnode = xmldoc-&gt;find_from_name( _objtype ).

  CALL METHOD getstructurefromattributes
    EXPORTING
      node      = rootnode
    CHANGING
      structure = dd09l_wa.

  objname = dd09l_wa-tabname.

  checkexists = checkexists( ).
  IF checkexists IS NOT INITIAL.
    IF overwrite IS INITIAL.
      RAISE EXCEPTION TYPE zcx_saplink
        EXPORTING textid = zcx_saplink=&gt;existing.
    ELSE.
*     delete object for new install
      deleteobject( ).
    ENDIF.
  ENDIF.

  DATA : l_pgmid         TYPE tadir-pgmid,
           l_object      TYPE tadir-object,
           l_obj_name    TYPE tadir-obj_name,
           l_dd_objname  TYPE ddobjname,
           l_srcsystem   TYPE tadir-srcsystem,
           l_author      TYPE tadir-author,
           l_devclass    TYPE tadir-devclass,
           l_masterlang  TYPE tadir-masterlang.


  l_pgmid      = &apos;R3TR&apos;.
  l_object     = _objtype.
  l_obj_name   = objname.
  l_dd_objname = objname.
  l_srcsystem  = sy-sysid.
  l_author     = sy-uname.
  l_devclass   = _devclass.
  l_masterlang = sy-langu.

  DATA: itadir TYPE tadir.
  itadir-pgmid      = l_pgmid.
  itadir-object     = l_object.
  itadir-obj_name   = l_obj_name.
  itadir-srcsystem  = l_srcsystem.
  itadir-author     = l_author.
  itadir-devclass   = l_devclass.
  itadir-masterlang = l_masterlang.
  MODIFY tadir FROM itadir.

  CALL FUNCTION &apos;TR_TADIR_INTERFACE&apos;
    EXPORTING
      wi_test_modus                  = &apos; &apos;
      wi_delete_tadir_entry          = &apos;X&apos;
      wi_tadir_pgmid                 = l_pgmid
      wi_tadir_object                = l_object
      wi_tadir_obj_name              = l_obj_name
      wi_tadir_srcsystem             = l_srcsystem
      wi_tadir_author                = l_author
      wi_tadir_devclass              = l_devclass
      wi_tadir_masterlang            = l_masterlang
      iv_set_edtflag                 = &apos;&apos;
    EXCEPTIONS
      tadir_entry_not_existing       = 1
      tadir_entry_ill_type           = 2
      no_systemname                  = 3
      no_systemtype                  = 4
      original_system_conflict       = 5
      object_reserved_for_devclass   = 6
      object_exists_global           = 7
      object_exists_local            = 8
      object_is_distributed          = 9
      obj_specification_not_unique   = 10
      no_authorization_to_delete     = 11
      devclass_not_existing          = 12
      simultanious_set_remove_repair = 13
      order_missing                  = 14
      no_modification_of_head_syst   = 15
      pgmid_object_not_allowed       = 16
      masterlanguage_not_specified   = 17
      devclass_not_specified         = 18
      specify_owner_unique           = 19
      loc_priv_objs_no_repair        = 20
      gtadir_not_reached             = 21
      object_locked_for_order        = 22
      change_of_class_not_allowed    = 23
      no_change_from_sap_to_tmp      = 24
      OTHERS                         = 25.
  IF sy-subrc NE 0.
    CASE sy-subrc.
      WHEN 1 OR 9 OR 7 OR 8. &quot;OK! - Doesn&apos;t exist yet
      WHEN 11 OR 23 OR 24.
        RAISE EXCEPTION TYPE zcx_saplink
          EXPORTING textid = zcx_saplink=&gt;not_authorized.
      WHEN 22.
        RAISE EXCEPTION TYPE zcx_saplink
          EXPORTING textid = zcx_saplink=&gt;locked.
      WHEN OTHERS.
        RAISE EXCEPTION TYPE zcx_saplink
          EXPORTING textid = zcx_saplink=&gt;system_error.
    ENDCASE.
  ENDIF.

  CALL FUNCTION &apos;DDIF_TABT_PUT&apos;
    EXPORTING
      name              = l_dd_objname
      dd09L_wa          = dd09l_wa
    EXCEPTIONS
      tabt_not_found    = 1
      name_inconsistent = 2
      tabt_inconsistent = 3
      put_failure       = 4
      put_refused       = 5
      OTHERS            = 6.

  IF sy-subrc &lt;&gt; 0.
    RAISE EXCEPTION TYPE zcx_saplink
      EXPORTING textid = zcx_saplink=&gt;system_error.
  ENDIF.

  DATA: trobjtype  TYPE trobjtype,
        trobj_name TYPE trobj_name.
  trobjtype  = l_object.
  trobj_name = l_obj_name.
  CALL FUNCTION &apos;RS_INSERT_INTO_WORKING_AREA&apos;
    EXPORTING
      object            = trobjtype
      obj_name          = trobj_name
    EXCEPTIONS
      wrong_object_name = 1.

  name = objName.
ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZSAPLINK" CMPNAME="DELETEOBJECT" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/
method DELETEOBJECT.
endmethod.</source>
  </method>
  <method CLSNAME="ZSAPLINK" CMPNAME="GETOBJECTTYPE" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/
method GETOBJECTTYPE.
  objecttype = &apos;TABT&apos;.  &quot;Table Technical Settings
endmethod.</source>
  </method>
 </CLAS>
 <CLAS CLSNAME="ZSAPLINK_TABLES" VERSION="1" LANGU="E" DESCRIPT="SAPlink - Data Dictionary  - Tables/Structures" CATEGORY="00" EXPOSURE="2" STATE="1" RELEASE="0" CLSFINAL="X" CLSCCINCL="X" FIXPT="X" UNICODE="X" CLSBCCAT="00" DURATION_TYPE="0 " RISK_LEVEL="0 " REFCLSNAME="ZSAPLINK">
  <localImplementation>*&quot;* local class implementation for public class
*&quot;* use this source file for the implementation part of
*&quot;* local helper classes</localImplementation>
  <localTypes>*&quot;* use this source file for any type declarations (class
*&quot;* definitions, interfaces or data types) you need for method
*&quot;* implementation or private method&apos;s signature</localTypes>
  <localMacros>*&quot;* use this source file for any macro definitions you need
*&quot;* in the implementation part of the class</localMacros>
  <inheritance CLSNAME="ZSAPLINK_TABLES" REFCLSNAME="ZSAPLINK" VERSION="1" STATE="1">
   <redefinition CLSNAME="ZSAPLINK_TABLES" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="CHECKEXISTS" EXPOSURE="2"/>
   <redefinition CLSNAME="ZSAPLINK_TABLES" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="CREATEIXMLDOCFROMOBJECT" EXPOSURE="2"/>
   <redefinition CLSNAME="ZSAPLINK_TABLES" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="CREATEOBJECTFROMIXMLDOC" EXPOSURE="2"/>
   <redefinition CLSNAME="ZSAPLINK_TABLES" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="DELETEOBJECT" EXPOSURE="1"/>
   <redefinition CLSNAME="ZSAPLINK_TABLES" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="GETOBJECTTYPE" EXPOSURE="1"/>
  </inheritance>
  <method CLSNAME="ZSAPLINK" CMPNAME="CHECKEXISTS" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>METHOD checkexists.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   The code of this project is provided to you under the current     |
*|   version of the SAP Code Exchange Terms of Use. You can find the   |
*|   text on the SAP Code Exchange webpage at http://www.sdn.sap.com   |
*|                                                                     |
*|   SAPlink is provided to you AS IS with no guarantee, warranty or   |
*|   support.                                                          |
*\---------------------------------------------------------------------/
*      Plugin created by:
*      Thomas Jung
*      thomas.jung1@gmail.com

  DATA: l_name TYPE ddobjname,
        dd02v_wa TYPE dd02v.
  l_name = objname.

  CALL FUNCTION &apos;DDIF_TABL_GET&apos;
    EXPORTING
      name          = l_name
    IMPORTING
      dd02v_wa      = dd02v_wa
    EXCEPTIONS
      illegal_input = 1
      OTHERS        = 2.
  IF sy-subrc = 0 AND dd02v_wa-tabname IS NOT INITIAL.
    exists = &apos;X&apos;.
  ENDIF.


ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZSAPLINK" CMPNAME="CREATEIXMLDOCFROMOBJECT" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>METHOD createixmldocfromobject.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   The code of this project is provided to you under the current     |
*|   version of the SAP Code Exchange Terms of Use. You can find the   |
*|   text on the SAP Code Exchange webpage at http://www.sdn.sap.com   |
*|                                                                     |
*|   SAPlink is provided to you AS IS with no guarantee, warranty or   |
*|   support.                                                          |
*\---------------------------------------------------------------------/
*      Plugin created by:
*      Thomas Jung
*      thomas.jung1@gmail.com

  DATA: gotstate  TYPE ddgotstate,
        dd02v_wa  TYPE dd02v,
        dd09l_wa  TYPE dd09v,
        dd03p_tab TYPE STANDARD TABLE OF dd03p,
        dd03p_wa  LIKE LINE OF dd03p_tab,
        dd05m_tab TYPE STANDARD TABLE OF dd05m,
        dd05m_wa  LIKE LINE OF dd05m_tab,
        dd08v_tab TYPE STANDARD TABLE OF dd08v,
        dd08v_wa  LIKE LINE OF dd08v_tab,
        dd12v_tab TYPE STANDARD TABLE OF dd12v,
        dd12v_wa  LIKE LINE OF dd12v_tab,
        dd17v_tab TYPE STANDARD TABLE OF dd17v,
        dd17v_wa  LIKE LINE OF dd17v_tab,
        dd35v_tab TYPE STANDARD TABLE OF dd35v,
        dd35v_wa  LIKE LINE OF dd35v_tab,
        dd36m_tab TYPE STANDARD TABLE OF dd36m,
        dd36m_wa  LIKE LINE OF dd36m_tab.

*xml nodes
  DATA rootnode   TYPE REF TO if_ixml_element.
  DATA dd09l_node TYPE REF TO if_ixml_element.
  DATA dd03p_node TYPE REF TO if_ixml_element.
  DATA dd05m_node TYPE REF TO if_ixml_element.
  DATA dd08v_node TYPE REF TO if_ixml_element.
  DATA dd12v_node TYPE REF TO if_ixml_element.
  DATA dd17v_node TYPE REF TO if_ixml_element.
  DATA dd35v_node TYPE REF TO if_ixml_element.
  DATA dd36m_node TYPE REF TO if_ixml_element.
  DATA rc         TYPE sysubrc.
  DATA _tablname  TYPE ddobjname.
  _tablname = objname.

  CALL FUNCTION &apos;DDIF_TABL_GET&apos;
    EXPORTING
      name          = _tablname
      langu         = sy-langu
    IMPORTING
      gotstate      = gotstate
      dd02v_wa      = dd02v_wa
      dd09l_wa      = dd09l_wa
    TABLES
      dd03p_tab     = dd03p_tab
      dd05m_tab     = dd05m_tab
      dd08v_tab     = dd08v_tab
      dd12v_tab     = dd12v_tab
      dd17v_tab     = dd17v_tab
      dd35v_tab     = dd35v_tab
      dd36m_tab     = dd36m_tab
    EXCEPTIONS
      illegal_input = 1
      OTHERS        = 2.

  IF sy-subrc &lt;&gt; 0 OR dd02v_wa-tabname IS INITIAL.
    RAISE EXCEPTION TYPE zcx_saplink
      EXPORTING textid = zcx_saplink=&gt;not_found.
  ENDIF.

* Create parent node
  DATA _objtype TYPE string.
  _objtype = getobjecttype( ).
  rootnode = xmldoc-&gt;create_element( _objtype ).
  setattributesfromstructure( node = rootnode structure = dd02v_wa ).

  dd09l_node = xmldoc-&gt;create_element( &apos;dd09l&apos; ).
  setattributesfromstructure( node = dd09l_node structure = dd09l_wa ).
  rc = rootnode-&gt;append_child( dd09l_node ).

  LOOP AT dd03p_tab INTO dd03p_wa.
    dd03p_node = xmldoc-&gt;create_element( &apos;dd03p&apos; ).
    setattributesfromstructure( node = dd03p_node structure = dd03p_wa ).
    rc = rootnode-&gt;append_child( dd03p_node ).
  ENDLOOP.

  LOOP AT dd05m_tab INTO dd05m_wa.
    dd05m_node = xmldoc-&gt;create_element( &apos;dd05m&apos; ).
    setattributesfromstructure( node = dd05m_node structure = dd05m_wa ).
    rc = rootnode-&gt;append_child( dd05m_node ).
  ENDLOOP.

  LOOP AT dd08v_tab INTO dd08v_wa.
    dd08v_node = xmldoc-&gt;create_element( &apos;dd08v&apos; ).
    setattributesfromstructure( node = dd08v_node structure = dd08v_wa ).
    rc = rootnode-&gt;append_child( dd08v_node ).
  ENDLOOP.

  LOOP AT dd12v_tab INTO dd12v_wa.
    dd12v_node = xmldoc-&gt;create_element( &apos;dd12v&apos; ).
    setattributesfromstructure( node = dd12v_node structure = dd12v_wa ).
    rc = rootnode-&gt;append_child( dd12v_node ).
  ENDLOOP.

  LOOP AT dd17v_tab INTO dd17v_wa.
    dd17v_node = xmldoc-&gt;create_element( &apos;dd17v&apos; ).
    setattributesfromstructure( node = dd17v_node structure = dd17v_wa ).
    rc = rootnode-&gt;append_child( dd17v_node ).
  ENDLOOP.

  LOOP AT dd35v_tab INTO dd35v_wa.
    dd35v_node = xmldoc-&gt;create_element( &apos;dd35v&apos; ).
    setattributesfromstructure( node = dd35v_node structure = dd35v_wa ).
    rc = rootnode-&gt;append_child( dd35v_node ).
  ENDLOOP.

  LOOP AT dd36m_tab INTO dd36m_wa.
    dd36m_node = xmldoc-&gt;create_element( &apos;dd36m&apos; ).
    setattributesfromstructure( node = dd36m_node structure = dd36m_wa ).
    rc = rootnode-&gt;append_child( dd36m_node ).
  ENDLOOP.

*\--------------------------------------------------------------------/
  rc = xmldoc-&gt;append_child( rootnode ).
  ixmldocument = xmldoc.
ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZSAPLINK" CMPNAME="CREATEOBJECTFROMIXMLDOC" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>METHOD createobjectfromixmldoc.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   The code of this project is provided to you under the current     |
*|   version of the SAP Code Exchange Terms of Use. You can find the   |
*|   text on the SAP Code Exchange webpage at http://www.sdn.sap.com   |
*|                                                                     |
*|   SAPlink is provided to you AS IS with no guarantee, warranty or   |
*|   support.                                                          |
*\---------------------------------------------------------------------/
*      Plugin created by:
*      Thomas Jung
*      thomas.jung1@gmail.com

  DATA: gotstate  TYPE ddgotstate,
        dd02v_wa  TYPE dd02v,
        dd09l_wa  TYPE dd09v,
        dd03p_tab TYPE STANDARD TABLE OF dd03p,
        dd03p_wa  LIKE LINE OF dd03p_tab,
        dd05m_tab TYPE STANDARD TABLE OF dd05m,
        dd05m_wa  LIKE LINE OF dd05m_tab,
        dd08v_tab TYPE STANDARD TABLE OF dd08v,
        dd08v_wa  LIKE LINE OF dd08v_tab,
        dd12v_tab TYPE STANDARD TABLE OF dd12v,
        dd12v_wa  LIKE LINE OF dd12v_tab,
        dd17v_tab TYPE STANDARD TABLE OF dd17v,
        dd17v_wa  LIKE LINE OF dd17v_tab,
        dd35v_tab TYPE STANDARD TABLE OF dd35v,
        dd35v_wa  LIKE LINE OF dd35v_tab,
        dd36m_tab TYPE STANDARD TABLE OF dd36m,
        dd36m_wa  LIKE LINE OF dd36m_tab.

*xml nodes
  DATA rootnode    TYPE REF TO if_ixml_element.
  DATA dd09l_node  TYPE REF TO if_ixml_element.
  DATA dd03p_node  TYPE REF TO if_ixml_element.
  DATA dd05m_node  TYPE REF TO if_ixml_element.
  DATA dd08v_node  TYPE REF TO if_ixml_element.
  DATA dd12v_node  TYPE REF TO if_ixml_element.
  DATA dd17v_node  TYPE REF TO if_ixml_element.
  DATA dd35v_node  TYPE REF TO if_ixml_element.
  DATA dd36m_node  TYPE REF TO if_ixml_element.
  DATA node        TYPE REF TO if_ixml_element.
  DATA filter      TYPE REF TO if_ixml_node_filter.
  DATA iterator    TYPE REF TO if_ixml_node_iterator.
  DATA rc          TYPE sysubrc.
  DATA _tablname   TYPE ddobjname.
  DATA _devclass   TYPE devclass.
  DATA checkexists TYPE flag.
  DATA _objtype    TYPE string.
  DATA _objname    TYPE string.

  _devclass = devclass.
  _objtype = getobjecttype( ).

  xmldoc = ixmldocument.
  rootnode = xmldoc-&gt;find_from_name( _objtype ).

  CALL METHOD getstructurefromattributes
    EXPORTING
      node      = rootnode
    CHANGING
      structure = dd02v_wa.

  objname = dd02v_wa-tabname.

  checkexists = checkexists( ).
  IF checkexists IS NOT INITIAL.
    IF overwrite IS INITIAL.
      RAISE EXCEPTION TYPE zcx_saplink
        EXPORTING
          textid = zcx_saplink=&gt;existing.
    ELSE.
*     delete object for new install
      deleteobject( ).
    ENDIF.
  ENDIF.

  dd09l_node = xmldoc-&gt;find_from_name( &apos;dd09l&apos; ).

  CALL METHOD getstructurefromattributes
    EXPORTING
      node      = dd09l_node
    CHANGING
      structure = dd09l_wa.

* retrieve Tabl details
  FREE: filter, iterator, node.
  filter = xmldoc-&gt;create_filter_name( &apos;dd03p&apos; ).
  iterator = xmldoc-&gt;create_iterator_filtered( filter ).
  node ?= iterator-&gt;get_next( ).
  WHILE node IS NOT INITIAL.
    CLEAR dd03p_node.
    CALL METHOD getstructurefromattributes
      EXPORTING
        node      = node
      CHANGING
        structure = dd03p_wa.
    APPEND dd03p_wa TO dd03p_tab.
    node ?= iterator-&gt;get_next( ).
  ENDWHILE.

  FREE: filter, iterator, node.
  filter = xmldoc-&gt;create_filter_name( &apos;dd05m&apos; ).
  iterator = xmldoc-&gt;create_iterator_filtered( filter ).
  node ?= iterator-&gt;get_next( ).
  WHILE node IS NOT INITIAL.
    CLEAR dd05m_node.
    CALL METHOD getstructurefromattributes
      EXPORTING
        node      = node
      CHANGING
        structure = dd05m_wa.
    APPEND dd05m_wa TO dd05m_tab.
    node ?= iterator-&gt;get_next( ).
  ENDWHILE.

  FREE: filter, iterator, node.
  filter = xmldoc-&gt;create_filter_name( &apos;dd08v&apos; ).
  iterator = xmldoc-&gt;create_iterator_filtered( filter ).
  node ?= iterator-&gt;get_next( ).
  WHILE node IS NOT INITIAL.
    CLEAR dd08v_node.
    CALL METHOD getstructurefromattributes
      EXPORTING
        node      = node
      CHANGING
        structure = dd08v_wa.
    APPEND dd08v_wa TO dd08v_tab.
    node ?= iterator-&gt;get_next( ).
  ENDWHILE.

  FREE: filter, iterator, node.
  filter = xmldoc-&gt;create_filter_name( &apos;dd12v&apos; ).
  iterator = xmldoc-&gt;create_iterator_filtered( filter ).
  node ?= iterator-&gt;get_next( ).
  WHILE node IS NOT INITIAL.
    CLEAR dd12v_node.
    CALL METHOD getstructurefromattributes
      EXPORTING
        node      = node
      CHANGING
        structure = dd12v_wa.
    APPEND dd12v_wa TO dd12v_tab.
    node ?= iterator-&gt;get_next( ).
  ENDWHILE.

  FREE: filter, iterator, node.
  filter = xmldoc-&gt;create_filter_name( &apos;dd17v&apos; ).
  iterator = xmldoc-&gt;create_iterator_filtered( filter ).
  node ?= iterator-&gt;get_next( ).
  WHILE node IS NOT INITIAL.
    CLEAR dd17v_node.
    CALL METHOD getstructurefromattributes
      EXPORTING
        node      = node
      CHANGING
        structure = dd17v_wa.
    APPEND dd17v_wa TO dd17v_tab.
    node ?= iterator-&gt;get_next( ).
  ENDWHILE.

  FREE: filter, iterator, node.
  filter = xmldoc-&gt;create_filter_name( &apos;dd35v&apos; ).
  iterator = xmldoc-&gt;create_iterator_filtered( filter ).
  node ?= iterator-&gt;get_next( ).
  WHILE node IS NOT INITIAL.
    CLEAR dd35v_node.
    CALL METHOD getstructurefromattributes
      EXPORTING
        node      = node
      CHANGING
        structure = dd35v_wa.
    APPEND dd35v_wa TO dd35v_tab.
    node ?= iterator-&gt;get_next( ).
  ENDWHILE.

  FREE: filter, iterator, node.
  filter = xmldoc-&gt;create_filter_name( &apos;dd36m&apos; ).
  iterator = xmldoc-&gt;create_iterator_filtered( filter ).
  node ?= iterator-&gt;get_next( ).
  WHILE node IS NOT INITIAL.
    CLEAR dd36m_node.
    CALL METHOD getstructurefromattributes
      EXPORTING
        node      = node
      CHANGING
        structure = dd36m_wa.
    APPEND dd36m_wa TO dd36m_tab.
    node ?= iterator-&gt;get_next( ).
  ENDWHILE.

  DATA : l_pgmid         TYPE tadir-pgmid,
           l_object      TYPE tadir-object,
           l_obj_name    TYPE tadir-obj_name,
           l_dd_objname  TYPE ddobjname,
           l_srcsystem   TYPE tadir-srcsystem,
           l_author      TYPE tadir-author,
           l_devclass    TYPE tadir-devclass,
           l_masterlang  TYPE tadir-masterlang.


  l_pgmid      = &apos;R3TR&apos;.
  l_object     = _objtype.
  l_obj_name   = objname.
  l_dd_objname = objname.
  l_srcsystem  = sy-sysid.
  l_author     = sy-uname.
  l_devclass   = _devclass.
  l_masterlang = sy-langu.

  DATA: itadir TYPE tadir.
  itadir-pgmid      = l_pgmid.
  itadir-object     = l_object.
  itadir-obj_name   = l_obj_name.
  itadir-srcsystem  = l_srcsystem.
  itadir-author     = l_author.
  itadir-devclass   = l_devclass.
  itadir-masterlang = l_masterlang.
  MODIFY tadir FROM itadir.

  CALL FUNCTION &apos;TR_TADIR_INTERFACE&apos;
    EXPORTING
      wi_test_modus                  = &apos; &apos;
      wi_delete_tadir_entry          = &apos;X&apos;
      wi_tadir_pgmid                 = l_pgmid
      wi_tadir_object                = l_object
      wi_tadir_obj_name              = l_obj_name
      wi_tadir_srcsystem             = l_srcsystem
      wi_tadir_author                = l_author
      wi_tadir_devclass              = l_devclass
      wi_tadir_masterlang            = l_masterlang
      iv_set_edtflag                 = &apos;&apos;
    EXCEPTIONS
      tadir_entry_not_existing       = 1
      tadir_entry_ill_type           = 2
      no_systemname                  = 3
      no_systemtype                  = 4
      original_system_conflict       = 5
      object_reserved_for_devclass   = 6
      object_exists_global           = 7
      object_exists_local            = 8
      object_is_distributed          = 9
      obj_specification_not_unique   = 10
      no_authorization_to_delete     = 11
      devclass_not_existing          = 12
      simultanious_set_remove_repair = 13
      order_missing                  = 14
      no_modification_of_head_syst   = 15
      pgmid_object_not_allowed       = 16
      masterlanguage_not_specified   = 17
      devclass_not_specified         = 18
      specify_owner_unique           = 19
      loc_priv_objs_no_repair        = 20
      gtadir_not_reached             = 21
      object_locked_for_order        = 22
      change_of_class_not_allowed    = 23
      no_change_from_sap_to_tmp      = 24
      OTHERS                         = 25.
  IF sy-subrc NE 0.
    CASE sy-subrc.
      WHEN 1 OR 9 OR 7 OR 8. &quot;OK! - Doesn&apos;t exist yet
      WHEN 11 OR 23 OR 24.
        RAISE EXCEPTION TYPE zcx_saplink
          EXPORTING
            textid = zcx_saplink=&gt;not_authorized.
      WHEN 22.
        _objname = l_obj_name.
        RAISE EXCEPTION TYPE zcx_saplink
          EXPORTING
            textid = zcx_saplink=&gt;locked
            object = _objname.
      WHEN OTHERS.
        RAISE EXCEPTION TYPE zcx_saplink
          EXPORTING
            textid = zcx_saplink=&gt;system_error.
    ENDCASE.
  ENDIF.

  CALL FUNCTION &apos;DDIF_TABL_PUT&apos;
    EXPORTING
      name              = l_dd_objname
      dd02v_wa          = dd02v_wa
      dd09l_wa          = dd09l_wa
    TABLES
      dd03p_tab         = dd03p_tab
      dd05m_tab         = dd05m_tab
      dd08v_tab         = dd08v_tab
      dd35v_tab         = dd35v_tab
      dd36m_tab         = dd36m_tab
    EXCEPTIONS
      tabl_not_found    = 1
      name_inconsistent = 2
      tabl_inconsistent = 3
      put_failure       = 4
      put_refused       = 5
      OTHERS            = 6.

  IF sy-subrc &lt;&gt; 0.
    RAISE EXCEPTION TYPE zcx_saplink
      EXPORTING
        textid = zcx_saplink=&gt;system_error.
  ENDIF.

  DATA: trobjtype  TYPE trobjtype,
        trobj_name TYPE trobj_name.
  trobjtype  = l_object.
  trobj_name = l_obj_name.
  CALL FUNCTION &apos;RS_INSERT_INTO_WORKING_AREA&apos;
    EXPORTING
      object            = trobjtype
      obj_name          = trobj_name
    EXCEPTIONS
      wrong_object_name = 1.

  name = objname.
ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZSAPLINK" CMPNAME="DELETEOBJECT" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>method DELETEOBJECT.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   The code of this project is provided to you under the current     |
*|   version of the SAP Code Exchange Terms of Use. You can find the   |
*|   text on the SAP Code Exchange webpage at http://www.sdn.sap.com   |
*|                                                                     |
*|   SAPlink is provided to you AS IS with no guarantee, warranty or   |
*|   support.                                                          |
*\---------------------------------------------------------------------/
*      Plugin created by:
*      Thomas Jung
*      thomas.jung1@gmail.com

endmethod.</source>
  </method>
  <method CLSNAME="ZSAPLINK" CMPNAME="GETOBJECTTYPE" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>method GETOBJECTTYPE.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   The code of this project is provided to you under the current     |
*|   version of the SAP Code Exchange Terms of Use. You can find the   |
*|   text on the SAP Code Exchange webpage at http://www.sdn.sap.com   |
*|                                                                     |
*|   SAPlink is provided to you AS IS with no guarantee, warranty or   |
*|   support.                                                          |
*\---------------------------------------------------------------------/
*      Plugin created by:
*      Thomas Jung
*      thomas.jung1@gmail.com

  objecttype = &apos;TABL&apos;.  &quot;Tables and Structures
endmethod.</source>
  </method>
 </CLAS>
 <CLAS CLSNAME="ZSAPLINK_VIEW_TECH_SETTINGS" VERSION="1" LANGU="E" DESCRIPT="SAPlink - Data Dictionary - Table Technical Settings" CATEGORY="00" EXPOSURE="2" STATE="1" RELEASE="0" CLSFINAL="X" CLSCCINCL="X" FIXPT="X" UNICODE="X" CLSBCCAT="00" DURATION_TYPE="0 " RISK_LEVEL="0 " REFCLSNAME="ZSAPLINK">
  <localImplementation>*&quot;* local class implementation for public class
*&quot;* use this source file for the implementation part of
*&quot;* local helper classes</localImplementation>
  <localTypes>*&quot;* use this source file for any type declarations (class
*&quot;* definitions, interfaces or data types) you need for method
*&quot;* implementation or private method&apos;s signature</localTypes>
  <localMacros>*&quot;* use this source file for any macro definitions you need
*&quot;* in the implementation part of the class</localMacros>
  <inheritance CLSNAME="ZSAPLINK_VIEW_TECH_SETTINGS" REFCLSNAME="ZSAPLINK" VERSION="1" STATE="1">
   <redefinition CLSNAME="ZSAPLINK_VIEW_TECH_SETTINGS" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="CHECKEXISTS" EXPOSURE="2"/>
   <redefinition CLSNAME="ZSAPLINK_VIEW_TECH_SETTINGS" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="CREATEIXMLDOCFROMOBJECT" EXPOSURE="2"/>
   <redefinition CLSNAME="ZSAPLINK_VIEW_TECH_SETTINGS" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="CREATEOBJECTFROMIXMLDOC" EXPOSURE="2"/>
   <redefinition CLSNAME="ZSAPLINK_VIEW_TECH_SETTINGS" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="DELETEOBJECT" EXPOSURE="1"/>
   <redefinition CLSNAME="ZSAPLINK_VIEW_TECH_SETTINGS" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="GETOBJECTTYPE" EXPOSURE="1"/>
  </inheritance>
  <method CLSNAME="ZSAPLINK" CMPNAME="CHECKEXISTS" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/
METHOD CHECKEXISTS.

*      Plugin created by:
*      Thomas Jung
*      thomas.jung1@gmail.com

  DATA: l_name TYPE ddobjname,
        dd09l_wa type dd09l.
  l_name = objname.

  CALL FUNCTION &apos;DDIF_VIET_GET&apos;
    EXPORTING
      name                = l_name
    IMPORTING
      DD09l_WA            = DD09l_WA
    EXCEPTIONS
      ILLEGAL_INPUT       = 1
      OTHERS              = 2.
  IF sy-subrc = 0 AND dd09l_wa-TABNAME IS NOT INITIAL.
    exists = &apos;X&apos;.
  ENDIF.


ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZSAPLINK" CMPNAME="CREATEIXMLDOCFROMOBJECT" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/
METHOD CREATEIXMLDOCFROMOBJECT.

*      Plugin created by:
*      Thomas Jung
*      thomas.jung1@gmail.com

  DATA: gotstate TYPE ddgotstate,
        dd09l_wa TYPE dd09l.

*xml nodes
  DATA rootnode   TYPE REF TO if_ixml_element.
  DATA rc         TYPE sysubrc.
  DATA _tabtname  TYPE ddobjname.
  _tabtname = objname.

  CALL FUNCTION &apos;DDIF_VIET_GET&apos;
    EXPORTING
      name          = _tabtname
      langu         = sy-langu
    IMPORTING
      gotstate      = gotstate
      dd09l_wa      = dd09l_wa
    EXCEPTIONS
      illegal_input = 1
      OTHERS        = 2.

  IF sy-subrc &lt;&gt; 0 OR dd09l_wa-tabname IS INITIAL.
    RAISE EXCEPTION TYPE zcx_saplink
      EXPORTING textid = zcx_saplink=&gt;not_found.
  ENDIF.

* Create parent node
  DATA _objtype TYPE string.
  _objtype = getobjecttype( ).
  rootnode = xmldoc-&gt;create_element( _objtype ).
  setattributesfromstructure( node = rootnode structure = dd09l_wa ).

*\--------------------------------------------------------------------/
  rc = xmldoc-&gt;append_child( rootnode ).
  ixmldocument = xmldoc.
ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZSAPLINK" CMPNAME="CREATEOBJECTFROMIXMLDOC" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/
METHOD CREATEOBJECTFROMIXMLDOC.

*      Plugin created by:
*      Thomas Jung
*      thomas.jung1@gmail.com

  DATA: gotstate TYPE ddgotstate,
        dd09l_wa TYPE dd09l.

*xml nodes
  DATA rootnode    TYPE REF TO if_ixml_element.
  DATA rc          TYPE sysubrc.
  DATA _tabtname   TYPE ddobjname.
  DATA _devclass   TYPE devclass.
  DATA checkexists TYPE flag.
  DATA _objtype    TYPE string.

  _devclass = devclass.
  _objtype = getobjecttype( ).

  xmldoc = ixmldocument.
  rootnode = xmldoc-&gt;find_from_name( _objtype ).

  CALL METHOD getstructurefromattributes
    EXPORTING
      node      = rootnode
    CHANGING
      structure = dd09l_wa.

  objname = dd09l_wa-tabname.

  checkexists = checkexists( ).
  IF checkexists IS NOT INITIAL.
    IF overwrite IS INITIAL.
      RAISE EXCEPTION TYPE zcx_saplink
        EXPORTING textid = zcx_saplink=&gt;existing.
    ELSE.
*     delete object for new install
      deleteobject( ).
    ENDIF.
  ENDIF.

  DATA : l_pgmid         TYPE tadir-pgmid,
           l_object      TYPE tadir-object,
           l_obj_name    TYPE tadir-obj_name,
           l_dd_objname  TYPE ddobjname,
           l_srcsystem   TYPE tadir-srcsystem,
           l_author      TYPE tadir-author,
           l_devclass    TYPE tadir-devclass,
           l_masterlang  TYPE tadir-masterlang.


  l_pgmid      = &apos;R3TR&apos;.
  l_object     = _objtype.
  l_obj_name   = objname.
  l_dd_objname = objname.
  l_srcsystem  = sy-sysid.
  l_author     = sy-uname.
  l_devclass   = _devclass.
  l_masterlang = sy-langu.

  DATA: itadir TYPE tadir.
  itadir-pgmid      = l_pgmid.
  itadir-object     = l_object.
  itadir-obj_name   = l_obj_name.
  itadir-srcsystem  = l_srcsystem.
  itadir-author     = l_author.
  itadir-devclass   = l_devclass.
  itadir-masterlang = l_masterlang.
  MODIFY tadir FROM itadir.

  CALL FUNCTION &apos;TR_TADIR_INTERFACE&apos;
    EXPORTING
      wi_test_modus                  = &apos; &apos;
      wi_delete_tadir_entry          = &apos;X&apos;
      wi_tadir_pgmid                 = l_pgmid
      wi_tadir_object                = l_object
      wi_tadir_obj_name              = l_obj_name
      wi_tadir_srcsystem             = l_srcsystem
      wi_tadir_author                = l_author
      wi_tadir_devclass              = l_devclass
      wi_tadir_masterlang            = l_masterlang
      iv_set_edtflag                 = &apos;&apos;
    EXCEPTIONS
      tadir_entry_not_existing       = 1
      tadir_entry_ill_type           = 2
      no_systemname                  = 3
      no_systemtype                  = 4
      original_system_conflict       = 5
      object_reserved_for_devclass   = 6
      object_exists_global           = 7
      object_exists_local            = 8
      object_is_distributed          = 9
      obj_specification_not_unique   = 10
      no_authorization_to_delete     = 11
      devclass_not_existing          = 12
      simultanious_set_remove_repair = 13
      order_missing                  = 14
      no_modification_of_head_syst   = 15
      pgmid_object_not_allowed       = 16
      masterlanguage_not_specified   = 17
      devclass_not_specified         = 18
      specify_owner_unique           = 19
      loc_priv_objs_no_repair        = 20
      gtadir_not_reached             = 21
      object_locked_for_order        = 22
      change_of_class_not_allowed    = 23
      no_change_from_sap_to_tmp      = 24
      OTHERS                         = 25.
  IF sy-subrc NE 0.
    CASE sy-subrc.
      WHEN 1 OR 9 OR 7 OR 8. &quot;OK! - Doesn&apos;t exist yet
      WHEN 11 OR 23 OR 24.
        RAISE EXCEPTION TYPE zcx_saplink
          EXPORTING textid = zcx_saplink=&gt;not_authorized.
      WHEN 22.
        RAISE EXCEPTION TYPE zcx_saplink
          EXPORTING textid = zcx_saplink=&gt;locked.
      WHEN OTHERS.
        RAISE EXCEPTION TYPE zcx_saplink
          EXPORTING textid = zcx_saplink=&gt;system_error.
    ENDCASE.
  ENDIF.

  CALL FUNCTION &apos;DDIF_VIET_PUT&apos;
    EXPORTING
      name              = l_dd_objname
      dd09L_wa          = dd09l_wa
    EXCEPTIONS
      viet_not_found    = 1
      name_inconsistent = 2
      viet_inconsistent = 3
      put_failure       = 4
      put_refused       = 5
      OTHERS            = 6.

  IF sy-subrc &lt;&gt; 0.
    RAISE EXCEPTION TYPE zcx_saplink
      EXPORTING textid = zcx_saplink=&gt;system_error.
  ENDIF.

  DATA: trobjtype  TYPE trobjtype,
        trobj_name TYPE trobj_name.
  trobjtype  = l_object.
  trobj_name = l_obj_name.
  CALL FUNCTION &apos;RS_INSERT_INTO_WORKING_AREA&apos;
    EXPORTING
      object            = trobjtype
      obj_name          = trobj_name
    EXCEPTIONS
      wrong_object_name = 1.

  name = objName.
ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZSAPLINK" CMPNAME="DELETEOBJECT" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/
method DELETEOBJECT.

*      Plugin created by:
*      Thomas Jung
*      thomas.jung1@gmail.com

endmethod.</source>
  </method>
  <method CLSNAME="ZSAPLINK" CMPNAME="GETOBJECTTYPE" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/
method GETOBJECTTYPE.

*      Plugin created by:
*      Thomas Jung
*      thomas.jung1@gmail.com

  objecttype = &apos;VIET&apos;.  &quot;View Technical Settings
endmethod.</source>
  </method>
 </CLAS>
 <CLAS CLSNAME="ZSAPLINK_VIEWS" VERSION="1" LANGU="E" DESCRIPT="SAPlink - Data Dictionary  - Views" CATEGORY="00" EXPOSURE="2" STATE="1" RELEASE="0" CLSFINAL="X" CLSCCINCL="X" FIXPT="X" UNICODE="X" CLSBCCAT="00" DURATION_TYPE="0 " RISK_LEVEL="0 " REFCLSNAME="ZSAPLINK">
  <localImplementation>*&quot;* local class implementation for public class
*&quot;* use this source file for the implementation part of
*&quot;* local helper classes</localImplementation>
  <localTypes>*&quot;* use this source file for any type declarations (class
*&quot;* definitions, interfaces or data types) you need for method
*&quot;* implementation or private method&apos;s signature</localTypes>
  <localMacros>*&quot;* use this source file for any macro definitions you need
*&quot;* in the implementation part of the class</localMacros>
  <inheritance CLSNAME="ZSAPLINK_VIEWS" REFCLSNAME="ZSAPLINK" VERSION="1" STATE="1">
   <redefinition CLSNAME="ZSAPLINK_VIEWS" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="CHECKEXISTS" EXPOSURE="2"/>
   <redefinition CLSNAME="ZSAPLINK_VIEWS" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="CREATEIXMLDOCFROMOBJECT" EXPOSURE="2"/>
   <redefinition CLSNAME="ZSAPLINK_VIEWS" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="CREATEOBJECTFROMIXMLDOC" EXPOSURE="2"/>
   <redefinition CLSNAME="ZSAPLINK_VIEWS" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="DELETEOBJECT" EXPOSURE="1"/>
   <redefinition CLSNAME="ZSAPLINK_VIEWS" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="GETOBJECTTYPE" EXPOSURE="1"/>
  </inheritance>
  <method CLSNAME="ZSAPLINK" CMPNAME="CHECKEXISTS" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/
METHOD CHECKEXISTS.

*      Plugin created by:
*      Thomas Jung
*      thomas.jung1@gmail.com

  DATA: l_name TYPE ddobjname,
        dd25v_wa TYPE dd25v.
  l_name = objname.

  CALL FUNCTION &apos;DDIF_VIEW_GET&apos;
    EXPORTING
      name          = l_name
    IMPORTING
      dd25v_wa      = dd25v_wa
    EXCEPTIONS
      illegal_input = 1
      OTHERS        = 2.
  IF sy-subrc = 0 AND dd25v_wa-viewname IS NOT INITIAL.
    exists = &apos;X&apos;.
  ENDIF.


ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZSAPLINK" CMPNAME="CREATEIXMLDOCFROMOBJECT" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/
METHOD CREATEIXMLDOCFROMOBJECT.

*      Plugin created by:
*      Thomas Jung
*      thomas.jung1@gmail.com

  DATA: gotstate  TYPE ddgotstate,
        dd25v_wa  TYPE dd25v,
        dd09l_wa  TYPE dd09v,
        dd26v_tab TYPE STANDARD TABLE OF dd26v,
        dd26v_wa  LIKE LINE OF dd26v_tab,
        dd27p_tab TYPE STANDARD TABLE OF dd27p,
        dd27p_wa  LIKE LINE OF dd27p_tab,
        dd28j_tab TYPE STANDARD TABLE OF dd28j,
        dd28j_wa  LIKE LINE OF dd28j_tab,
        dd28v_tab TYPE STANDARD TABLE OF dd28v,
        dd28v_wa  LIKE LINE OF dd28v_tab.


*xml nodes
  DATA rootnode   TYPE REF TO if_ixml_element.
  DATA dd09l_node TYPE REF TO if_ixml_element.
  DATA dd26v_node TYPE REF TO if_ixml_element.
  DATA dd27p_node TYPE REF TO if_ixml_element.
  DATA dd28j_node TYPE REF TO if_ixml_element.
  DATA dd28v_node TYPE REF TO if_ixml_element.
  DATA rc         TYPE sysubrc.
  DATA _viewname  TYPE ddobjname.
  _viewname = objname.

  CALL FUNCTION &apos;DDIF_VIEW_GET&apos;
    EXPORTING
      name          = _viewname
      langu         = sy-langu
    IMPORTING
      gotstate      = gotstate
      dd25v_wa      = dd25v_wa
      dd09l_wa      = dd09l_wa
    TABLES
      dd26v_tab     = dd26v_tab
      dd27p_tab     = dd27p_tab
      dd28j_tab     = dd28j_tab
      dd28v_tab     = dd28v_tab
    EXCEPTIONS
      illegal_input = 1
      OTHERS        = 2.

  IF sy-subrc &lt;&gt; 0 OR dd25v_wa-viewname IS INITIAL.
    RAISE EXCEPTION TYPE zcx_saplink
      EXPORTING textid = zcx_saplink=&gt;not_found.
  ENDIF.

* Create parent node
  DATA _objtype TYPE string.
  _objtype = getobjecttype( ).
  rootnode = xmldoc-&gt;create_element( _objtype ).
  setattributesfromstructure( node = rootnode structure = dd25v_wa ).

  dd09l_node = xmldoc-&gt;create_element( &apos;dd09l&apos; ).
  setattributesfromstructure( node = dd09l_node structure = dd09l_wa ).
  rc = rootnode-&gt;append_child( dd09l_node ).

  LOOP AT dd26v_tab INTO dd26v_wa.
    dd26v_node = xmldoc-&gt;create_element( &apos;dd26v&apos; ).
    setattributesfromstructure( node = dd26v_node structure = dd26v_wa ).
    rc = rootnode-&gt;append_child( dd26v_node ).
  ENDLOOP.

  LOOP AT dd27p_tab INTO dd27p_wa.
    dd27p_node = xmldoc-&gt;create_element( &apos;dd27p&apos; ).
    setattributesfromstructure( node = dd27p_node structure = dd27p_wa ).
    rc = rootnode-&gt;append_child( dd27p_node ).
  ENDLOOP.

  LOOP AT dd28j_tab INTO dd28j_wa.
    dd28j_node = xmldoc-&gt;create_element( &apos;dd28j&apos; ).
    setattributesfromstructure( node = dd28j_node structure = dd28j_wa ).
    rc = rootnode-&gt;append_child( dd28j_node ).
  ENDLOOP.

  LOOP AT dd28v_tab INTO dd28v_wa.
    dd28v_node = xmldoc-&gt;create_element( &apos;dd28v&apos; ).
    setattributesfromstructure( node = dd28v_node structure = dd28v_wa ).
    rc = rootnode-&gt;append_child( dd28v_node ).
  ENDLOOP.

*\--------------------------------------------------------------------/
  rc = xmldoc-&gt;append_child( rootnode ).
  ixmldocument = xmldoc.
ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZSAPLINK" CMPNAME="CREATEOBJECTFROMIXMLDOC" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/
METHOD CREATEOBJECTFROMIXMLDOC.

*      Plugin created by:
*      Thomas Jung
*      thomas.jung1@gmail.com

  DATA: gotstate  TYPE ddgotstate,
        dd25v_wa  type dd25v,
        dd09l_wa  type dd09v,
        dd26v_tab type standard table of dd26v,
        dd26v_wa  like line of dd26v_tab,
        dd27p_tab type standard table of dd27p,
        dd27p_wa  like line of dd27p_tab,
        dd28j_tab type standard table of dd28j,
        dd28j_wa  like line of dd28j_tab,
        dd28v_tab type standard table of dd28v,
        dd28v_wa  like line of dd28v_tab.

*xml nodes
  DATA rootnode    TYPE REF TO if_ixml_element.
  data dd09l_node type ref to if_ixml_element.
  data dd26v_node type ref to if_ixml_element.
  data dd27p_node type ref to if_ixml_element.
  data dd28j_node type ref to if_ixml_element.
  data dd28v_node type ref to if_ixml_element.
  DATA node        TYPE REF TO if_ixml_element.
  DATA filter      TYPE REF TO if_ixml_node_filter.
  DATA iterator    TYPE REF TO if_ixml_node_iterator.
  DATA rc          TYPE sysubrc.
  DATA _tablname   TYPE ddobjname.
  DATA _devclass   TYPE devclass.
  DATA checkexists TYPE flag.
  DATA _objtype    TYPE string.

  _devclass = devclass.
  _objtype = getobjecttype( ).

  xmldoc = ixmldocument.
  rootnode = xmldoc-&gt;find_from_name( _objtype ).

  CALL METHOD getstructurefromattributes
    EXPORTING
      node      = rootnode
    CHANGING
      structure = dd25v_wa.

  objname = dd25v_wa-viewname.

  checkexists = checkexists( ).
  IF checkexists IS NOT INITIAL.
    IF overwrite IS INITIAL.
      RAISE EXCEPTION TYPE zcx_saplink
        EXPORTING textid = zcx_saplink=&gt;existing.
    ELSE.
*     delete object for new install
      deleteobject( ).
    ENDIF.
  ENDIF.

  dd09l_node = xmldoc-&gt;find_from_name( &apos;dd09l&apos; ).

  CALL METHOD getstructurefromattributes
    EXPORTING
      node      = dd09l_node
    CHANGING
      structure = dd09l_wa.

* retrieve Tabl details
  FREE: filter, iterator, node.
  filter = xmldoc-&gt;create_filter_name( &apos;dd26v&apos; ).
  iterator = xmldoc-&gt;create_iterator_filtered( filter ).
  node ?= iterator-&gt;get_next( ).
  WHILE node IS NOT INITIAL.
    CLEAR dd26v_node.
    CALL METHOD getstructurefromattributes
      EXPORTING
        node      = node
      CHANGING
        structure = dd26v_wa.
    APPEND dd26v_wa TO dd26v_tab.
    node ?= iterator-&gt;get_next( ).
  ENDWHILE.

  FREE: filter, iterator, node.
  filter = xmldoc-&gt;create_filter_name( &apos;dd27p&apos; ).
  iterator = xmldoc-&gt;create_iterator_filtered( filter ).
  node ?= iterator-&gt;get_next( ).
  WHILE node IS NOT INITIAL.
    CLEAR dd27p_node.
    CALL METHOD getstructurefromattributes
      EXPORTING
        node      = node
      CHANGING
        structure = dd27p_wa.
    APPEND dd27p_wa TO dd27p_tab.
    node ?= iterator-&gt;get_next( ).
  ENDWHILE.

  FREE: filter, iterator, node.
  filter = xmldoc-&gt;create_filter_name( &apos;dd28j&apos; ).
  iterator = xmldoc-&gt;create_iterator_filtered( filter ).
  node ?= iterator-&gt;get_next( ).
  WHILE node IS NOT INITIAL.
    CLEAR dd28j_node.
    CALL METHOD getstructurefromattributes
      EXPORTING
        node      = node
      CHANGING
        structure = dd28j_wa.
    APPEND dd28j_wa TO dd28j_tab.
    node ?= iterator-&gt;get_next( ).
  ENDWHILE.

  FREE: filter, iterator, node.
  filter = xmldoc-&gt;create_filter_name( &apos;dd28v&apos; ).
  iterator = xmldoc-&gt;create_iterator_filtered( filter ).
  node ?= iterator-&gt;get_next( ).
  WHILE node IS NOT INITIAL.
    CLEAR dd28v_node.
    CALL METHOD getstructurefromattributes
      EXPORTING
        node      = node
      CHANGING
        structure = dd28v_wa.
    APPEND dd28v_wa TO dd28v_tab.
    node ?= iterator-&gt;get_next( ).
  ENDWHILE.

  DATA : l_pgmid         TYPE tadir-pgmid,
           l_object      TYPE tadir-object,
           l_obj_name    TYPE tadir-obj_name,
           l_dd_objname  TYPE ddobjname,
           l_srcsystem   TYPE tadir-srcsystem,
           l_author      TYPE tadir-author,
           l_devclass    TYPE tadir-devclass,
           l_masterlang  TYPE tadir-masterlang.


  l_pgmid      = &apos;R3TR&apos;.
  l_object     = _objtype.
  l_obj_name   = objname.
  l_dd_objname = objname.
  l_srcsystem  = sy-sysid.
  l_author     = sy-uname.
  l_devclass   = _devclass.
  l_masterlang = sy-langu.

  DATA: itadir TYPE tadir.
  itadir-pgmid      = l_pgmid.
  itadir-object     = l_object.
  itadir-obj_name   = l_obj_name.
  itadir-srcsystem  = l_srcsystem.
  itadir-author     = l_author.
  itadir-devclass   = l_devclass.
  itadir-masterlang = l_masterlang.
  MODIFY tadir FROM itadir.

  CALL FUNCTION &apos;TR_TADIR_INTERFACE&apos;
    EXPORTING
      wi_test_modus                  = &apos; &apos;
      wi_delete_tadir_entry          = &apos;X&apos;
      wi_tadir_pgmid                 = l_pgmid
      wi_tadir_object                = l_object
      wi_tadir_obj_name              = l_obj_name
      wi_tadir_srcsystem             = l_srcsystem
      wi_tadir_author                = l_author
      wi_tadir_devclass              = l_devclass
      wi_tadir_masterlang            = l_masterlang
      iv_set_edtflag                 = &apos;&apos;
    EXCEPTIONS
      tadir_entry_not_existing       = 1
      tadir_entry_ill_type           = 2
      no_systemname                  = 3
      no_systemtype                  = 4
      original_system_conflict       = 5
      object_reserved_for_devclass   = 6
      object_exists_global           = 7
      object_exists_local            = 8
      object_is_distributed          = 9
      obj_specification_not_unique   = 10
      no_authorization_to_delete     = 11
      devclass_not_existing          = 12
      simultanious_set_remove_repair = 13
      order_missing                  = 14
      no_modification_of_head_syst   = 15
      pgmid_object_not_allowed       = 16
      masterlanguage_not_specified   = 17
      devclass_not_specified         = 18
      specify_owner_unique           = 19
      loc_priv_objs_no_repair        = 20
      gtadir_not_reached             = 21
      object_locked_for_order        = 22
      change_of_class_not_allowed    = 23
      no_change_from_sap_to_tmp      = 24
      OTHERS                         = 25.
  IF sy-subrc NE 0.
    CASE sy-subrc.
      WHEN 1 OR 9 OR 7 OR 8. &quot;OK! - Doesn&apos;t exist yet
      WHEN 11 OR 23 OR 24.
        RAISE EXCEPTION TYPE zcx_saplink
          EXPORTING textid = zcx_saplink=&gt;not_authorized.
      WHEN 22.
        RAISE EXCEPTION TYPE zcx_saplink
          EXPORTING textid = zcx_saplink=&gt;locked.
      WHEN OTHERS.
        RAISE EXCEPTION TYPE zcx_saplink
          EXPORTING textid = zcx_saplink=&gt;system_error.
    ENDCASE.
  ENDIF.

  CALL FUNCTION &apos;DDIF_VIEW_PUT&apos;
    EXPORTING
      name              = l_dd_objname
      dd25v_wa          = dd25v_wa
      dd09l_wa          = dd09l_wa
    TABLES
      dd26v_tab         = dd26v_tab
      dd27p_tab         = dd27p_tab
      dd28j_tab         = dd28j_tab
      dd28v_tab         = dd28v_tab
    EXCEPTIONS
      view_not_found    = 1
      name_inconsistent = 2
      view_inconsistent = 3
      put_failure       = 4
      put_refused       = 5
      OTHERS            = 6.

  IF sy-subrc &lt;&gt; 0.
    RAISE EXCEPTION TYPE zcx_saplink
      EXPORTING textid = zcx_saplink=&gt;system_error.
  ENDIF.

  DATA: trobjtype  TYPE trobjtype,
        trobj_name TYPE trobj_name.
  trobjtype  = l_object.
  trobj_name = l_obj_name.
  CALL FUNCTION &apos;RS_INSERT_INTO_WORKING_AREA&apos;
    EXPORTING
      object            = trobjtype
      obj_name          = trobj_name
    EXCEPTIONS
      wrong_object_name = 1.

  name = objName.
ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZSAPLINK" CMPNAME="DELETEOBJECT" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/
method DELETEOBJECT.

*      Plugin created by:
*      Thomas Jung
*      thomas.jung1@gmail.com

endmethod.</source>
  </method>
  <method CLSNAME="ZSAPLINK" CMPNAME="GETOBJECTTYPE" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   SAPlink is free software; you can redistribute it and/or modify   |
*|   it under the terms of the GNU General Public License as published |
*|   by the Free Software Foundation; either version 2 of the License, |
*|   or (at your option) any later version.                            |
*|                                                                     |
*|   SAPlink is distributed in the hope that it will be useful,        |
*|   but WITHOUT ANY WARRANTY; without even the implied warranty of    |
*|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     |
*|   GNU General Public License for more details.                      |
*|                                                                     |
*|   You should have received a copy of the GNU General Public License |
*|   along with SAPlink; if not, write to the                          |
*|   Free Software Foundation, Inc.,                                   |
*|   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA          |
*\---------------------------------------------------------------------/
method GETOBJECTTYPE.

*      Plugin created by:
*      Thomas Jung
*      thomas.jung1@gmail.com

  objecttype = &apos;VIEW&apos;.  &quot;Views
endmethod.</source>
  </method>
 </CLAS>
 <CLAS CLSNAME="ZSAPLINK_ENH_IMPLEMENTATION" VERSION="1" LANGU="E" DESCRIPT="SAPlink Class Installer" CATEGORY="00" EXPOSURE="2" STATE="1" RELEASE="0" CLSCCINCL="X" FIXPT="X" UNICODE="X" CLSBCCAT="00" WITH_UNIT_TESTS="X" DURATION_TYPE="0 " RISK_LEVEL="0 " REFCLSNAME="ZSAPLINK">
  <localImplementation>*&quot;* local class implementation for public class
*&quot;* use this source file for the implementation part of
*&quot;* local helper classes</localImplementation>
  <localTypes>*&quot;* use this source file for any type declarations (class
*&quot;* definitions, interfaces or data types) you need for method
*&quot;* implementation or private method&apos;s signature</localTypes>
  <localMacros>*&quot;* use this source file for any macro definitions you need
*&quot;* in the implementation part of the class</localMacros>
  <localTestClasses>*&quot;* use this source file for your ABAP unit test classes
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   The code of this project is provided to you under the current     |
*|   version of the SAP Code Exchange Terms of Use. You can find the   |
*|   text on the SAP Code Exchange webpage at http://www.sdn.sap.com   |
*|                                                                     |
*|   SAPlink is provided to you AS IS with no guarantee, warranty or   |
*|   support.                                                          |
*\---------------------------------------------------------------------/

CLASS ltcl_check_enh_implementation DEFINITION FINAL FOR TESTING.
  &quot; DURATION SHORT
  &quot; RISK LEVEL HARMLESS
  &quot;#AU Duration Medium
  &quot;#AU Risk_Level Harmless
  PUBLIC SECTION.
    METHODS:
      check_010_non_existing   FOR TESTING RAISING cx_static_check,
      check_020_create_slinkee FOR TESTING RAISING cx_static_check.
  PRIVATE SECTION.
    DATA targetobject TYPE REF TO zsaplink.
    DATA ixml         TYPE REF TO if_ixml_document.
    DATA cx           TYPE REF TO cx_root.
    DATA msg  TYPE string.
    DATA name TYPE string.
    DATA devclass TYPE devclass.
    METHODS setup.
ENDCLASS.                    &quot;ltcl_check_enh_implementation DEFINITION

*----------------------------------------------------------------------*
*       CLASS ltcl_check_enh_implementation IMPLEMENTATION
*----------------------------------------------------------------------*
*
*----------------------------------------------------------------------*
CLASS ltcl_check_enh_implementation IMPLEMENTATION.

  METHOD setup.
  ENDMETHOD.                    &quot;setup

  METHOD check_010_non_existing.
    name = &apos;ZDOES_NOT_EXIST&apos;.
    CREATE OBJECT targetobject
      TYPE zsaplink_enh_implementation
      EXPORTING
        name = name.
    TRY.
        ixml = targetobject-&gt;createixmldocfromobject( ).
      CATCH zcx_saplink INTO cx.    &quot; SAPlink exception class
        msg = cx-&gt;get_text( ).
        cl_aunit_assert=&gt;assert_bound( act = cx msg = msg ).
    ENDTRY.

  ENDMETHOD.                    &quot;CHECK_CHECK_NON_EXISTING

  METHOD check_020_create_slinkee.
    DATA: xmlstring TYPE string.
    name     = &apos;ZDUMMY_BADI&apos;.
    devclass = &apos;$TMP&apos;.
    CREATE OBJECT targetobject
      TYPE zsaplink_enh_implementation
      EXPORTING
        name = name.
    TRY.
        ixml = targetobject-&gt;createixmldocfromobject( ).
      CATCH zcx_saplink INTO cx.    &quot; SAPlink exception class
        msg = cx-&gt;get_text( ).
        cl_aunit_assert=&gt;fail( msg = msg ).
    ENDTRY.
    cl_aunit_assert=&gt;assert_bound( act = ixml msg = &apos;iXML is not bound&apos; ).

    xmlstring = targetobject-&gt;convertixmldoctostring( ixmldocument = ixml ).

    FREE: ixml, cx.

    ixml = targetobject-&gt;convertstringtoixmldoc( xmlstring = xmlstring ).

    &quot; Test without overwrite
    TRY.

        targetobject-&gt;createobjectfromixmldoc(
          EXPORTING
            ixmldocument = ixml    &quot; IF_IXML_DOCUMENT
            devclass     = devclass    &quot; Development class/package
*         overwrite    = overwrite    &quot; Overwrite original objects
*       RECEIVING
*         name         = name    &quot; Installed object name
        ).
      CATCH zcx_saplink INTO cx.    &quot; SAPlink exception class
        msg = cx-&gt;get_text( ).
        cl_aunit_assert=&gt;assert_bound( act = cx msg = msg ).
    ENDTRY.
    &quot; Test with overwrite
    TRY.
        targetobject-&gt;createobjectfromixmldoc(
          EXPORTING
            ixmldocument = ixml                 &quot; IF_IXML_DOCUMENT
            devclass     = devclass    &quot; Development class/package
            overwrite    = &apos;X&apos;                  &quot; Overwrite original objects
*       RECEIVING
*         name         = name    &quot; Installed object name
        ).
      CATCH zcx_saplink INTO cx.    &quot; SAPlink exception class
        msg = cx-&gt;get_text( ).
        cl_aunit_assert=&gt;fail( msg = msg ).
    ENDTRY.
  ENDMETHOD.                    &quot;check_030_xml_string

ENDCLASS.                    &quot;ltcl_check_enh_implementation IMPLEMENTATION</localTestClasses>
  <typeUsage CLSNAME="ZSAPLINK_ENH_IMPLEMENTATION" TYPEGROUP="ABAP" VERSION="1" TPUTYPE="0" EXPLICIT="X"/>
  <typeUsage CLSNAME="ZSAPLINK_ENH_IMPLEMENTATION" TYPEGROUP="SEOP" VERSION="1" TPUTYPE="0" EXPLICIT="X"/>
  <typeUsage CLSNAME="ZSAPLINK_ENH_IMPLEMENTATION" TYPEGROUP="SEOR" VERSION="1" TPUTYPE="0" EXPLICIT="X"/>
  <typeUsage CLSNAME="ZSAPLINK_ENH_IMPLEMENTATION" TYPEGROUP="SEOS" VERSION="1" TPUTYPE="0" EXPLICIT="X"/>
  <typeUsage CLSNAME="ZSAPLINK_ENH_IMPLEMENTATION" TYPEGROUP="SEOT" VERSION="1" TPUTYPE="0" EXPLICIT="X"/>
  <typeUsage CLSNAME="ZSAPLINK_ENH_IMPLEMENTATION" TYPEGROUP="SEOX" VERSION="1" TPUTYPE="0" EXPLICIT="X"/>
  <forwardDeclaration>ABAP</forwardDeclaration>
  <forwardDeclaration>SEOP</forwardDeclaration>
  <forwardDeclaration>SEOR</forwardDeclaration>
  <forwardDeclaration>SEOS</forwardDeclaration>
  <forwardDeclaration>SEOT</forwardDeclaration>
  <forwardDeclaration>SEOX</forwardDeclaration>
  <attribute CLSNAME="ZSAPLINK_ENH_IMPLEMENTATION" CMPNAME="BADIIMPL_TOOL" VERSION="1" LANGU="E" EXPOSURE="0" STATE="1" EDITORDER="6 " ATTDECLTYP="0" ATTEXPVIRT="0" TYPTYPE="3" TYPE="CL_ENH_TOOL_BADI_IMPL" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZSAPLINK_ENH_IMPLEMENTATION" CMPNAME="ENHANCEMENT_ID" VERSION="1" LANGU="E" DESCRIPT="Name for the enhancement_id Attribute" EXPOSURE="0" STATE="1" EDITORDER="3 " ATTDECLTYP="2" ATTVALUE="&apos;enhancement_id&apos;" ATTEXPVIRT="0" TYPTYPE="1" TYPE="STRING" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZSAPLINK_ENH_IMPLEMENTATION" CMPNAME="ENHTOOLTYPE" VERSION="1" LANGU="E" DESCRIPT="Enhancement Tool" EXPOSURE="0" STATE="1" EDITORDER="8 " ATTDECLTYP="0" ATTVALUE="&apos;Tool Type&apos;" ATTEXPVIRT="0" TYPTYPE="1" TYPE="ENHTOOLTYPE" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZSAPLINK_ENH_IMPLEMENTATION" CMPNAME="ENHTOOLTYPE_ID" VERSION="1" LANGU="E" EXPOSURE="0" STATE="1" EDITORDER="9 " ATTDECLTYP="2" ATTVALUE="&apos;tooltype_id&apos;" ATTEXPVIRT="0" TYPTYPE="1" TYPE="STRING" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZSAPLINK_ENH_IMPLEMENTATION" CMPNAME="HOOKIMPL_TOOL" VERSION="1" LANGU="E" EXPOSURE="0" STATE="1" EDITORDER="7 " ATTDECLTYP="0" ATTEXPVIRT="0" TYPTYPE="3" TYPE="CL_ENH_TOOL_HOOK_IMPL" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZSAPLINK_ENH_IMPLEMENTATION" CMPNAME="OBJ_NAME" VERSION="1" LANGU="E" DESCRIPT="Object Name in Object List" EXPOSURE="0" STATE="1" EDITORDER="11 " ATTDECLTYP="0" ATTEXPVIRT="0" TYPTYPE="1" TYPE="TROBJ_NAME" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZSAPLINK_ENH_IMPLEMENTATION" CMPNAME="OBJ_TYPE" VERSION="1" LANGU="E" DESCRIPT="Object Type" EXPOSURE="0" STATE="1" EDITORDER="12 " ATTDECLTYP="0" ATTEXPVIRT="0" TYPTYPE="1" TYPE="TROBJTYPE" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZSAPLINK_ENH_IMPLEMENTATION" CMPNAME="ORIG_OBJ" VERSION="1" LANGU="E" EXPOSURE="0" STATE="1" EDITORDER="14 " ATTDECLTYP="2" ATTVALUE="&apos;orig_object&apos;" ATTEXPVIRT="0" TYPTYPE="1" TYPE="STRING" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZSAPLINK_ENH_IMPLEMENTATION" CMPNAME="PGMID" VERSION="1" LANGU="E" DESCRIPT="Program ID in Requests and Tasks" EXPOSURE="0" STATE="1" EDITORDER="10 " ATTDECLTYP="0" ATTEXPVIRT="0" TYPTYPE="1" TYPE="PGMID" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZSAPLINK_ENH_IMPLEMENTATION" CMPNAME="PROGRAM" VERSION="1" LANGU="E" DESCRIPT="ABAP Program Name" EXPOSURE="0" STATE="1" EDITORDER="13 " ATTDECLTYP="0" ATTEXPVIRT="0" TYPTYPE="1" TYPE="PROGNAME" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZSAPLINK_ENH_IMPLEMENTATION" CMPNAME="SHORTTEXT" VERSION="1" LANGU="E" EXPOSURE="0" STATE="1" EDITORDER="1 " ATTDECLTYP="0" ATTEXPVIRT="0" TYPTYPE="1" TYPE="STRING" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZSAPLINK_ENH_IMPLEMENTATION" CMPNAME="SHORTTEXT_ID" VERSION="1" LANGU="E" EXPOSURE="0" STATE="1" EDITORDER="4 " ATTDECLTYP="2" ATTVALUE="&apos;shorttext&apos;" ATTEXPVIRT="0" TYPTYPE="1" TYPE="STRING" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZSAPLINK_ENH_IMPLEMENTATION" CMPNAME="SPOT_NAME" VERSION="1" LANGU="E" DESCRIPT="Name (ID) of an Enhancement Spot" EXPOSURE="0" STATE="1" EDITORDER="2 " ATTDECLTYP="0" ATTEXPVIRT="0" TYPTYPE="1" TYPE="ENHSPOTNAME" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZSAPLINK_ENH_IMPLEMENTATION" CMPNAME="SPOT_NAME_ID" VERSION="1" LANGU="E" EXPOSURE="0" STATE="1" EDITORDER="5 " ATTDECLTYP="2" ATTVALUE="&apos;spot_name&apos;" ATTEXPVIRT="0" TYPTYPE="1" TYPE="STRING" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <inheritance CLSNAME="ZSAPLINK_ENH_IMPLEMENTATION" REFCLSNAME="ZSAPLINK" VERSION="1" STATE="1">
   <redefinition CLSNAME="ZSAPLINK_ENH_IMPLEMENTATION" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="CHECKEXISTS" EXPOSURE="2"/>
   <redefinition CLSNAME="ZSAPLINK_ENH_IMPLEMENTATION" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="CREATEIXMLDOCFROMOBJECT" EXPOSURE="2"/>
   <redefinition CLSNAME="ZSAPLINK_ENH_IMPLEMENTATION" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="CREATEOBJECTFROMIXMLDOC" EXPOSURE="2"/>
   <redefinition CLSNAME="ZSAPLINK_ENH_IMPLEMENTATION" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="DELETEOBJECT" EXPOSURE="1"/>
   <redefinition CLSNAME="ZSAPLINK_ENH_IMPLEMENTATION" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="GETOBJECTTYPE" EXPOSURE="1"/>
  </inheritance>
  <method CLSNAME="ZSAPLINK" CMPNAME="CHECKEXISTS" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>method CHECKEXISTS.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   The code of this project is provided to you under the current     |
*|   version of the SAP Code Exchange Terms of Use. You can find the   |
*|   text on the SAP Code Exchange webpage at http://www.sdn.sap.com   |
*|                                                                     |
*|   SAPlink is provided to you AS IS with no guarantee, warranty or   |
*|   support.                                                          |
*\---------------------------------------------------------------------/

  DATA cx  TYPE REF TO cx_root.

  TRY.
      me-&gt;get_impl_tool( ).
      exists = &apos;X&apos;.
    CATCH cx_root INTO cx.
  ENDTRY.

endmethod.</source>
  </method>
  <method CLSNAME="ZSAPLINK" CMPNAME="CREATEIXMLDOCFROMOBJECT" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>method CREATEIXMLDOCFROMOBJECT.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   The code of this project is provided to you under the current     |
*|   version of the SAP Code Exchange Terms of Use. You can find the   |
*|   text on the SAP Code Exchange webpage at http://www.sdn.sap.com   |
*|                                                                     |
*|   SAPlink is provided to you AS IS with no guarantee, warranty or   |
*|   support.                                                          |
*\---------------------------------------------------------------------/
  &quot; General DATA types
  DATA _objtype TYPE string.
  DATA rc TYPE sysubrc.
  DATA cx TYPE REF TO cx_enh_root.
  &quot; XML related DATA types
  DATA rootnode TYPE REF TO if_ixml_element.
  &quot; Object specific DATA types
  DATA badi_impls      TYPE enh_badi_impl_data_it.
  DATA hook_impls      TYPE ENH_HOOK_IMPL_IT.
  DATA impls_xml  TYPE string.
  DATA impls_ixml TYPE REF TO if_ixml_document.
  DATA impls_root TYPE REF TO if_ixml_element.
  DATA value TYPE string.
  DATA enh_include TYPE progname.
  DATA extension TYPE enhincludeextension.
  DATA enhobj    TYPE enhobj.
  FIELD-SYMBOLS &lt;fs_impls&gt; TYPE any.

  &quot; Set root object
  _objtype = getobjecttype( ).
  rootnode = xmldoc-&gt;create_element( _objtype ).
  rootnode-&gt;set_attribute(
    EXPORTING
      name      = me-&gt;enhancement_id &quot; NAME
      value     = objname          &quot; VALUE
  ).

  TRY.
    me-&gt;get_impl_tool( ).
    CATCH cx_enh_root INTO cx.
  ENDTRY.
  &quot; Read Shorttext of implementation
  me-&gt;get_shorttext( ).
  rootnode-&gt;set_attribute(
    EXPORTING
      name      = me-&gt;shorttext_id &quot; NAME
      value     = me-&gt;shorttext       &quot; VALUE
  ).

  &quot; set enhancement tool type
  value = enhtooltype.
  rootnode-&gt;set_attribute(
      EXPORTING
        name      = me-&gt;enhtooltype_id
        value     = value
    ).

  if enhtooltype eq cl_enh_tool_badi_impl=&gt;tooltype.  &quot; BADI implementation
    &quot; Enhancement Spot
    value = me-&gt;badiimpl_tool-&gt;get_spot_name( ).
    rootnode-&gt;set_attribute(
      EXPORTING
        name      = me-&gt;spot_name_id
        value     = value
    ).
    ASSIGN badi_impls to &lt;fs_impls&gt;.

  else. &quot;hook implementation

    ASSIGN hook_impls to &lt;fs_impls&gt;.
    CALL METHOD me-&gt;hookimpl_tool-&gt;get_original_object
      EXPORTING
        VERSION   = &apos;I&apos;
      IMPORTING
        PGMID     = me-&gt;pgmid
        OBJ_NAME  = me-&gt;obj_name
        OBJ_TYPE  = me-&gt;obj_type
        PROGRAM   = me-&gt;program.

     CONCATENATE me-&gt;pgmid    me-&gt;obj_name
                 me-&gt;obj_type me-&gt;program
     INTO value  SEPARATED BY &apos;-&apos;.

    rootnode-&gt;set_attribute(
      EXPORTING
        name      = me-&gt;orig_obj
        value     = value
    ).

  endif.

  &quot; Read implementations and transform to XML
  CALL METHOD ME-&gt;GET_IMPLEMENTATIONS
    IMPORTING
      R_IMPLEMENTATIONS = &lt;fs_impls&gt;.

  CALL TRANSFORMATION (`ID`)
  SOURCE impls = &lt;fs_impls&gt;
  RESULT XML impls_xml.

  impls_ixml = zsaplink=&gt;convertstringtoixmldoc( xmlstring = impls_xml ).
  impls_root = impls_ixml-&gt;get_root_element( ).

  rootnode-&gt;append_child( new_child = impls_root ).

* append root node to xmldoc
  rc = xmldoc-&gt;append_child( rootnode ).
  ixmldocument = xmldoc.

endmethod.</source>
  </method>
  <method CLSNAME="ZSAPLINK" CMPNAME="CREATEOBJECTFROMIXMLDOC" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>method CREATEOBJECTFROMIXMLDOC.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   The code of this project is provided to you under the current     |
*|   version of the SAP Code Exchange Terms of Use. You can find the   |
*|   text on the SAP Code Exchange webpage at http://www.sdn.sap.com   |
*|                                                                     |
*|   SAPlink is provided to you AS IS with no guarantee, warranty or   |
*|   support.                                                          |
*\---------------------------------------------------------------------/

  DATA cx  TYPE REF TO cx_root.
  DATA: msg      TYPE string.

  DATA _objtype TYPE string.
  DATA rootnode TYPE REF TO if_ixml_element.
  DATA ixml TYPE REF TO if_ixml.
  DATA impls_root TYPE REF TO if_ixml_node.
  DATA impls_ixml TYPE REF TO if_ixml_document.
  DATA impls_xml  TYPE string.
  DATA badi_impls      TYPE enh_badi_impl_data_it.
  DATA hook_impls      TYPE ENH_HOOK_IMPL_IT.
  DATA tool_type       TYPE enhtooltype.
  DATA class_not_active TYPE boolean.
  DATA enhobj TYPE string.
  DATA enhname   TYPE enhname.
  DATA enhcomp   TYPE enhcompositename.
  DATA enhref    TYPE REF TO if_enh_tool.

  FIELD-SYMBOLS: &lt;badiimpl&gt; LIKE LINE OF badi_impls.
  FIELD-SYMBOLS: &lt;hookimpl&gt; LIKE LINE OF hook_impls.
  FIELD-SYMBOLS &lt;fs_impls&gt; TYPE any.

  DATA: error_list TYPE REF TO cl_wb_checklist,
        error_tab  TYPE swbme_error_tab.
  FIELD-SYMBOLS: &lt;error&gt; LIKE LINE OF error_tab.
  FIELD-SYMBOLS: &lt;mtext&gt; LIKE LINE OF &lt;error&gt;-mtext.


  DATA:
  e_devclass               TYPE devclass,
  e_overwrite              TYPE seox_boolean.

  e_devclass = devclass.
  _objtype = getobjecttype( ).
  e_overwrite = overwrite.
  xmldoc = ixmldocument.
  rootnode = xmldoc-&gt;find_from_name( _objtype ).

  me-&gt;objname = rootnode-&gt;get_attribute( me-&gt;enhancement_id ).
  me-&gt;shorttext = rootnode-&gt;get_attribute( me-&gt;shorttext_id ).
  me-&gt;spot_name = rootnode-&gt;get_attribute( me-&gt;spot_name_id ).
  me-&gt;enhtooltype = tool_type = rootnode-&gt;get_attribute( me-&gt;enhtooltype_id ).
  enhobj = rootnode-&gt;get_attribute( me-&gt;orig_obj ).

  SPLIT enhobj AT &apos;-&apos;
   into me-&gt;pgmid    me-&gt;obj_name
        me-&gt;obj_type me-&gt;program.

  &quot; check if object exists
  TRY.
      me-&gt;get_impl_tool( &apos;X&apos; ).
    CATCH cx_root INTO cx.
  ENDTRY.

  IF me-&gt;badiimpl_tool IS BOUND   OR
     me-&gt;hookimpl_tool IS BOUND.
   IF overwrite         IS INITIAL.
      RAISE EXCEPTION TYPE zcx_saplink
        EXPORTING
          textid = zcx_saplink=&gt;existing.
   ELSE.
&quot; Delete existing object
        me-&gt;deleteobject( ).
   ENDIF.
  ENDIF.
  &quot; Read BAdI/HOOK Implementations from Slinkee
  impls_root = rootnode-&gt;get_first_child( ).
  ixml = cl_ixml=&gt;create( ).
  impls_ixml = ixml-&gt;create_document( ).
  impls_ixml-&gt;append_child( new_child = impls_root ).

  impls_xml = zsaplink=&gt;convertixmldoctostring( ixmldocument = impls_ixml ).

  if tool_type eq cl_enh_tool_badi_impl=&gt;tooltype.
     ASSIGN badi_impls to &lt;fs_impls&gt;.
  else.
    ASSIGN hook_impls to &lt;fs_impls&gt;.
  endif.

  CALL TRANSFORMATION (`ID`)
    SOURCE XML impls_xml
    RESULT impls = &lt;fs_impls&gt;.

  &quot; Create Implementation
  &quot; try create
  enhname = me-&gt;objname.
  &quot; Now create the new implementation
  TRY.
      CALL METHOD cl_enh_factory=&gt;create_enhancement
        EXPORTING
          enhname       = enhname
          enhtype       = cl_abstract_enh_tool_redef=&gt;credefinition
          enhtooltype   = tool_type
          compositename = enhcomp
        IMPORTING
          enhancement   = enhref
        CHANGING
*         TRKORR        =
          devclass      = e_devclass.
    CATCH cx_enh_root INTO cx.
      msg = cx-&gt;get_text( ).
      RAISE EXCEPTION TYPE zcx_saplink
        EXPORTING
          textid = zcx_saplink=&gt;error_message
          msg    = msg.
  ENDTRY.

  if tool_type eq cl_enh_tool_badi_impl=&gt;tooltype.
    &quot; enhancement is of type BAdI
    CALL METHOD ME-&gt;SAVE_BADI_IMPL
      EXPORTING
        ENHREF     = enhref
        BADI_IMPLS = &lt;fs_impls&gt;.
  else.
    &quot; enhancement is of type hook
    CALL METHOD ME-&gt;SAVE_HOOK_IMPL
      EXPORTING
        ENHREF     = enhref
        HOOK_IMPLS = &lt;fs_impls&gt;.
  endif.
  &quot; successful install
  name = me-&gt;objname.

endmethod.</source>
  </method>
  <method CLSNAME="ZSAPLINK" CMPNAME="DELETEOBJECT" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>method DELETEOBJECT.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   The code of this project is provided to you under the current     |
*|   version of the SAP Code Exchange Terms of Use. You can find the   |
*|   text on the SAP Code Exchange webpage at http://www.sdn.sap.com   |
*|                                                                     |
*|   SAPlink is provided to you AS IS with no guarantee, warranty or   |
*|   support.                                                          |
*\---------------------------------------------------------------------/

  DATA: badi_implementations TYPE enh_badi_impl_data_it.
  DATA: hook_implementations TYPE enh_hook_impl_it.

  if enhtooltype eq cl_enh_tool_badi_impl=&gt;tooltype.
    IF me-&gt;badiimpl_tool-&gt;if_enh_object~is_locked( ) NE abap_true.
      RAISE EXCEPTION TYPE zcx_saplink
        EXPORTING
          textid = zcx_saplink=&gt;error_message
          msg    = &apos;Enhancement Object is not locked&apos;.
    ENDIF.
    me-&gt;badiimpl_tool-&gt;if_enh_object~delete(
      EXPORTING
        nevertheless_delete = &apos;X&apos;   &quot; Enhancement Boolean
        run_dark            = &apos;X&apos;    &quot; Enhancement Boolean
    ).
    me-&gt;badiimpl_tool-&gt;if_enh_object~unlock( ).

  else.
    IF me-&gt;hookimpl_tool-&gt;if_enh_object~is_locked( ) NE abap_true.
      RAISE EXCEPTION TYPE zcx_saplink
        EXPORTING
          textid = zcx_saplink=&gt;error_message
          msg    = &apos;Enhancement Object is not locked&apos;.
    ENDIF.
    me-&gt;hookimpl_tool-&gt;if_enh_object~delete(
      EXPORTING
        nevertheless_delete = &apos;X&apos;   &quot; Enhancement Boolean
        run_dark            = &apos;X&apos;    &quot; Enhancement Boolean
    ).
    me-&gt;hookimpl_tool-&gt;if_enh_object~unlock( ).
  endif.

endmethod.</source>
  </method>
  <method CLSNAME="ZSAPLINK" CMPNAME="GETOBJECTTYPE" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>method GETOBJECTTYPE.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   The code of this project is provided to you under the current     |
*|   version of the SAP Code Exchange Terms of Use. You can find the   |
*|   text on the SAP Code Exchange webpage at http://www.sdn.sap.com   |
*|                                                                     |
*|   SAPlink is provided to you AS IS with no guarantee, warranty or   |
*|   support.                                                          |
*\---------------------------------------------------------------------/

  objecttype = &apos;ENHO&apos;.  &quot; Enhancement Implementation

endmethod.</source>
  </method>
  <method CLSNAME="ZSAPLINK_ENH_IMPLEMENTATION" CMPNAME="GET_IMPLEMENTATIONS" VERSION="1" LANGU="E" DESCRIPT="Read Enhanchement Implementations" EXPOSURE="0" STATE="1" EDITORDER="2 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" MTDNEWEXC="X" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZSAPLINK_ENH_IMPLEMENTATION" CMPNAME="GET_IMPLEMENTATIONS" SCONAME="R_IMPLEMENTATIONS" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="1" PARPASSTYP="0" TYPTYPE="1" TYPE="ANY"/>
   <exception CLSNAME="ZSAPLINK_ENH_IMPLEMENTATION" CMPNAME="GET_IMPLEMENTATIONS" SCONAME="ZCX_SAPLINK" VERSION="1" LANGU="E" DESCRIPT="SAPlink exception class" MTDTYPE="0" EDITORDER="1 "/>
   <source>method GET_IMPLEMENTATIONS.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   The code of this project is provided to you under the current     |
*|   version of the SAP Code Exchange Terms of Use. You can find the   |
*|   text on the SAP Code Exchange webpage at http://www.sdn.sap.com   |
*|                                                                     |
*|   SAPlink is provided to you AS IS with no guarantee, warranty or   |
*|   support.                                                          |
*\---------------------------------------------------------------------/


  if enhtooltype eq cl_enh_tool_badi_impl=&gt;tooltype.
    CALL METHOD me-&gt;badiimpl_tool-&gt;get_implementations
      EXPORTING
        version            = &apos;I&apos;
      RECEIVING
        re_implementations = r_implementations.
  else.
    CALL METHOD me-&gt;hookimpl_tool-&gt;get_hook_impls
      EXPORTING
        version            = &apos;I&apos;
      RECEIVING
        enhancements = r_implementations.
  endif.

endmethod.</source>
  </method>
  <method CLSNAME="ZSAPLINK_ENH_IMPLEMENTATION" CMPNAME="GET_IMPL_TOOL" VERSION="1" LANGU="E" DESCRIPT="Read Implementation Tool" EXPOSURE="0" STATE="1" EDITORDER="1 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" MTDNEWEXC="X" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZSAPLINK_ENH_IMPLEMENTATION" CMPNAME="GET_IMPL_TOOL" SCONAME="I_LOCK" VERSION="1" LANGU="E" DESCRIPT="Boolean Variable (X=True, -=False, Space=Unknown)" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="BOOLEAN" PAROPTIONL="X"/>
   <exception CLSNAME="ZSAPLINK_ENH_IMPLEMENTATION" CMPNAME="GET_IMPL_TOOL" SCONAME="ZCX_SAPLINK" VERSION="1" LANGU="E" DESCRIPT="SAPlink exception class" MTDTYPE="0" EDITORDER="1 "/>
   <source>method GET_IMPL_TOOL.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   The code of this project is provided to you under the current     |
*|   version of the SAP Code Exchange Terms of Use. You can find the   |
*|   text on the SAP Code Exchange webpage at http://www.sdn.sap.com   |
*|                                                                     |
*|   SAPlink is provided to you AS IS with no guarantee, warranty or   |
*|   support.                                                          |
*\---------------------------------------------------------------------/

  DATA cx  TYPE REF TO cx_enh_root.
  DATA msg TYPE string.

  DATA enhname   TYPE enhname.
  DATA enhspot   TYPE enhspotname.
  DATA enhref    TYPE REF TO if_enh_tool.
  DATA classname TYPE enhtoolclassname.

  enhname = objname.
  enhspot = objname.

  &quot; FREE: enhref, me-&gt;badiimpl_tool.

  TRY.
      enhref = cl_enh_factory=&gt;get_enhancement(
                 enhancement_id = enhname
                 lock           = i_lock
               ).

      &quot; Check that is is realy a BAdI or Hook
      enhtooltype = enhref-&gt;get_tool( ).
      if enhtooltype ne cl_enh_tool_badi_impl=&gt;tooltype and
         enhtooltype ne cl_enh_tool_hook_impl=&gt;tooltype.
         CONCATENATE &apos;The enhancement&apos; enhname &apos;is not a BAdI/Hook Implementation&apos; INTO msg SEPARATED BY space.
          RAISE EXCEPTION TYPE zcx_saplink
            EXPORTING
              textid = zcx_saplink=&gt;error_message
              msg    = msg.
      ENDIF.

    CATCH cx_enh_root INTO cx.
      msg = cx-&gt;get_text( ).
      RAISE EXCEPTION TYPE zcx_saplink
        EXPORTING
          textid = zcx_saplink=&gt;not_found
          object = objname.

  ENDTRY.

 &quot; convert based on type of enhancement
  if enhtooltype eq cl_enh_tool_badi_impl=&gt;tooltype.
    me-&gt;badiimpl_tool ?= enhref.
  else.
    me-&gt;hookimpl_tool ?= enhref.
  endif.

endmethod.</source>
  </method>
  <method CLSNAME="ZSAPLINK_ENH_IMPLEMENTATION" CMPNAME="GET_SHORTTEXT" VERSION="1" LANGU="E" DESCRIPT="Read Short text of Enhancement Implementations" EXPOSURE="0" STATE="1" EDITORDER="3 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>method GET_SHORTTEXT.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   The code of this project is provided to you under the current     |
*|   version of the SAP Code Exchange Terms of Use. You can find the   |
*|   text on the SAP Code Exchange webpage at http://www.sdn.sap.com   |
*|                                                                     |
*|   SAPlink is provided to you AS IS with no guarantee, warranty or   |
*|   support.                                                          |
*\---------------------------------------------------------------------/

  if enhtooltype eq cl_enh_tool_badi_impl=&gt;tooltype.
    me-&gt;shorttext = me-&gt;badiimpl_tool-&gt;if_enh_object_docu~get_shorttext( ).
  else.
    me-&gt;shorttext = me-&gt;hookimpl_tool-&gt;if_enh_object_docu~get_shorttext( ).
  endif.

endmethod.</source>
  </method>
  <method CLSNAME="ZSAPLINK_ENH_IMPLEMENTATION" CMPNAME="SAVE_BADI_IMPL" VERSION="1" LANGU="E" DESCRIPT="Save BAdi Implementation" EXPOSURE="0" STATE="1" EDITORDER="4 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" MTDNEWEXC="X" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZSAPLINK_ENH_IMPLEMENTATION" CMPNAME="SAVE_BADI_IMPL" SCONAME="ENHREF" VERSION="1" LANGU="E" DESCRIPT="SAP Enhancement Tool Root Interface" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="0" TYPTYPE="3" TYPE="IF_ENH_TOOL"/>
   <parameter CLSNAME="ZSAPLINK_ENH_IMPLEMENTATION" CMPNAME="SAVE_BADI_IMPL" SCONAME="BADI_IMPLS" VERSION="1" LANGU="E" DESCRIPT="Table ENH_BADI_IMPL_DATA" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="0" TYPTYPE="1" TYPE="ENH_BADI_IMPL_DATA_IT"/>
   <exception CLSNAME="ZSAPLINK_ENH_IMPLEMENTATION" CMPNAME="SAVE_BADI_IMPL" SCONAME="ZCX_SAPLINK" VERSION="1" LANGU="E" DESCRIPT="SAPlink exception class" MTDTYPE="0" EDITORDER="1 "/>
   <source>method SAVE_BADI_IMPL.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   The code of this project is provided to you under the current     |
*|   version of the SAP Code Exchange Terms of Use. You can find the   |
*|   text on the SAP Code Exchange webpage at http://www.sdn.sap.com   |
*|                                                                     |
*|   SAPlink is provided to you AS IS with no guarantee, warranty or   |
*|   support.                                                          |
*\---------------------------------------------------------------------/

  DATA  class_not_active TYPE boolean.
  DATA: error_list TYPE REF TO cl_wb_checklist.
  DATA error_tab  TYPE swbme_error_tab.

  DATA  cx  TYPE REF TO cx_root.
  DATA: msg      TYPE string,
        msg_long TYPE string.

  FIELD-SYMBOLS: &lt;badiimpl&gt; LIKE LINE OF badi_impls.
  FIELD-SYMBOLS: &lt;error&gt; LIKE LINE OF error_tab.
  FIELD-SYMBOLS: &lt;mtext&gt; LIKE LINE OF &lt;error&gt;-mtext.

  me-&gt;badiimpl_tool ?= enhref.
  &quot; Set Enhancement Spot Name
  me-&gt;badiimpl_tool-&gt;set_spot_name( spot_name = me-&gt;spot_name ).

  me-&gt;badiimpl_tool-&gt;if_enh_object_docu~set_shorttext( me-&gt;shorttext ).

  LOOP AT badi_impls ASSIGNING &lt;badiimpl&gt;.
    &quot; The implementation can only be created when the
    &quot; implementing class is active
    CALL FUNCTION &apos;SEO_CLASS_EXISTENCE_CHECK&apos;
      EXPORTING
        clskey        = &lt;badiimpl&gt;-impl_class
      IMPORTING
        not_active    = class_not_active
      EXCEPTIONS
        not_specified = 1
        not_existing  = 2
        is_interface  = 3
        no_text       = 4
        inconsistent  = 5
        OTHERS        = 6.
    IF sy-subrc &lt;&gt; 0.
*     MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
*                WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
    ENDIF.
    IF class_not_active = abap_true.
      RAISE EXCEPTION TYPE zcx_saplink
        EXPORTING
          textid = zcx_saplink=&gt;error_message
          msg    = &apos;Classes for Enhancement Implementations must be active&apos;.
    ENDIF.
    TRY.
        CALL METHOD badiimpl_tool-&gt;add_implementation
          EXPORTING
            im_implementation = &lt;badiimpl&gt;.
      CATCH cx_enh_root INTO cx.
        msg = cx-&gt;get_text( ).
        RAISE EXCEPTION TYPE zcx_saplink
          EXPORTING
            textid = zcx_saplink=&gt;error_message
            msg    = msg.
    ENDTRY.
  ENDLOOP.

  TRY.
      &quot; Check if the object has still errors which would avoid saving
      me-&gt;badiimpl_tool-&gt;if_enh_object~check(
        EXPORTING
          version                = cl_enh_tool_badi_impl=&gt;inactive   &quot; ABAP: Program Status (Active, Saved, Transported...)
        CHANGING
          error_list             = error_list    &quot; List of All Error Messages from a Syntax Check
      ).

      error_list-&gt;get_error_messages(
        IMPORTING
          p_error_tab = error_tab    &quot; Error Message Table
      ).

      IF error_tab IS NOT INITIAL.
        LOOP AT error_tab ASSIGNING &lt;error&gt; WHERE mtype = &apos;E&apos;.
          LOOP AT &lt;error&gt;-mtext ASSIGNING &lt;mtext&gt;.
            CONCATENATE msg &lt;mtext&gt; &apos;;&apos; INTO msg.
          ENDLOOP.
        ENDLOOP.
        RAISE EXCEPTION TYPE zcx_saplink
          EXPORTING
            textid = zcx_saplink=&gt;error_message
            msg    = msg.
      ENDIF.

      &quot; Save
      me-&gt;badiimpl_tool-&gt;if_enh_object~save( run_dark = &apos;X&apos; ).
      &quot; Unlock
      me-&gt;badiimpl_tool-&gt;if_enh_object~unlock( ).
    CATCH cx_enh_root INTO cx.
      &quot; Unlock
      me-&gt;badiimpl_tool-&gt;if_enh_object~unlock( ).
      msg = cx-&gt;get_text( ).
      msg_long = cx-&gt;get_longtext( ).
      ROLLBACK WORK.
      RAISE EXCEPTION TYPE zcx_saplink
        EXPORTING
          textid = zcx_saplink=&gt;error_message
          msg    = msg.
  ENDTRY.

endmethod.</source>
  </method>
  <method CLSNAME="ZSAPLINK_ENH_IMPLEMENTATION" CMPNAME="SAVE_HOOK_IMPL" VERSION="1" LANGU="E" DESCRIPT="Save Hook Implementation" EXPOSURE="0" STATE="1" EDITORDER="5 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" MTDNEWEXC="X" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZSAPLINK_ENH_IMPLEMENTATION" CMPNAME="SAVE_HOOK_IMPL" SCONAME="ENHREF" VERSION="1" LANGU="E" DESCRIPT="SAP Enhancement Tool Root Interface" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="0" TYPTYPE="3" TYPE="IF_ENH_TOOL"/>
   <parameter CLSNAME="ZSAPLINK_ENH_IMPLEMENTATION" CMPNAME="SAVE_HOOK_IMPL" SCONAME="HOOK_IMPLS" VERSION="1" LANGU="E" DESCRIPT="Internal Table for ENH_HOOK_IMPL" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="0" TYPTYPE="1" TYPE="ENH_HOOK_IMPL_IT"/>
   <exception CLSNAME="ZSAPLINK_ENH_IMPLEMENTATION" CMPNAME="SAVE_HOOK_IMPL" SCONAME="ZCX_SAPLINK" VERSION="1" LANGU="E" DESCRIPT="SAPlink exception class" MTDTYPE="0" EDITORDER="1 "/>
   <source>method SAVE_HOOK_IMPL.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   The code of this project is provided to you under the current     |
*|   version of the SAP Code Exchange Terms of Use. You can find the   |
*|   text on the SAP Code Exchange webpage at http://www.sdn.sap.com   |
*|                                                                     |
*|   SAPlink is provided to you AS IS with no guarantee, warranty or   |
*|   support.                                                          |
*\---------------------------------------------------------------------/

  DATA  class_not_active TYPE boolean.

  DATA  cx  TYPE REF TO cx_root.
  DATA: msg      TYPE string,
        msg_long TYPE string.

  DATA  include TYPE progname.
  DATA  extension TYPE enhincludeextension.

  FIELD-SYMBOLS: &lt;hookimpl&gt; LIKE LINE OF hook_impls.

  me-&gt;hookimpl_tool ?= enhref.
  &quot; saving the enhancement include?
  CALL METHOD me-&gt;hookimpl_tool-&gt;get_hook_impls_include
    IMPORTING
      include   = include
      extension = extension.

  if include is initial or
     extension is initial.
    RAISE EXCEPTION TYPE zcx_saplink
      EXPORTING
        textid = zcx_saplink=&gt;error_message
        msg    = &apos;Enhancement include not saved&apos;.
  endif.

  TRY.
      &quot; Set orig object name
      CALL METHOD ME-&gt;HOOKIMPL_TOOL-&gt;SET_ORIGINAL_OBJECT
        EXPORTING
          PGMID    = me-&gt;pgmid
          OBJ_NAME = me-&gt;obj_name
          OBJ_TYPE = me-&gt;obj_type
          PROGRAM  = me-&gt;program.

    CATCH cx_enh_root INTO cx.
      msg = cx-&gt;get_text( ).
      RAISE EXCEPTION TYPE zcx_saplink
        EXPORTING
          textid = zcx_saplink=&gt;error_message
          msg    = msg.
  ENDTRY.

  me-&gt;hookimpl_tool-&gt;if_enh_object_docu~set_shorttext( me-&gt;shorttext ).

  LOOP AT hook_impls ASSIGNING &lt;hookimpl&gt;.
    TRY.
        me-&gt;hookimpl_tool-&gt;add_hook_impl(
          overwrite = &lt;hookimpl&gt;-overwrite
          method =    &lt;hookimpl&gt;-method
          enhmode =   &lt;hookimpl&gt;-enhmode
          full_name = &lt;hookimpl&gt;-full_name
          source =    &lt;hookimpl&gt;-source
         ).

      CATCH cx_enh_root INTO cx.
        msg = cx-&gt;get_text( ).
        RAISE EXCEPTION TYPE zcx_saplink
          EXPORTING
            textid = zcx_saplink=&gt;error_message
            msg    = msg.
    ENDTRY.
  ENDLOOP.

  TRY.
      &quot; Save
      me-&gt;hookimpl_tool-&gt;if_enh_object~save( run_dark = &apos;X&apos; ).
      &quot; Unlock
      me-&gt;hookimpl_tool-&gt;if_enh_object~unlock( ).
    CATCH cx_enh_root INTO cx.
      &quot; Unlock
      me-&gt;hookimpl_tool-&gt;if_enh_object~unlock( ).
      msg = cx-&gt;get_text( ).
      msg_long = cx-&gt;get_longtext( ).
      ROLLBACK WORK.
      RAISE EXCEPTION TYPE zcx_saplink
        EXPORTING
          textid = zcx_saplink=&gt;error_message
          msg    = msg.
  ENDTRY.

endmethod.</source>
  </method>
 </CLAS>
 <CLAS CLSNAME="ZSAPLINK_ENH_SPOT" VERSION="1" LANGU="E" DESCRIPT="SAPlink Enhancement Spot Plug-in" CATEGORY="00" EXPOSURE="2" STATE="1" RELEASE="0" CLSCCINCL="X" FIXPT="X" UNICODE="X" CLSBCCAT="00" WITH_UNIT_TESTS="X" DURATION_TYPE="0 " RISK_LEVEL="0 " REFCLSNAME="ZSAPLINK">
  <localImplementation>*&quot;* local class implementation for public class
*&quot;* use this source file for the implementation part of
*&quot;* local helper classes</localImplementation>
  <localTypes>*&quot;* use this source file for any type declarations (class
*&quot;* definitions, interfaces or data types) you need for method
*&quot;* implementation or private method&apos;s signature</localTypes>
  <localMacros>*&quot;* use this source file for any macro definitions you need
*&quot;* in the implementation part of the class</localMacros>
  <localTestClasses>*&quot;* use this source file for your ABAP unit test classes
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   The code of this project is provided to you under the current     |
*|   version of the SAP Code Exchange Terms of Use. You can find the   |
*|   text on the SAP Code Exchange webpage at http://www.sdn.sap.com   |
*|                                                                     |
*|   SAPlink is provided to you AS IS with no guarantee, warranty or   |
*|   support.                                                          |
*\---------------------------------------------------------------------/

CLASS ltcl_check_enh_spot DEFINITION FINAL FOR TESTING.
  &quot; DURATION SHORT
  &quot; RISK LEVEL HARMLESS
  &quot;#AU Duration Medium
  &quot;#AU Risk_Level Harmless
  PUBLIC SECTION.
    METHODS:
      check_010_non_existing   FOR TESTING RAISING cx_static_check,
      check_020_create_slinkee FOR TESTING RAISING cx_static_check.
  PRIVATE SECTION.
    DATA targetobject TYPE REF TO zsaplink.
    DATA ixml         TYPE REF TO if_ixml_document.
    DATA cx           TYPE REF TO cx_root.
    DATA msg  TYPE string.
    DATA name TYPE string.
    DATA devclass TYPE devclass.
    METHODS setup.
ENDCLASS.                    &quot;ltcl_check_enh_spot DEFINITION

*----------------------------------------------------------------------*
*       CLASS ltcl_check_enh_spot IMPLEMENTATION
*----------------------------------------------------------------------*
*
*----------------------------------------------------------------------*
CLASS ltcl_check_enh_spot IMPLEMENTATION.

  METHOD setup.
  ENDMETHOD.                    &quot;setup

  METHOD check_010_non_existing.
    name = &apos;ZDOES_NOT_EXIST&apos;.
    CREATE OBJECT targetobject
      TYPE zsaplink_enh_spot
      EXPORTING
        name = name.
    TRY.
        ixml = targetobject-&gt;createixmldocfromobject( ).
      CATCH zcx_saplink INTO cx.    &quot; SAPlink exception class
        msg = cx-&gt;get_text( ).
        cl_aunit_assert=&gt;assert_bound( act = cx msg = msg ).
    ENDTRY.

  ENDMETHOD.                    &quot;CHECK_CHECK_NON_EXISTING

  METHOD check_020_create_slinkee.
    DATA: xmlstring TYPE string.
    DATA: name_created TYPE string.
    name     = &apos;ZBPMAINTAIN_TEST&apos;.
    devclass = &apos;$TMP&apos;.
    CREATE OBJECT targetobject
      TYPE zsaplink_enh_spot
      EXPORTING
        name = name.
    TRY.
        ixml = targetobject-&gt;createixmldocfromobject( ).
      CATCH zcx_saplink INTO cx.    &quot; SAPlink exception class
        msg = cx-&gt;get_text( ).
        cl_aunit_assert=&gt;fail( msg = msg ).
    ENDTRY.
    cl_aunit_assert=&gt;assert_bound( act = ixml msg = &apos;iXML is not bound&apos; ).

    xmlstring = targetobject-&gt;convertixmldoctostring( ixmldocument = ixml ).

    FREE: ixml, cx.

    ixml = targetobject-&gt;convertstringtoixmldoc( xmlstring = xmlstring ).

    &quot; Test without overwrite
    TRY.

        targetobject-&gt;createobjectfromixmldoc(
          EXPORTING
            ixmldocument = ixml     &quot; IF_IXML_DOCUMENT
            devclass     = devclass &quot; Development class/package
*         overwrite    = overwrite    &quot; Overwrite original objects
*       RECEIVING
*         name         = name    &quot; Installed object name
        ).
      CATCH zcx_saplink INTO cx.    &quot; SAPlink exception class
        msg = cx-&gt;get_text( ).
        cl_aunit_assert=&gt;assert_bound( act = cx msg = msg ).
    ENDTRY.
    &quot; Test with overwrite
    TRY.
        name_created = targetobject-&gt;createobjectfromixmldoc(
            ixmldocument = ixml     &quot; IF_IXML_DOCUMENT
            devclass     = devclass &quot; Development class/package
            overwrite    = &apos;X&apos;      &quot; Overwrite original objects
        ).
        cl_aunit_assert=&gt;assert_equals(
            exp                  = name    &quot; Data Object with Expected Type
            act                  = name_created    &quot; Data Object with Current Value
        ).
      CATCH zcx_saplink INTO cx.    &quot; SAPlink exception class
        msg = cx-&gt;get_text( ).
        cl_aunit_assert=&gt;fail( msg = msg ).
    ENDTRY.
  ENDMETHOD.                    &quot;check_030_xml_string

ENDCLASS.                    &quot;ltcl_check_enh_spot IMPLEMENTATION</localTestClasses>
  <typeUsage CLSNAME="ZSAPLINK_ENH_SPOT" TYPEGROUP="ABAP" VERSION="1" TPUTYPE="0" EXPLICIT="X"/>
  <typeUsage CLSNAME="ZSAPLINK_ENH_SPOT" TYPEGROUP="SEOP" VERSION="1" TPUTYPE="0" EXPLICIT="X"/>
  <typeUsage CLSNAME="ZSAPLINK_ENH_SPOT" TYPEGROUP="SEOR" VERSION="1" TPUTYPE="0" EXPLICIT="X"/>
  <typeUsage CLSNAME="ZSAPLINK_ENH_SPOT" TYPEGROUP="SEOS" VERSION="1" TPUTYPE="0" EXPLICIT="X"/>
  <typeUsage CLSNAME="ZSAPLINK_ENH_SPOT" TYPEGROUP="SEOT" VERSION="1" TPUTYPE="0" EXPLICIT="X"/>
  <typeUsage CLSNAME="ZSAPLINK_ENH_SPOT" TYPEGROUP="SEOX" VERSION="1" TPUTYPE="0" EXPLICIT="X"/>
  <forwardDeclaration>ABAP</forwardDeclaration>
  <forwardDeclaration>SEOP</forwardDeclaration>
  <forwardDeclaration>SEOR</forwardDeclaration>
  <forwardDeclaration>SEOS</forwardDeclaration>
  <forwardDeclaration>SEOT</forwardDeclaration>
  <forwardDeclaration>SEOX</forwardDeclaration>
  <attribute CLSNAME="ZSAPLINK_ENH_SPOT" CMPNAME="BADIDEF_TOOL" VERSION="1" LANGU="E" DESCRIPT="Enhancement Tool BAdI" EXPOSURE="0" STATE="1" EDITORDER="1 " ATTDECLTYP="0" ATTEXPVIRT="0" TYPTYPE="3" TYPE="CL_ENH_TOOL_BADI_DEF" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZSAPLINK_ENH_SPOT" CMPNAME="SHORTTEXT" VERSION="1" LANGU="E" EXPOSURE="0" STATE="1" EDITORDER="2 " ATTDECLTYP="0" ATTEXPVIRT="0" TYPTYPE="1" TYPE="STRING" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZSAPLINK_ENH_SPOT" CMPNAME="SHORTTEXT_ID" VERSION="1" LANGU="E" EXPOSURE="0" STATE="1" EDITORDER="3 " ATTDECLTYP="2" ATTVALUE="&apos;shorttext&apos;" ATTEXPVIRT="0" TYPTYPE="1" TYPE="STRING" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZSAPLINK_ENH_SPOT" CMPNAME="SPOT_NAME_ID" VERSION="1" LANGU="E" EXPOSURE="0" STATE="1" EDITORDER="4 " ATTDECLTYP="2" ATTVALUE="&apos;spot_name&apos;" ATTEXPVIRT="0" TYPTYPE="1" TYPE="STRING" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <inheritance CLSNAME="ZSAPLINK_ENH_SPOT" REFCLSNAME="ZSAPLINK" VERSION="1" STATE="1">
   <redefinition CLSNAME="ZSAPLINK_ENH_SPOT" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="CHECKEXISTS" EXPOSURE="2"/>
   <redefinition CLSNAME="ZSAPLINK_ENH_SPOT" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="CREATEIXMLDOCFROMOBJECT" EXPOSURE="2"/>
   <redefinition CLSNAME="ZSAPLINK_ENH_SPOT" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="CREATEOBJECTFROMIXMLDOC" EXPOSURE="2"/>
   <redefinition CLSNAME="ZSAPLINK_ENH_SPOT" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="DELETEOBJECT" EXPOSURE="1"/>
   <redefinition CLSNAME="ZSAPLINK_ENH_SPOT" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="GETOBJECTTYPE" EXPOSURE="1"/>
  </inheritance>
  <method CLSNAME="ZSAPLINK" CMPNAME="CHECKEXISTS" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>method CHECKEXISTS.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   The code of this project is provided to you under the current     |
*|   version of the SAP Code Exchange Terms of Use. You can find the   |
*|   text on the SAP Code Exchange webpage at http://www.sdn.sap.com   |
*|                                                                     |
*|   SAPlink is provided to you AS IS with no guarantee, warranty or   |
*|   support.                                                          |
*\---------------------------------------------------------------------/

  DATA cx  TYPE REF TO cx_root.

  TRY.
      me-&gt;get_badidef_tool( ).
      exists = &apos;X&apos;.
    CATCH cx_root INTO cx.
  ENDTRY.

endmethod.</source>
  </method>
  <method CLSNAME="ZSAPLINK" CMPNAME="CREATEIXMLDOCFROMOBJECT" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>method CREATEIXMLDOCFROMOBJECT.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   The code of this project is provided to you under the current     |
*|   version of the SAP Code Exchange Terms of Use. You can find the   |
*|   text on the SAP Code Exchange webpage at http://www.sdn.sap.com   |
*|                                                                     |
*|   SAPlink is provided to you AS IS with no guarantee, warranty or   |
*|   support.                                                          |
*\---------------------------------------------------------------------/
  &quot; General DATA types
  DATA _objtype TYPE string.
  DATA rc TYPE sysubrc.
  DATA cx TYPE REF TO cx_enh_root.
  &quot; XML related DATA types
  DATA rootnode TYPE REF TO if_ixml_element.
  &quot; Object specific DATA types
  DATA impls      TYPE enh_badi_data_it.
  DATA impls_xml  TYPE string.
  DATA impls_ixml TYPE REF TO if_ixml_document.
  DATA impls_root TYPE REF TO if_ixml_element.
  DATA value TYPE string.
  FIELD-SYMBOLS &lt;impl&gt; LIKE LINE OF impls.

  &quot; Set root object
  _objtype = getobjecttype( ).
  rootnode = xmldoc-&gt;create_element( _objtype ).
  rootnode-&gt;set_attribute(
    EXPORTING
      name      = me-&gt;spot_name_id &quot; NAME
      value     = objname          &quot; VALUE
  ).

  me-&gt;get_badidef_tool( ).

  &quot; Read Shorttext
  me-&gt;shorttext = me-&gt;badidef_tool-&gt;if_enh_object_docu~get_shorttext( ).
  rootnode-&gt;set_attribute(
    EXPORTING
      name      = me-&gt;shorttext_id &quot; NAME
      value     = me-&gt;shorttext       &quot; VALUE
  ).

  &quot; Read implementations and transform to XML
  impls = me-&gt;get_implementations( ).
  CALL TRANSFORMATION (`ID`)
    SOURCE impls = impls
    RESULT XML impls_xml.

  impls_ixml = zsaplink=&gt;convertstringtoixmldoc( xmlstring = impls_xml ).
  impls_root = impls_ixml-&gt;get_root_element( ).

  rootnode-&gt;append_child( new_child = impls_root ).

* append root node to xmldoc
  rc = xmldoc-&gt;append_child( rootnode ).
  ixmldocument = xmldoc.

endmethod.</source>
  </method>
  <method CLSNAME="ZSAPLINK" CMPNAME="CREATEOBJECTFROMIXMLDOC" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>method CREATEOBJECTFROMIXMLDOC.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   The code of this project is provided to you under the current     |
*|   version of the SAP Code Exchange Terms of Use. You can find the   |
*|   text on the SAP Code Exchange webpage at http://www.sdn.sap.com   |
*|                                                                     |
*|   SAPlink is provided to you AS IS with no guarantee, warranty or   |
*|   support.                                                          |
*\---------------------------------------------------------------------/

  DATA cx  TYPE REF TO cx_root.
  DATA: msg      TYPE string,
        msg_long TYPE string.

  DATA _objtype TYPE string.
  DATA rootnode TYPE REF TO if_ixml_element.
  DATA ixml TYPE REF TO if_ixml.
  DATA impls_root TYPE REF TO if_ixml_node.
  DATA impls_ixml TYPE REF TO if_ixml_document.
  DATA impls_xml  TYPE string.
  DATA impls      TYPE enh_badi_data_it.
  DATA interface_not_active TYPE boolean.

  FIELD-SYMBOLS: &lt;impl&gt; LIKE LINE OF impls.

  DATA: error_list TYPE REF TO cl_wb_checklist,
        error_tab  TYPE swbme_error_tab.
  FIELD-SYMBOLS: &lt;error&gt; LIKE LINE OF error_tab.
  FIELD-SYMBOLS: &lt;mtext&gt; LIKE LINE OF &lt;error&gt;-mtext.


  DATA:
  e_devclass               TYPE devclass,
  e_overwrite              TYPE seox_boolean.

  e_devclass = devclass.
  _objtype = getobjecttype( ).
  e_overwrite = overwrite.
  xmldoc = ixmldocument.
  rootnode = xmldoc-&gt;find_from_name( _objtype ).
  me-&gt;objname = rootnode-&gt;get_attribute( me-&gt;spot_name_id ).
  me-&gt;shorttext = rootnode-&gt;get_attribute( me-&gt;shorttext_id ).

  &quot; check if object exists
  TRY.
      me-&gt;get_badidef_tool( &apos;X&apos; ).
    CATCH cx_root INTO cx.
  ENDTRY.

  IF me-&gt;badidef_tool IS BOUND AND
     overwrite         IS INITIAL.
    RAISE EXCEPTION TYPE zcx_saplink
      EXPORTING
        textid = zcx_saplink=&gt;existing.
  ENDIF.
  &quot; Read BAdI Definitionss from Slinkee
  impls_root = rootnode-&gt;get_first_child( ).

  ixml = cl_ixml=&gt;create( ).
  impls_ixml = ixml-&gt;create_document( ).
  impls_ixml-&gt;append_child( new_child = impls_root ).

  impls_xml = zsaplink=&gt;convertixmldoctostring( ixmldocument = impls_ixml ).

  CALL TRANSFORMATION (`ID`)
    SOURCE XML impls_xml
    RESULT impls = impls.

  &quot; Create Implementation
  &quot; try create
  DATA spot_name  TYPE enhspotname.
  DATA enhcomp   TYPE enhcompositename.
  DATA enhref    TYPE REF TO if_enh_spot_tool.
  &quot; Delete existing object
  IF me-&gt;badidef_tool IS BOUND.
    me-&gt;deleteobject( ).
  ENDIF.

  spot_name = me-&gt;objname.
  &quot; Now create the new implementation
  TRY.
      cl_enh_factory=&gt;create_enhancement_spot(
        EXPORTING
          spot_name     = spot_name    &quot; Name (ID) of an Enhancement Spot
          tooltype      = cl_enh_tool_badi_def=&gt;tooltype   &quot; Enhancement Spot Tool
          compositename = enhcomp
        IMPORTING
          spot          = enhref   &quot; SAP Enhancement Tool Root Interface
        CHANGING
*          trkorr        = trkorr    &quot; Request/Task
          devclass      = e_devclass
      ).
    CATCH cx_enh_root INTO cx.
      msg = cx-&gt;get_text( ).
      RAISE EXCEPTION TYPE zcx_saplink
        EXPORTING
          textid = zcx_saplink=&gt;error_message
          msg    = msg.
  ENDTRY.

  &quot; enhancement is of type BAdI, so convert
  me-&gt;badidef_tool ?= enhref.
  &quot; Set Enhancement Spot Name

  me-&gt;badidef_tool-&gt;if_enh_object_docu~set_shorttext( me-&gt;shorttext ).

  LOOP AT impls ASSIGNING &lt;impl&gt;.
    &quot; The implementation can only be created when the
    &quot; implementing class is active
    CALL FUNCTION &apos;SEO_INTERFACE_EXISTENCE_CHECK&apos;
      EXPORTING
        intkey        = &lt;impl&gt;-interface_name
      IMPORTING
        not_active    = interface_not_active
      EXCEPTIONS
        not_specified = 1
        not_existing  = 2
        is_class      = 3
        no_text       = 4
        inconsistent  = 5
        OTHERS        = 6.
    IF sy-subrc &lt;&gt; 0.
*     MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
*                WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
    ENDIF.

    IF interface_not_active = abap_true.
      RAISE EXCEPTION TYPE zcx_saplink
        EXPORTING
          textid = zcx_saplink=&gt;error_message
          msg    = &apos;Classes for Enhancement Implementations must be active&apos;.
    ENDIF.
    TRY.
      badidef_tool-&gt;add_badi_def( &lt;impl&gt; ).
      CATCH cx_enh_root INTO cx.
        msg = cx-&gt;get_text( ).
        RAISE EXCEPTION TYPE zcx_saplink
          EXPORTING
            textid = zcx_saplink=&gt;error_message
            msg    = msg.
    ENDTRY.
  ENDLOOP.

  TRY.
      &quot; Check if the object has still errors which would avoid saving
      me-&gt;badidef_tool-&gt;if_enh_object~check(
        EXPORTING
          version                = cl_enh_tool_badi_impl=&gt;inactive   &quot; ABAP: Program Status (Active, Saved, Transported...)
        CHANGING
          error_list             = error_list    &quot; List of All Error Messages from a Syntax Check
      ).
      error_list-&gt;get_error_messages(
        IMPORTING
          p_error_tab = error_tab    &quot; Error Message Table
      ).
      IF error_tab IS NOT INITIAL.
        LOOP AT error_tab ASSIGNING &lt;error&gt; WHERE mtype = &apos;E&apos;.
          LOOP AT &lt;error&gt;-mtext ASSIGNING &lt;mtext&gt;.
            CONCATENATE msg &lt;mtext&gt; &apos;;&apos; INTO msg.
          ENDLOOP.
        ENDLOOP.
        RAISE EXCEPTION TYPE zcx_saplink
          EXPORTING
            textid = zcx_saplink=&gt;error_message
            msg    = msg.
      ENDIF.

      &quot; Save
      me-&gt;badidef_tool-&gt;if_enh_object~save( ).
      &quot; Unlock
      me-&gt;badidef_tool-&gt;if_enh_object~unlock( ).
    CATCH cx_enh_root INTO cx.
      &quot; Unlock
      me-&gt;badidef_tool-&gt;if_enh_object~unlock( ).
      msg = cx-&gt;get_text( ).
      msg_long = cx-&gt;get_longtext( ).
      RAISE EXCEPTION TYPE zcx_saplink
        EXPORTING
          textid = zcx_saplink=&gt;error_message
          msg    = msg.
  ENDTRY.
  &quot; successful install
  name = me-&gt;objname.

endmethod.</source>
  </method>
  <method CLSNAME="ZSAPLINK" CMPNAME="DELETEOBJECT" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>method DELETEOBJECT.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   The code of this project is provided to you under the current     |
*|   version of the SAP Code Exchange Terms of Use. You can find the   |
*|   text on the SAP Code Exchange webpage at http://www.sdn.sap.com   |
*|                                                                     |
*|   SAPlink is provided to you AS IS with no guarantee, warranty or   |
*|   support.                                                          |
*\---------------------------------------------------------------------/

  DATA: implementations TYPE enh_badi_data_it.
  FIELD-SYMBOLS: &lt;impl&gt; LIKE LINE OF implementations.
  &quot; First delete implementation
  implementations = me-&gt;get_implementations( ).

  IF me-&gt;badidef_tool-&gt;if_enh_object~is_locked( ) NE abap_true.
    RAISE EXCEPTION TYPE zcx_saplink
      EXPORTING
        textid = zcx_saplink=&gt;error_message
        msg    = &apos;Enhancement Object is not locked&apos;.
  ENDIF.

  &quot; And now the Enhancement itself
  me-&gt;badidef_tool-&gt;if_enh_object~delete(
    EXPORTING
      nevertheless_delete = &apos;X&apos;   &quot; Enhancement Boolean
      run_dark            = &apos;X&apos;    &quot; Enhancement Boolean
  ).
  me-&gt;badidef_tool-&gt;if_enh_object~unlock( ).

endmethod.</source>
  </method>
  <method CLSNAME="ZSAPLINK" CMPNAME="GETOBJECTTYPE" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>method GETOBJECTTYPE.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   The code of this project is provided to you under the current     |
*|   version of the SAP Code Exchange Terms of Use. You can find the   |
*|   text on the SAP Code Exchange webpage at http://www.sdn.sap.com   |
*|                                                                     |
*|   SAPlink is provided to you AS IS with no guarantee, warranty or   |
*|   support.                                                          |
*\---------------------------------------------------------------------/

  objecttype = &apos;ENHS&apos;.  &quot; Enhancement Spot

endmethod.</source>
  </method>
  <method CLSNAME="ZSAPLINK_ENH_SPOT" CMPNAME="GET_BADIDEF_TOOL" VERSION="1" LANGU="E" EXPOSURE="0" STATE="1" EDITORDER="1 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" MTDNEWEXC="X" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZSAPLINK_ENH_SPOT" CMPNAME="GET_BADIDEF_TOOL" SCONAME="I_LOCK" VERSION="1" LANGU="E" DESCRIPT="Boolean Variable (X=True, -=False, Space=Unknown)" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="BOOLEAN" PAROPTIONL="X"/>
   <exception CLSNAME="ZSAPLINK_ENH_SPOT" CMPNAME="GET_BADIDEF_TOOL" SCONAME="ZCX_SAPLINK" VERSION="1" LANGU="E" DESCRIPT="SAPlink exception class" MTDTYPE="0" EDITORDER="1 "/>
   <source>method GET_BADIDEF_TOOL.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   The code of this project is provided to you under the current     |
*|   version of the SAP Code Exchange Terms of Use. You can find the   |
*|   text on the SAP Code Exchange webpage at http://www.sdn.sap.com   |
*|                                                                     |
*|   SAPlink is provided to you AS IS with no guarantee, warranty or   |
*|   support.                                                          |
*\---------------------------------------------------------------------/

  DATA cx  TYPE REF TO cx_enh_root.
  DATA msg TYPE string.

  DATA spot_name     TYPE enhspotname.
  DATA enhref        TYPE REF TO IF_ENH_SPOT_TOOL.

  spot_name = objname.

  &quot; FREE: enhref, me-&gt;badiimpl_tool.

  TRY.
      enhref = cl_enh_factory=&gt;get_enhancement_spot(
                 spot_name      = spot_name
                 lock           = i_lock
               ).
      &quot; Check that is is realy a BAdI
      IF enhref-&gt;get_tool( ) &lt;&gt; cl_enh_tool_badi_def=&gt;tooltype.
        CONCATENATE &apos;The enhancement&apos; spot_name &apos;is not a BAdI Definition&apos; INTO msg SEPARATED BY space.
        RAISE EXCEPTION TYPE zcx_saplink
          EXPORTING
            textid = zcx_saplink=&gt;error_message
            msg    = msg.
      ENDIF.

    CATCH cx_enh_root INTO cx.
      msg = cx-&gt;get_text( ).
      RAISE EXCEPTION TYPE zcx_saplink
        EXPORTING
          textid = zcx_saplink=&gt;not_found
          object = objname.
  ENDTRY.

  &quot; enhancement is of type BAdI, so convert
  me-&gt;badidef_tool ?= enhref.

endmethod.</source>
  </method>
  <method CLSNAME="ZSAPLINK_ENH_SPOT" CMPNAME="GET_IMPLEMENTATIONS" VERSION="1" LANGU="E" DESCRIPT="Read Enhancement Implementations" EXPOSURE="0" STATE="1" EDITORDER="2 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" MTDNEWEXC="X" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZSAPLINK_ENH_SPOT" CMPNAME="GET_IMPLEMENTATIONS" SCONAME="R_DEFINITIONS" VERSION="1" LANGU="E" DESCRIPT="Table ENH_BADI_IMPL_DATA" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="1" TYPE="ENH_BADI_DATA_IT"/>
   <exception CLSNAME="ZSAPLINK_ENH_SPOT" CMPNAME="GET_IMPLEMENTATIONS" SCONAME="ZCX_SAPLINK" VERSION="1" LANGU="E" DESCRIPT="SAPlink exception class" MTDTYPE="0" EDITORDER="1 "/>
   <source>method GET_IMPLEMENTATIONS.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   The code of this project is provided to you under the current     |
*|   version of the SAP Code Exchange Terms of Use. You can find the   |
*|   text on the SAP Code Exchange webpage at http://www.sdn.sap.com   |
*|                                                                     |
*|   SAPlink is provided to you AS IS with no guarantee, warranty or   |
*|   support.                                                          |
*\---------------------------------------------------------------------/

  r_definitions = me-&gt;badidef_tool-&gt;get_badi_defs( im_version = &apos;A&apos; ).

endmethod.</source>
  </method>
 </CLAS>
 <CLAS CLSNAME="ZSAPLINK_INTERFACE" VERSION="1" LANGU="E" DESCRIPT="SapLink Interface" CATEGORY="00" EXPOSURE="2" STATE="1" RELEASE="0" CLSCCINCL="X" FIXPT="X" UNICODE="X" CLSBCCAT="00" DURATION_TYPE="0 " RISK_LEVEL="0 " REFCLSNAME="ZSAPLINK">
  <localImplementation>*&quot;* local class implementation for public class
*&quot;* use this source file for the implementation part of
*&quot;* local helper classes</localImplementation>
  <localTypes>*&quot;* use this source file for any type declarations (class
*&quot;* definitions, interfaces or data types) you need for method
*&quot;* implementation or private method&apos;s signature</localTypes>
  <localMacros>*&quot;* use this source file for any macro definitions you need
*&quot;* in the implementation part of the class</localMacros>
  <typeUsage CLSNAME="ZSAPLINK_INTERFACE" TYPEGROUP="ABAP" VERSION="1" TPUTYPE="0" EXPLICIT="X"/>
  <typeUsage CLSNAME="ZSAPLINK_INTERFACE" TYPEGROUP="SEOO" VERSION="1" TPUTYPE="0" IMPLICIT="X"/>
  <typeUsage CLSNAME="ZSAPLINK_INTERFACE" TYPEGROUP="SEOR" VERSION="1" TPUTYPE="0" EXPLICIT="X"/>
  <typeUsage CLSNAME="ZSAPLINK_INTERFACE" TYPEGROUP="SEOS" VERSION="1" TPUTYPE="0" EXPLICIT="X"/>
  <typeUsage CLSNAME="ZSAPLINK_INTERFACE" TYPEGROUP="SEOT" VERSION="1" TPUTYPE="0" EXPLICIT="X"/>
  <forwardDeclaration>ABAP</forwardDeclaration>
  <forwardDeclaration>SEOO</forwardDeclaration>
  <forwardDeclaration>SEOR</forwardDeclaration>
  <forwardDeclaration>SEOS</forwardDeclaration>
  <forwardDeclaration>SEOT</forwardDeclaration>
  <attribute CLSNAME="ZSAPLINK_INTERFACE" CMPNAME="XML_KEY_ATTRIBUTE" VERSION="1" LANGU="D" EXPOSURE="0" STATE="1" EDITORDER="5 " ATTDECLTYP="2" ATTVALUE="&apos;attribute&apos;" ATTEXPVIRT="0" TYPTYPE="1" TYPE="STRING" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZSAPLINK_INTERFACE" CMPNAME="XML_KEY_EVENTS" VERSION="1" LANGU="D" EXPOSURE="0" STATE="1" EDITORDER="4 " ATTDECLTYP="2" ATTVALUE="&apos;events&apos;" ATTEXPVIRT="0" TYPTYPE="1" TYPE="STRING" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZSAPLINK_INTERFACE" CMPNAME="XML_KEY_EXCEPTION" VERSION="1" LANGU="D" EXPOSURE="0" STATE="1" EDITORDER="3 " ATTDECLTYP="2" ATTVALUE="&apos;exception&apos;" ATTEXPVIRT="0" TYPTYPE="1" TYPE="STRING" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZSAPLINK_INTERFACE" CMPNAME="XML_KEY_INCLUDE" VERSION="1" LANGU="D" EXPOSURE="0" STATE="1" EDITORDER="8 " ATTDECLTYP="2" ATTVALUE="&apos;include&apos;" ATTEXPVIRT="0" TYPTYPE="1" TYPE="STRING" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZSAPLINK_INTERFACE" CMPNAME="XML_KEY_METHOD" VERSION="1" LANGU="D" EXPOSURE="0" STATE="1" EDITORDER="1 " ATTDECLTYP="2" ATTVALUE="&apos;method&apos;" ATTEXPVIRT="0" TYPTYPE="1" TYPE="STRING" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZSAPLINK_INTERFACE" CMPNAME="XML_KEY_PARAMETER" VERSION="1" LANGU="D" EXPOSURE="0" STATE="1" EDITORDER="2 " ATTDECLTYP="2" ATTVALUE="&apos;parameter&apos;" ATTEXPVIRT="0" TYPTYPE="1" TYPE="STRING" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZSAPLINK_INTERFACE" CMPNAME="XML_KEY_TYPES" VERSION="1" LANGU="D" EXPOSURE="0" STATE="1" EDITORDER="7 " ATTDECLTYP="2" ATTVALUE="&apos;types&apos;" ATTEXPVIRT="0" TYPTYPE="1" TYPE="STRING" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZSAPLINK_INTERFACE" CMPNAME="XML_KEY_TYPEUSAGE" VERSION="1" LANGU="D" EXPOSURE="0" STATE="1" EDITORDER="6 " ATTDECLTYP="2" ATTVALUE="&apos;typeUsage&apos;" ATTEXPVIRT="0" TYPTYPE="1" TYPE="STRING" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <inheritance CLSNAME="ZSAPLINK_INTERFACE" REFCLSNAME="ZSAPLINK" VERSION="1" STATE="1">
   <redefinition CLSNAME="ZSAPLINK_INTERFACE" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="CHECKEXISTS" EXPOSURE="2"/>
   <redefinition CLSNAME="ZSAPLINK_INTERFACE" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="CREATEIXMLDOCFROMOBJECT" EXPOSURE="2"/>
   <redefinition CLSNAME="ZSAPLINK_INTERFACE" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="CREATEOBJECTFROMIXMLDOC" EXPOSURE="2"/>
   <redefinition CLSNAME="ZSAPLINK_INTERFACE" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="DELETEOBJECT" EXPOSURE="1"/>
   <redefinition CLSNAME="ZSAPLINK_INTERFACE" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="GETOBJECTTYPE" EXPOSURE="1"/>
  </inheritance>
  <method CLSNAME="ZSAPLINK" CMPNAME="CHECKEXISTS" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>method CHECKEXISTS.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   The code of this project is provided to you under the current     |
*|   version of the SAP Code Exchange Terms of Use. You can find the   |
*|   text on the SAP Code Exchange webpage at http://www.sdn.sap.com   |
*|                                                                     |
*|   SAPlink is provided to you AS IS with no guarantee, warranty or   |
*|   support.                                                          |
*\---------------------------------------------------------------------/

*Plugin created by Thomas Ritter
*Based on work done by: Michael Yakovlev, Edward Herrmann
*and other SAPlink contributors

data intkey type SEOCLSKEY.
data not_active TYPE  char1.

  intkey-clsName = objname.

  CALL FUNCTION &apos;SEO_INTERFACE_EXISTENCE_CHECK&apos;
    EXPORTING
      intkey              = intkey
    IMPORTING
      not_active    = not_active
    EXCEPTIONS
*     NOT_SPECIFIED       = 1
     NOT_EXISTING        = 2
*     IS_CLASS            = 3
*     NO_TEXT             = 4
*     INCONSISTENT        = 5
*     OTHERS              = 6
            .
  IF sy-subrc &lt;&gt; 2.
    exists = &apos;X&apos;.
  endif.
endmethod.</source>
  </method>
  <method CLSNAME="ZSAPLINK" CMPNAME="CREATEIXMLDOCFROMOBJECT" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>method CREATEIXMLDOCFROMOBJECT.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   The code of this project is provided to you under the current     |
*|   version of the SAP Code Exchange Terms of Use. You can find the   |
*|   text on the SAP Code Exchange webpage at http://www.sdn.sap.com   |
*|                                                                     |
*|   SAPlink is provided to you AS IS with no guarantee, warranty or   |
*|   support.                                                          |
*\---------------------------------------------------------------------/

*Plugin created by Thomas Ritter
*Based on work done by: Michael Yakovlev, Edward Herrmann
*and other SAPlink contributors

  data intfsection type ref to if_ixml_element.
  data rootnode type ref to if_ixml_element.
  data _classname type seoclsname.
  data rc type sysubrc.
  data intfdescr type ref to cl_abap_intfdescr.
  data typedescr type ref to cl_abap_typedescr.
  data classkey type seoclskey.
  data intproperties type vseointerf.
  data _objtype type string.

  _classname = objname.
  classkey-clsname = objname.

  _objtype = getobjecttype( ).
  rootnode = xmldoc-&gt;create_element( _objtype ).
  call function &apos;SEO_INTERFACE_GET&apos;
    EXPORTING
      intkey       = classkey
      version      = &apos;1&apos;
    IMPORTING
      interface    = intproperties
    EXCEPTIONS
      not_existing = 1
      deleted      = 2
      is_class     = 3
      model_only   = 4
      others       = 5.

  if sy-subrc &lt;&gt; 0.
    case sy-subrc.
      when 1.
        raise exception type zcx_SAPlink
          exporting textid = zcx_SAPlink=&gt;not_found.
      when 2.
        raise exception type zcx_SAPlink
          exporting
            textid = zcx_SAPlink=&gt;error_message
            msg = &apos;interface deleted&apos;.
      when 3.
        raise exception type zcx_SAPlink
          exporting
            textid = zcx_SAPlink=&gt;error_message
            msg = &apos;classes not supported&apos;.
      when 4.
        raise exception type zcx_SAPlink
          exporting
            textid = zcx_SAPlink=&gt;error_message
            msg = &apos;interface is modeled only&apos;.
    endcase.
  endif.

  setattributesfromstructure( node = rootnode
                         structure = intproperties ).

  try.
      call method cl_abap_intfdescr=&gt;describe_by_name
        EXPORTING
          p_name         = objname
        RECEIVING
          p_descr_ref    = typedescr
        EXCEPTIONS
          type_not_found = 1.
      if sy-subrc = 0.
        intfdescr ?= typedescr.
      endif.
    catch cx_root.
      raise exception type zcx_SAPlink
        exporting textid = zcx_SAPlink=&gt;system_error.
  endtry.

*Add included interfaces to the xml document
  CALL METHOD ME-&gt;EXPORT_INTERFACES
    EXPORTING
      CLASSKEY = classkey
    IMPORTING
      RC       = rc
    CHANGING
      ROOTNODE = rootnode.

*Add types to the xml document
  CALL METHOD me-&gt;EXPORT_TYPES
    EXPORTING
      CLASSKEY = classkey
    CHANGING
      RC       = rc
      ROOTNODE = rootnode.

*Add typegroups to the xml document
  CALL METHOD me-&gt;EXPORT_TYPEGROUPS
    EXPORTING
      CLASSKEY = classkey
    CHANGING
      RC       = rc
      ROOTNODE = rootnode.

*Add events to the xml document
  CALL METHOD me-&gt;EXPORT_EVENTS
    EXPORTING
      CLASSKEY = classkey
    CHANGING
      RC       = rc
      ROOTNODE = rootnode.

*Add attributes to the xml document
  CALL METHOD me-&gt;EXPORT_ATTRIBUTES
    EXPORTING
      INTFDESCR = intfdescr
    CHANGING
      RC        = rc
      ROOTNODE  = rootnode.

*Add methods to the xml document
  CALL METHOD me-&gt;EXPORT_METHODS
    EXPORTING
      INTFDESCR = intfdescr
      CLASSNAME = _CLASSNAME
    CHANGING
      RC        = rc
      ROOTNODE  = rootnode.

* append root node to xmldoc
  rc = xmldoc-&gt;append_child( rootnode ).
  ixmldocument = xmldoc.
endmethod.</source>
  </method>
  <method CLSNAME="ZSAPLINK" CMPNAME="CREATEOBJECTFROMIXMLDOC" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>method CREATEOBJECTFROMIXMLDOC.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   The code of this project is provided to you under the current     |
*|   version of the SAP Code Exchange Terms of Use. You can find the   |
*|   text on the SAP Code Exchange webpage at http://www.sdn.sap.com   |
*|                                                                     |
*|   SAPlink is provided to you AS IS with no guarantee, warranty or   |
*|   support.                                                          |
*\---------------------------------------------------------------------/

*Plugin created by Thomas Ritter
*Based on work done by: Michael Yakovlev, Edward Herrmann
*and other SAPlink contributors

  data rootnode type ref to if_ixml_element.
  data classkey type seoclskey.
  data not_active type boolean.
  data _devclass type devclass.
  data _objtype type string.
  data checkexists type flag.

  data: e_corrnr                 type TRKORR,
        e_devclass               type DEVCLASS,
        e_version                type SEOVERSION,
        e_genflag                type GENFLAG,
        e_authority_check        type SEOX_BOOLEAN,
        e_overwrite              type SEOX_BOOLEAN.

  data: i_korrnr type trkorr.

  data: ch_interface type VSEOINTERF,
        ch_comprisings type SEOR_COMPRISINGS_R,
        ch_attributes type SEOO_ATTRIBUTES_R,
        ch_methods type SEOO_METHODS_R,
        ch_events type SEOO_EVENTS_R,
        ch_parameters type SEOS_PARAMETERS_R,
        ch_exceps type SEOS_EXCEPTIONS_R,
        ch_typeusages type SEOT_TYPEPUSAGES_R,
        ch_types type SEOO_TYPES_R.

  call function &apos;SEO_BUFFER_INIT&apos;.

  e_devclass = devclass.
  _objtype = getobjecttype( ).
  e_overwrite = overwrite.

  _devclass = devclass.
  _objtype = getobjecttype( ).

  xmldoc = ixmldocument.
  rootnode = xmldoc-&gt;find_from_name( _objtype ).

  call method getstructurefromattributes
    EXPORTING
      node      = rootnode
    CHANGING
      structure = ch_interface.

  checkexists = checkexists( ).
  if checkexists is not initial.
    if overwrite is initial.
      raise exception type zcx_SAPlink
        exporting textid = zcx_SAPlink=&gt;existing.
    else.
*     delete object for new install
      deleteobject( ).
    endif.
  endif.

  if sy-subrc &lt;&gt; 0.
    case sy-subrc.
      when 1.
        raise exception type zcx_SAPlink
          exporting textid = zcx_SAPlink=&gt;not_authorized.
      when others.
        raise exception type zcx_SAPlink
          exporting textid = zcx_SAPlink=&gt;system_error.
    endcase.
  endif.

*Add attributes to new interface
  call method import_attributes
    CHANGING
      ch_attributes = ch_attributes.

*Add includes
  call method import_interfaces
    CHANGING
      ch_comprisings = ch_comprisings.

*Add types and type groups
  call method import_types
    CHANGING
      ch_types      = ch_types
      ch_typeusages = ch_typeusages.

*Add events and event parameters
  call method import_events
    CHANGING
      ch_events     = ch_events
      ch_parameters = ch_parameters.

*Add methods, method parameters and method exceptions
  call method import_methods
    CHANGING
      ch_methods    = ch_methods
      ch_parameters = ch_parameters
      ch_exceps     = ch_exceps.

*Create the interface
  CALL FUNCTION &apos;SEO_INTERFACE_CREATE_COMPLETE&apos;
   EXPORTING
    CORRNR                             = e_corrnr
    DEVCLASS                           = e_devclass
    VERSION                            = e_version
    GENFLAG                            = e_genflag
    AUTHORITY_CHECK                    = e_authority_check
    OVERWRITE                          = e_overwrite
*     SUPPRESS_REFACTORING_SUPPORT       = SEOX_TRUE
   IMPORTING
    KORRNR                             = i_korrnr
* TABLES
*   CLASS_DESCRIPTIONS                 =
*   COMPONENT_DESCRIPTIONS             =
*   SUBCOMPONENT_DESCRIPTIONS          =
   CHANGING
    INTERFACE                          = ch_interface
    COMPRISINGS                        = ch_comprisings
    ATTRIBUTES                         = ch_attributes
    METHODS                            = ch_methods
    EVENTS                             = ch_events
    PARAMETERS                         = ch_parameters
    EXCEPS                             = ch_exceps
*   ALIASES                            =
    TYPEPUSAGES                        = ch_typeusages
*   CLSDEFERRDS                        =
*   INTDEFERRDS                        =
    TYPES                              = ch_types
   EXCEPTIONS
    EXISTING                           = 1
    IS_CLASS                           = 2
    DB_ERROR                           = 3
    COMPONENT_ERROR                    = 4
    NO_ACCESS                          = 5
    OTHER                              = 6
    OTHERS                             = 7.

  case sy-subrc.
    when &apos;0&apos;.
** i guess if we made it this far, we will assume
** successful install
      name = objname.
    when &apos;1&apos;.
      RAISE EXCEPTION TYPE zcx_SAPlink
        EXPORTING textid = zcx_SAPlink=&gt;existing.
    when others.
      raise exception type zcx_SAPlink
        exporting textid = zcx_SAPlink=&gt;system_error.
  endcase.

endmethod.</source>
  </method>
  <method CLSNAME="ZSAPLINK" CMPNAME="DELETEOBJECT" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>method DELETEOBJECT.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   The code of this project is provided to you under the current     |
*|   version of the SAP Code Exchange Terms of Use. You can find the   |
*|   text on the SAP Code Exchange webpage at http://www.sdn.sap.com   |
*|                                                                     |
*|   SAPlink is provided to you AS IS with no guarantee, warranty or   |
*|   support.                                                          |
*\---------------------------------------------------------------------/

*Plugin created by Thomas Ritter
*Based on work done by: Michael Yakovlev, Edward Herrmann
*and other SAPlink contributors

  DATA clskey TYPE seoclskey.
  clskey-clsname = objname.

  CALL FUNCTION &apos;SEO_INTERFACE_GET&apos;
    EXPORTING
      INTKEY       = clskey
      VERSION      = SEOC_VERSION_INACTIVE
      STATE        = &apos;0&apos;
    EXCEPTIONS
      NOT_EXISTING = 1
      DELETED      = 2
      IS_CLASS     = 3
      MODEL_ONLY   = 4
      OTHERS       = 5.

  IF SY-SUBRC &lt;&gt; 0.
    RAISE EXCEPTION TYPE zcx_SAPlink
      EXPORTING
        textid = zcx_SAPlink=&gt;error_message
        msg = &apos;interface not deleted&apos;.
  ENDIF.

  CALL FUNCTION &apos;SEO_INTERFACE_DELETE_W_DEPS&apos;
    EXPORTING
      intkey       = clskey
      save         = &apos; &apos;
    EXCEPTIONS
      not_existing = 1
      is_class     = 2
      not_deleted  = 3
      db_error     = 4
      OTHERS       = 5.

  IF sy-subrc &lt;&gt; 0.
    CASE sy-subrc.
      WHEN 1.
        RAISE EXCEPTION TYPE zcx_SAPlink
          EXPORTING textid = zcx_SAPlink=&gt;not_found.
      WHEN 2.
        RAISE EXCEPTION TYPE zcx_SAPlink
          EXPORTING
            textid = zcx_SAPlink=&gt;error_message
            msg = &apos;class not supported&apos;.
      WHEN 3.
        RAISE EXCEPTION TYPE zcx_SAPlink
          EXPORTING
            textid = zcx_SAPlink=&gt;error_message
            msg = &apos;interface not deleted&apos;.
      WHEN OTHERS.
        RAISE EXCEPTION TYPE zcx_SAPlink
          EXPORTING textid = zcx_SAPlink=&gt;system_error.
    ENDCASE.
  ENDIF.

  CALL FUNCTION &apos;SEO_CLIF_SAVE_ALL&apos;
    EXPORTING
      CIFKEY        = clskey
*      CHANGING
*        CORRNR        = corrnr
    EXCEPTIONS
      NOT_EXISTING  = 1
      NOTHING_TO_DO = 2
      ACCESS_ERROR  = 3
      DB_ERROR      = 4
      OTHERS        = 5.
  IF SY-SUBRC &lt;&gt; 0.
    MESSAGE ID SY-MSGID TYPE SY-MSGTY NUMBER SY-MSGNO
            WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4.
  ENDIF.

endmethod.</source>
  </method>
  <method CLSNAME="ZSAPLINK_INTERFACE" CMPNAME="EXPORT_ATTRIBUTES" VERSION="1" LANGU="D" DESCRIPT="Adds attributes to the xml document" EXPOSURE="0" STATE="1" EDITORDER="9 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZSAPLINK_INTERFACE" CMPNAME="EXPORT_ATTRIBUTES" SCONAME="INTFDESCR" VERSION="1" LANGU="D" DESCRIPT="Runtime Type Services" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="3" TYPE="CL_ABAP_INTFDESCR"/>
   <parameter CLSNAME="ZSAPLINK_INTERFACE" CMPNAME="EXPORT_ATTRIBUTES" SCONAME="RC" VERSION="1" LANGU="D" DESCRIPT="Return Value of ABAP Statements" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " PARDECLTYP="2" PARPASSTYP="1" TYPTYPE="1" TYPE="SYSUBRC"/>
   <parameter CLSNAME="ZSAPLINK_INTERFACE" CMPNAME="EXPORT_ATTRIBUTES" SCONAME="ROOTNODE" VERSION="1" LANGU="D" DESCRIPT="IF_IXML_ELEMENT" CMPTYPE="1" MTDTYPE="0" EDITORDER="3 " DISPID="0 " PARDECLTYP="2" PARPASSTYP="1" TYPTYPE="3" TYPE="IF_IXML_ELEMENT"/>
   <source>method EXPORT_ATTRIBUTES.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   The code of this project is provided to you under the current     |
*|   version of the SAP Code Exchange Terms of Use. You can find the   |
*|   text on the SAP Code Exchange webpage at http://www.sdn.sap.com   |
*|                                                                     |
*|   SAPlink is provided to you AS IS with no guarantee, warranty or   |
*|   support.                                                          |
*\---------------------------------------------------------------------/

*Plugin created by Thomas Ritter
*Based on work done by: Michael Yakovlev, Edward Herrmann
*and other SAPlink contributors

  data: attribkey type seocmpkey,
        attribdescr type abap_attrdescr,
        attribnode type ref to if_ixml_element,
        attribproperties type vseoattrib,
        _otrguid type sotr_conc,
        otrnode type ref to if_ixml_element.

  attribkey-clsname = objname.
  loop at intfdescr-&gt;attributes into attribdescr where is_inherited =
  abap_false.
    attribnode = xmldoc-&gt;create_element( XML_KEY_ATTRIBUTE ).
    attribkey-cmpname = attribdescr-name.
    call function &apos;SEO_ATTRIBUTE_GET&apos;
      EXPORTING
        attkey    = attribkey
      IMPORTING
        attribute = attribproperties.

*   include OTR if necessary (for exception classes)
    if attribproperties-type = &apos;SOTR_CONC&apos; and attribproperties-attvalue
    is not initial.
      _otrguid = attribproperties-attvalue+1(32).
      otrnode = createnodefromotr( _otrguid ).
      if otrnode is bound.
        rc = attribnode-&gt;append_child( otrnode ).
      endif.
    endif.

*   append attribute node to parent node
    setattributesfromstructure( node = attribnode structure =
    attribproperties ).
    rc = rootnode-&gt;append_child( attribnode ).
  endloop.

endmethod.</source>
  </method>
  <method CLSNAME="ZSAPLINK_INTERFACE" CMPNAME="EXPORT_EVENTS" VERSION="1" LANGU="D" DESCRIPT="Adds events to the xml document" EXPOSURE="0" STATE="1" EDITORDER="8 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZSAPLINK_INTERFACE" CMPNAME="EXPORT_EVENTS" SCONAME="CLASSKEY" VERSION="1" LANGU="D" DESCRIPT="Key structure of a class" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="SEOCLSKEY"/>
   <parameter CLSNAME="ZSAPLINK_INTERFACE" CMPNAME="EXPORT_EVENTS" SCONAME="RC" VERSION="1" LANGU="D" DESCRIPT="Return Value of ABAP Statements" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " PARDECLTYP="2" PARPASSTYP="1" TYPTYPE="1" TYPE="SYSUBRC"/>
   <parameter CLSNAME="ZSAPLINK_INTERFACE" CMPNAME="EXPORT_EVENTS" SCONAME="ROOTNODE" VERSION="1" LANGU="D" DESCRIPT="IF_IXML_ELEMENT" CMPTYPE="1" MTDTYPE="0" EDITORDER="3 " DISPID="0 " PARDECLTYP="2" PARPASSTYP="1" TYPTYPE="3" TYPE="IF_IXML_ELEMENT"/>
   <source>method EXPORT_EVENTS.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   The code of this project is provided to you under the current     |
*|   version of the SAP Code Exchange Terms of Use. You can find the   |
*|   text on the SAP Code Exchange webpage at http://www.sdn.sap.com   |
*|                                                                     |
*|   SAPlink is provided to you AS IS with no guarantee, warranty or   |
*|   support.                                                          |
*\---------------------------------------------------------------------/

*Plugin created by Thomas Ritter
*Based on work done by: Michael Yakovlev, Edward Herrmann
*and other SAPlink contributors

  DATA: events      TYPE SEOO_EVENTS_R,
        wa_event    LIKE LINE OF events,
        eventkey    type SEOCMPKEY,
        eventparams type seos_parameters_r,
        wa_params   type seos_parameter_r,
        event_node  TYPE REF TO if_ixml_element,
        parameternode type ref to if_ixml_element.

  CALL FUNCTION &apos;SEO_EVENT_READ_ALL&apos;
    EXPORTING
      cifkey            = classkey
      version           = 1
    IMPORTING
      events            = events
    EXCEPTIONS
      clif_not_existing = 1
      OTHERS            = 2.

  IF sy-subrc &lt;&gt; 0.
  ENDIF.

  LOOP AT events INTO wa_event.
    eventkey-clsname = wa_event-clsname.
    eventkey-cmpname = wa_event-CMPNAME.
    event_node = xmldoc-&gt;create_element( XML_KEY_EVENTS ).
    setattributesfromstructure( node = event_node structure =
    wa_event ).
    CALL FUNCTION &apos;SEO_EVENT_SIGNATURE_GET&apos;
      EXPORTING
        EVTKEY     = eventkey
      IMPORTING
        PARAMETERS = eventparams.
*   event parameters
    loop at eventParams into wa_params.

      parameternode = xmldoc-&gt;create_element( XML_KEY_PARAMETER ).
      setattributesfromstructure( node = parameternode
      structure = wa_params ).
      rc = event_node-&gt;append_child( parameternode ).
    ENDLOOP.
    rc = rootnode-&gt;append_child( event_node ).
  ENDLOOP.

endmethod.</source>
  </method>
  <method CLSNAME="ZSAPLINK_INTERFACE" CMPNAME="EXPORT_INTERFACES" VERSION="1" LANGU="D" DESCRIPT="Adds included interfaces to the xml document" EXPOSURE="0" STATE="1" EDITORDER="1 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZSAPLINK_INTERFACE" CMPNAME="EXPORT_INTERFACES" SCONAME="CLASSKEY" VERSION="1" LANGU="D" DESCRIPT="Key structure of a class" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="SEOCLSKEY"/>
   <parameter CLSNAME="ZSAPLINK_INTERFACE" CMPNAME="EXPORT_INTERFACES" SCONAME="RC" VERSION="1" LANGU="D" DESCRIPT="Return Value of ABAP Statements" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " PARDECLTYP="1" PARPASSTYP="1" TYPTYPE="1" TYPE="SYSUBRC"/>
   <parameter CLSNAME="ZSAPLINK_INTERFACE" CMPNAME="EXPORT_INTERFACES" SCONAME="ROOTNODE" VERSION="1" LANGU="D" DESCRIPT="IF_IXML_ELEMENT" CMPTYPE="1" MTDTYPE="0" EDITORDER="3 " DISPID="0 " PARDECLTYP="2" PARPASSTYP="1" TYPTYPE="3" TYPE="IF_IXML_ELEMENT"/>
   <source>method EXPORT_INTERFACES.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   The code of this project is provided to you under the current     |
*|   version of the SAP Code Exchange Terms of Use. You can find the   |
*|   text on the SAP Code Exchange webpage at http://www.sdn.sap.com   |
*|                                                                     |
*|   SAPlink is provided to you AS IS with no guarantee, warranty or   |
*|   support.                                                          |
*\---------------------------------------------------------------------/

*Plugin created by Thomas Ritter
*Based on work done by: Michael Yakovlev, Edward Herrmann
*and other SAPlink contributors

  DATA: it_vseocompri type table of VSEOCOMPRI,
        wa_vseocompri like line of it_vseocompri,
        implementingNode TYPE REF TO if_ixml_element,
        objname type VRSD-OBJNAME.

  objname = classkey.

  CALL FUNCTION &apos;SVRS_GET_VERSION_INTF_40&apos;
    EXPORTING
*   DESTINATION                        =
      OBJECT_NAME                        = objname
      VERSNO                             = &apos;00000&apos;
*   IV_NO_RELEASE_TRANSFORMATION       =
* IMPORTING
*   INFO_LINE                          =
  TABLES
*   VSMODISRC                          =
*   PSEOALIASES                        =
*   PVSEOATTRIB                        =
      PVSEOCOMPRI                        = it_vseocompri
*   PVSEOEVENT                         =
*   PVSEOEXCEP                         =
*   PVSEOINTERF                        =
*   PSMODILOG                          =
*   PVSEOMETHOD                        =
*   PVSEOPARAM                         =
*   PPOOL_SOURCE                       =
*   PSOURCE                            =
*   PTRDIR                             =
*   TYPE_TAB                           =
*   PSEOTYPEPLS                        =
  EXCEPTIONS
    NO_VERSION                         = 1
    SYSTEM_FAILURE                     = 2
    COMMUNICATION_FAILURE              = 3
    OTHERS                             = 4
            .
  IF SY-SUBRC &lt;&gt; 0.
  ENDIF.

  LOOP AT it_vseocompri INTO wa_vseocompri.
    implementingNode = xmldoc-&gt;create_element( XML_KEY_INCLUDE ).
    setattributesfromstructure( node = implementingNode structure =
    wa_vseocompri ).
    rc = rootnode-&gt;append_child( implementingNode ).
  ENDLOOP.

endmethod.</source>
  </method>
  <method CLSNAME="ZSAPLINK_INTERFACE" CMPNAME="EXPORT_METHODS" VERSION="1" LANGU="D" DESCRIPT="Adds methods to the xml document" EXPOSURE="0" STATE="1" EDITORDER="7 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZSAPLINK_INTERFACE" CMPNAME="EXPORT_METHODS" SCONAME="INTFDESCR" VERSION="1" LANGU="D" DESCRIPT="Runtime Type Services" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="3" TYPE="CL_ABAP_INTFDESCR"/>
   <parameter CLSNAME="ZSAPLINK_INTERFACE" CMPNAME="EXPORT_METHODS" SCONAME="CLASSNAME" VERSION="1" LANGU="D" DESCRIPT="Object Type Name" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="SEOCLSNAME"/>
   <parameter CLSNAME="ZSAPLINK_INTERFACE" CMPNAME="EXPORT_METHODS" SCONAME="RC" VERSION="1" LANGU="D" DESCRIPT="Return Value of ABAP Statements" CMPTYPE="1" MTDTYPE="0" EDITORDER="3 " DISPID="0 " PARDECLTYP="2" PARPASSTYP="1" TYPTYPE="1" TYPE="SYSUBRC"/>
   <parameter CLSNAME="ZSAPLINK_INTERFACE" CMPNAME="EXPORT_METHODS" SCONAME="ROOTNODE" VERSION="1" LANGU="D" DESCRIPT="IF_IXML_ELEMENT" CMPTYPE="1" MTDTYPE="0" EDITORDER="4 " DISPID="0 " PARDECLTYP="2" PARPASSTYP="1" TYPTYPE="3" TYPE="IF_IXML_ELEMENT"/>
   <source>method EXPORT_METHODS.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   The code of this project is provided to you under the current     |
*|   version of the SAP Code Exchange Terms of Use. You can find the   |
*|   text on the SAP Code Exchange webpage at http://www.sdn.sap.com   |
*|                                                                     |
*|   SAPlink is provided to you AS IS with no guarantee, warranty or   |
*|   support.                                                          |
*\---------------------------------------------------------------------/

*Plugin created by Thomas Ritter
*Based on work done by: Michael Yakovlev, Edward Herrmann
*and other SAPlink contributors

  data: methoddescr type abap_methdescr,
        methodkey type seocpdkey,
        clsmethkey type seocmpkey,
        methodproperties type vseomethod,
        paramdescr type abap_parmdescr,
        paramproperties type vseoparam,
        paramkey type seoscokey,
        exceptionlist type seos_exceptions_r,
        anexception type vseoexcep,
        exceptionnode type ref to if_ixml_element,
        parameternode type ref to if_ixml_element,
        methodnode type ref to if_ixml_element.

  loop at intfdescr-&gt;methods into methoddescr where
  not ( is_inherited = &apos;X&apos; and is_redefined is initial ).
    methodkey-clsname = classname.
    methodkey-cpdname = methoddescr-name.

    clsmethkey-clsname = classname.
    clsmethkey-cmpname = methoddescr-name.
    clear methodproperties.

    call function &apos;SEO_METHOD_GET&apos;
      EXPORTING
        mtdkey       = clsmethkey
      IMPORTING
        method       = methodproperties
      EXCEPTIONS
        not_existing = 1.
    if sy-subrc = 0.
      methodnode = xmldoc-&gt;create_element( XML_KEY_METHOD ).
      setattributesfromstructure( node = methodnode structure =
      methodproperties ).

*add method parameters only when not an alias
      if methoddescr-alias_for eq &apos;&apos;.

        loop at methoddescr-parameters into paramdescr.
          clear paramproperties.
          parameternode = xmldoc-&gt;create_element( XML_KEY_PARAMETER ).
          paramkey-cmpname = clsmethkey-cmpname.
          paramkey-sconame = paramdescr-name.
          paramkey-clsname = objname.
          call function &apos;SEO_PARAMETER_GET&apos;
            EXPORTING
              parkey    = paramkey
              version   = &apos;1&apos;
            IMPORTING
              parameter = paramproperties.
          setattributesfromstructure( node = parameternode
          structure = paramproperties ).
          rc = methodnode-&gt;append_child( parameternode ).
        endloop.

      endif.

*add method exceptions
      call function &apos;SEO_METHOD_SIGNATURE_GET&apos;
        EXPORTING
          mtdkey  = clsmethkey
          version = &apos;1&apos;
        IMPORTING
          exceps  = exceptionlist.
      loop at exceptionlist into anexception.
        exceptionnode = xmldoc-&gt;create_element( XML_KEY_EXCEPTION ).
        setattributesfromstructure( node = exceptionnode
        structure = anexception ).
        rc = methodnode-&gt;append_child( exceptionnode ).
      endloop.
    endif. &quot;method found
    rc = rootnode-&gt;append_child( methodnode ).
  endloop.

endmethod.</source>
  </method>
  <method CLSNAME="ZSAPLINK_INTERFACE" CMPNAME="EXPORT_TYPEGROUPS" VERSION="1" LANGU="D" DESCRIPT="Adds typegroups to the xml document" EXPOSURE="0" STATE="1" EDITORDER="11 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZSAPLINK_INTERFACE" CMPNAME="EXPORT_TYPEGROUPS" SCONAME="CLASSKEY" VERSION="1" LANGU="D" DESCRIPT="Key structure of a class" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="SEOCLSKEY"/>
   <parameter CLSNAME="ZSAPLINK_INTERFACE" CMPNAME="EXPORT_TYPEGROUPS" SCONAME="RC" VERSION="1" LANGU="D" DESCRIPT="Return Value of ABAP Statements" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " PARDECLTYP="2" PARPASSTYP="1" TYPTYPE="1" TYPE="SYSUBRC"/>
   <parameter CLSNAME="ZSAPLINK_INTERFACE" CMPNAME="EXPORT_TYPEGROUPS" SCONAME="ROOTNODE" VERSION="1" LANGU="D" DESCRIPT="IF_IXML_ELEMENT" CMPTYPE="1" MTDTYPE="0" EDITORDER="3 " DISPID="0 " PARDECLTYP="2" PARPASSTYP="1" TYPTYPE="3" TYPE="IF_IXML_ELEMENT"/>
   <source>method EXPORT_TYPEGROUPS.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   The code of this project is provided to you under the current     |
*|   version of the SAP Code Exchange Terms of Use. You can find the   |
*|   text on the SAP Code Exchange webpage at http://www.sdn.sap.com   |
*|                                                                     |
*|   SAPlink is provided to you AS IS with no guarantee, warranty or   |
*|   support.                                                          |
*\---------------------------------------------------------------------/

*Plugin created by Thomas Ritter
*Based on work done by: Michael Yakovlev, Edward Herrmann
*and other SAPlink contributors

  data: forwarddeclarationlist type seot_typepusages_r,
        forwarddeclaration type ref to if_ixml_element,
        forwarddeclarationrow type seot_typepusage_r.

  call function &apos;SEO_TYPEPUSAGE_READ_ALL&apos;
    EXPORTING
      cifkey      = classkey
      version     = &apos;1&apos;
    IMPORTING
      typepusages = forwarddeclarationlist.

*comment rrq old way....forwardDeclarations the only attribute
*set was the &quot;TypeGroup&quot;
*the new way....the entire structure is passed as in node typeUsage
  LOOP AT forwarddeclarationlist INTO forwarddeclarationrow.
    forwarddeclaration = xmldoc-&gt;create_element( XML_KEY_TYPEUSAGE ).
    setattributesfromstructure( node = forwarddeclaration structure =
    forwarddeclarationrow ).
    rc = rootnode-&gt;append_child( forwarddeclaration ).
  ENDLOOP.

endmethod.</source>
  </method>
  <method CLSNAME="ZSAPLINK_INTERFACE" CMPNAME="EXPORT_TYPES" VERSION="1" LANGU="D" DESCRIPT="Adds types to the xml document" EXPOSURE="0" STATE="1" EDITORDER="10 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZSAPLINK_INTERFACE" CMPNAME="EXPORT_TYPES" SCONAME="CLASSKEY" VERSION="1" LANGU="D" DESCRIPT="Key structure of a class" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="SEOCLSKEY"/>
   <parameter CLSNAME="ZSAPLINK_INTERFACE" CMPNAME="EXPORT_TYPES" SCONAME="RC" VERSION="1" LANGU="D" DESCRIPT="Return Value of ABAP Statements" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " PARDECLTYP="2" PARPASSTYP="1" TYPTYPE="1" TYPE="SYSUBRC"/>
   <parameter CLSNAME="ZSAPLINK_INTERFACE" CMPNAME="EXPORT_TYPES" SCONAME="ROOTNODE" VERSION="1" LANGU="D" DESCRIPT="IF_IXML_ELEMENT" CMPTYPE="1" MTDTYPE="0" EDITORDER="3 " DISPID="0 " PARDECLTYP="2" PARPASSTYP="1" TYPTYPE="3" TYPE="IF_IXML_ELEMENT"/>
   <source>method EXPORT_TYPES.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   The code of this project is provided to you under the current     |
*|   version of the SAP Code Exchange Terms of Use. You can find the   |
*|   text on the SAP Code Exchange webpage at http://www.sdn.sap.com   |
*|                                                                     |
*|   SAPlink is provided to you AS IS with no guarantee, warranty or   |
*|   support.                                                          |
*\---------------------------------------------------------------------/

*Plugin created by Thomas Ritter
*Based on work done by: Michael Yakovlev, Edward Herrmann
*and other SAPlink contributors

  data: types      type seoo_types_r,
      wa_type    like line of types,
      types_node type ref to if_ixml_element.

  call function &apos;SEO_TYPE_READ_ALL&apos;
    EXPORTING
      cifkey            = classkey
      version           = 1
    IMPORTING
      types             = types
    EXCEPTIONS
      clif_not_existing = 1
      others            = 2.

  if sy-subrc &lt;&gt; 0.
  endif.

  loop at types into wa_type.
    types_node = xmldoc-&gt;create_element( XML_KEY_TYPES ).
    setattributesfromstructure( node = types_node structure =
    wa_type ).
    rc = rootnode-&gt;append_child( types_node ).
  endloop.

endmethod.</source>
  </method>
  <method CLSNAME="ZSAPLINK" CMPNAME="GETOBJECTTYPE" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>method GETOBJECTTYPE.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   The code of this project is provided to you under the current     |
*|   version of the SAP Code Exchange Terms of Use. You can find the   |
*|   text on the SAP Code Exchange webpage at http://www.sdn.sap.com   |
*|                                                                     |
*|   SAPlink is provided to you AS IS with no guarantee, warranty or   |
*|   support.                                                          |
*\---------------------------------------------------------------------/

*Plugin created by Thomas Ritter
*Based on work done by: Michael Yakovlev, Edward Herrmann
*and other SAPlink contributors

  objecttype = &apos;INTF&apos;.  &quot;Interface

endmethod.</source>
  </method>
  <method CLSNAME="ZSAPLINK_INTERFACE" CMPNAME="IMPORT_ATTRIBUTES" VERSION="1" LANGU="D" DESCRIPT="Imports attributes from the xml document" EXPOSURE="0" STATE="1" EDITORDER="3 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" MTDNEWEXC="X" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZSAPLINK_INTERFACE" CMPNAME="IMPORT_ATTRIBUTES" SCONAME="CH_ATTRIBUTES" VERSION="1" LANGU="D" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="2" PARPASSTYP="1" TYPTYPE="1" TYPE="SEOO_ATTRIBUTES_R"/>
   <exception CLSNAME="ZSAPLINK_INTERFACE" CMPNAME="IMPORT_ATTRIBUTES" SCONAME="ZCX_SAPLINK" VERSION="1" LANGU="D" DESCRIPT="SAPlink exception class" MTDTYPE="0" EDITORDER="1 "/>
   <source>method IMPORT_ATTRIBUTES.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   The code of this project is provided to you under the current     |
*|   version of the SAP Code Exchange Terms of Use. You can find the   |
*|   text on the SAP Code Exchange webpage at http://www.sdn.sap.com   |
*|                                                                     |
*|   SAPlink is provided to you AS IS with no guarantee, warranty or   |
*|   support.                                                          |
*\---------------------------------------------------------------------/

*Plugin created by Thomas Ritter
*Based on work done by: Michael Yakovlev, Edward Herrmann
*and other SAPlink contributors

  data: otrConcept type SOTR_TEXT-CONCEPT,
        wa_attributes like line of ch_attributes,
        filter type ref to if_ixml_node_filter,
        iterator type ref to if_ixml_node_iterator,
        node type ref to if_ixml_element,
        otrnode type ref to if_ixml_element.

  filter = xmldoc-&gt;create_filter_name( XML_KEY_ATTRIBUTE ).
  iterator = xmldoc-&gt;create_iterator_filtered( filter ).
  node ?= iterator-&gt;get_next( ).

  WHILE node IS NOT INITIAL.
*   create OTR texts if necessary (for exception classes)
    clear otrConcept.
    otrnode = node-&gt;find_from_name( &apos;sotr&apos; ).
    IF otrnode IS NOT INITIAL.
      me-&gt;createotrfromnode(
        exporting node = otrnode
        importing concept = otrConcept ).
    ENDIF.
    clear wa_attributes.
*   create attribute
    CALL METHOD getstructurefromattributes
      EXPORTING
        node      = node
      CHANGING
        structure = wa_attributes.
    wa_attributes-version = &apos;0&apos;.
*   ewH:issue33--&gt;6.40 and above, must create new concept
    if otrConcept is not initial.
      concatenate `&apos;` otrConcept `&apos;` into wa_attributes-attvalue.
    endif.
    append wa_attributes to ch_attributes.
    node ?= iterator-&gt;get_next( ).
  ENDWHILE.

endmethod.</source>
  </method>
  <method CLSNAME="ZSAPLINK_INTERFACE" CMPNAME="IMPORT_EVENTS" VERSION="1" LANGU="D" DESCRIPT="Imports events from the xml document" EXPOSURE="0" STATE="1" EDITORDER="6 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZSAPLINK_INTERFACE" CMPNAME="IMPORT_EVENTS" SCONAME="CH_EVENTS" VERSION="1" LANGU="D" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="2" PARPASSTYP="1" TYPTYPE="1" TYPE="SEOO_EVENTS_R"/>
   <parameter CLSNAME="ZSAPLINK_INTERFACE" CMPNAME="IMPORT_EVENTS" SCONAME="CH_PARAMETERS" VERSION="1" LANGU="D" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " PARDECLTYP="2" PARPASSTYP="1" TYPTYPE="1" TYPE="SEOS_PARAMETERS_R"/>
   <source>method IMPORT_EVENTS.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   The code of this project is provided to you under the current     |
*|   version of the SAP Code Exchange Terms of Use. You can find the   |
*|   text on the SAP Code Exchange webpage at http://www.sdn.sap.com   |
*|                                                                     |
*|   SAPlink is provided to you AS IS with no guarantee, warranty or   |
*|   support.                                                          |
*\---------------------------------------------------------------------/

*Plugin created by Thomas Ritter
*Based on work done by: Michael Yakovlev, Edward Herrmann
*and other SAPlink contributors

  data: event_filter type ref to if_ixml_node_filter,
        parameter_filter type ref to if_ixml_node_filter,
        event_iterator type ref to if_ixml_node_iterator,
        parameter_iterator type ref to if_ixml_node_iterator,
        event_node type ref to if_ixml_element,
        parameter_node type ref to if_ixml_element,
        wa_events like line of ch_events,
        wa_parameters like line of ch_parameters.

  event_filter = xmldoc-&gt;create_filter_name( XML_KEY_EVENTS ).
  event_iterator = xmldoc-&gt;create_iterator_filtered( event_filter ).
  event_node ?= event_iterator-&gt;get_next( ).
  WHILE event_node IS NOT INITIAL.
    CLEAR wa_events.
    CALL METHOD getstructurefromattributes
      EXPORTING
        node      = event_node
      CHANGING
        structure = wa_events.
    append wa_events to ch_events.
    parameter_filter = event_node-&gt;create_filter_name( XML_KEY_PARAMETER ).
    parameter_iterator = event_node-&gt;create_iterator_filtered( parameter_filter ).
    parameter_node ?= parameter_iterator-&gt;get_next( ).
    WHILE parameter_node IS NOT INITIAL.
      CLEAR wa_parameters.
      CALL METHOD getstructurefromattributes
        EXPORTING
          node      = parameter_node
        CHANGING
          structure = wa_parameters.
      append wa_parameters to ch_parameters.
      parameter_node ?= parameter_iterator-&gt;get_next( ).
    endwhile.
    event_node ?= event_iterator-&gt;get_next( ).
  ENDWHILE.

endmethod.</source>
  </method>
  <method CLSNAME="ZSAPLINK_INTERFACE" CMPNAME="IMPORT_INTERFACES" VERSION="1" LANGU="D" DESCRIPT="Imports included interfaces from the xml document" EXPOSURE="0" STATE="1" EDITORDER="4 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZSAPLINK_INTERFACE" CMPNAME="IMPORT_INTERFACES" SCONAME="CH_COMPRISINGS" VERSION="1" LANGU="D" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="2" PARPASSTYP="1" TYPTYPE="1" TYPE="SEOR_COMPRISINGS_R"/>
   <source>method IMPORT_INTERFACES.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   The code of this project is provided to you under the current     |
*|   version of the SAP Code Exchange Terms of Use. You can find the   |
*|   text on the SAP Code Exchange webpage at http://www.sdn.sap.com   |
*|                                                                     |
*|   SAPlink is provided to you AS IS with no guarantee, warranty or   |
*|   support.                                                          |
*\---------------------------------------------------------------------/

*Plugin created by Thomas Ritter
*Based on work done by: Michael Yakovlev, Edward Herrmann
*and other SAPlink contributors

  data: filter type ref to if_ixml_node_filter,
        iterator type ref to if_ixml_node_iterator,
        node type ref to if_ixml_element,
        wa_comprisings like line of ch_comprisings.

  filter = xmldoc-&gt;create_filter_name( XML_KEY_INCLUDE ).
  iterator = xmldoc-&gt;create_iterator_filtered( filter ).
  node ?= iterator-&gt;get_next( ).
  WHILE node IS NOT INITIAL.
    CLEAR wa_comprisings.
    CALL METHOD getstructurefromattributes
      EXPORTING
        node      = node
      CHANGING
        structure = wa_comprisings.
    wa_comprisings-version = &apos;0&apos;.
    append wa_comprisings to ch_comprisings.
    node ?= iterator-&gt;get_next( ).
  ENDWHILE.

endmethod.</source>
  </method>
  <method CLSNAME="ZSAPLINK_INTERFACE" CMPNAME="IMPORT_METHODS" VERSION="1" LANGU="D" DESCRIPT="Imports methods from the xml document" EXPOSURE="0" STATE="1" EDITORDER="2 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZSAPLINK_INTERFACE" CMPNAME="IMPORT_METHODS" SCONAME="CH_METHODS" VERSION="1" LANGU="D" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="2" PARPASSTYP="1" TYPTYPE="1" TYPE="SEOO_METHODS_R"/>
   <parameter CLSNAME="ZSAPLINK_INTERFACE" CMPNAME="IMPORT_METHODS" SCONAME="CH_PARAMETERS" VERSION="1" LANGU="D" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " PARDECLTYP="2" PARPASSTYP="1" TYPTYPE="1" TYPE="SEOS_PARAMETERS_R"/>
   <parameter CLSNAME="ZSAPLINK_INTERFACE" CMPNAME="IMPORT_METHODS" SCONAME="CH_EXCEPS" VERSION="1" LANGU="D" CMPTYPE="1" MTDTYPE="0" EDITORDER="3 " DISPID="0 " PARDECLTYP="2" PARPASSTYP="1" TYPTYPE="1" TYPE="SEOS_EXCEPTIONS_R"/>
   <source>method IMPORT_METHODS.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   The code of this project is provided to you under the current     |
*|   version of the SAP Code Exchange Terms of Use. You can find the   |
*|   text on the SAP Code Exchange webpage at http://www.sdn.sap.com   |
*|                                                                     |
*|   SAPlink is provided to you AS IS with no guarantee, warranty or   |
*|   support.                                                          |
*\---------------------------------------------------------------------/

*Plugin created by Thomas Ritter
*Based on work done by: Michael Yakovlev, Edward Herrmann
*and other SAPlink contributors

  data: filter type ref to if_ixml_node_filter,
        filter2 type ref to if_ixml_node_filter,
        iterator type ref to if_ixml_node_iterator,
        iterator2 type ref to if_ixml_node_iterator,
        node type ref to if_ixml_element,
        node2 type ref to if_ixml_element,
        wa_parameters like line of ch_parameters,
        wa_methods like line of ch_methods,
        wa_exceps like line of ch_exceps.

*Add methods to new interface
  filter = xmldoc-&gt;create_filter_name( XML_KEY_METHOD ).
  iterator = xmldoc-&gt;create_iterator_filtered( filter ).
  node ?= iterator-&gt;get_next( ).
  WHILE node IS NOT INITIAL.
    CLEAR wa_methods.
    CALL METHOD getstructurefromattributes
      EXPORTING
        node      = node
      CHANGING
        structure = wa_methods.

*Add parameters
    filter2 = node-&gt;create_filter_name( XML_KEY_PARAMETER ).
    iterator2 = node-&gt;create_iterator_filtered( filter2 ).
    node2 ?= iterator2-&gt;get_next( ).
    WHILE node2 IS NOT INITIAL.
      CLEAR wa_parameters.
      CALL METHOD getstructurefromattributes
        EXPORTING
          node      = node2
        CHANGING
          structure = wa_parameters.
      append wa_parameters to ch_parameters.
      node2 ?= iterator2-&gt;get_next( ).
    ENDWHILE.
*Add exceptions
    filter2 = node-&gt;create_filter_name( XML_KEY_EXCEPTION ).
    iterator2 = node-&gt;create_iterator_filtered( filter2 ).
    node2 ?= iterator2-&gt;get_next( ).
    WHILE node2 IS NOT INITIAL.
      CALL METHOD getstructurefromattributes
        EXPORTING
          node      = node2
        CHANGING
          structure = wa_exceps.
      append wa_exceps to ch_exceps.
      node2 ?= iterator2-&gt;get_next( ).
    ENDWHILE.
    append wa_methods to ch_methods.
    node ?= iterator-&gt;get_next( ).
  endwhile.

endmethod.</source>
  </method>
  <method CLSNAME="ZSAPLINK_INTERFACE" CMPNAME="IMPORT_TYPES" VERSION="1" LANGU="D" DESCRIPT="Imports types and typegroups from the xml document" EXPOSURE="0" STATE="1" EDITORDER="5 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZSAPLINK_INTERFACE" CMPNAME="IMPORT_TYPES" SCONAME="CH_TYPEUSAGES" VERSION="1" LANGU="D" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="2" PARPASSTYP="1" TYPTYPE="1" TYPE="SEOT_TYPEPUSAGES_R"/>
   <parameter CLSNAME="ZSAPLINK_INTERFACE" CMPNAME="IMPORT_TYPES" SCONAME="CH_TYPES" VERSION="1" LANGU="D" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " PARDECLTYP="2" PARPASSTYP="1" TYPTYPE="1" TYPE="SEOO_TYPES_R"/>
   <source>method IMPORT_TYPES.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   The code of this project is provided to you under the current     |
*|   version of the SAP Code Exchange Terms of Use. You can find the   |
*|   text on the SAP Code Exchange webpage at http://www.sdn.sap.com   |
*|                                                                     |
*|   SAPlink is provided to you AS IS with no guarantee, warranty or   |
*|   support.                                                          |
*\---------------------------------------------------------------------/

*Plugin created by Thomas Ritter
*Based on work done by: Michael Yakovlev, Edward Herrmann
*and other SAPlink contributors

  data: filter type ref to if_ixml_node_filter,
        iterator type ref to if_ixml_node_iterator,
        node type ref to if_ixml_element,
        wa_types like line of ch_types,
        wa_typeusages like line of ch_typeusages.

  filter = xmldoc-&gt;create_filter_name( XML_KEY_TYPES ).
  iterator = xmldoc-&gt;create_iterator_filtered( filter ).
  node ?= iterator-&gt;get_next( ).
  WHILE node IS NOT INITIAL.
    CLEAR wa_types.
    CALL METHOD getstructurefromattributes
      EXPORTING
        node      = node
      CHANGING
        structure = wa_types.
    wa_types-version = &apos;0&apos;.
    append wa_types to ch_types.
    node ?= iterator-&gt;get_next( ).
  ENDWHILE.

*ewH: for version 0.1.3, we will continue to generate both nodes
* in order for upgradeability of SAPlink itself.  For version
* 2.0, forwardDeclaration node generations will be deprecated.
  filter = xmldoc-&gt;create_filter_name( XML_KEY_TYPEUSAGE ).
  iterator = xmldoc-&gt;create_iterator_filtered( filter ).
  node ?= iterator-&gt;get_next( ).

  WHILE node IS NOT INITIAL.
    CALL METHOD getstructurefromattributes
      EXPORTING
        node      = node
      CHANGING
        structure = wa_typeUsages.
    APPEND wa_typeusages TO ch_typeusages.
    node ?= iterator-&gt;get_next( ).
  ENDWHILE.

endmethod.</source>
  </method>
 </CLAS>
 <CLAS CLSNAME="ZSAPLINK_VIEW_CLUSTER" VERSION="1" LANGU="E" DESCRIPT="SAPlink - View cluster" CATEGORY="00" EXPOSURE="2" STATE="1" RELEASE="0" CLSFINAL="X" CLSCCINCL="X" FIXPT="X" UNICODE="X" CLSBCCAT="00" DURATION_TYPE="0 " RISK_LEVEL="0 " REFCLSNAME="ZSAPLINK">
  <localImplementation>*&quot;* use this source file for the definition and implementation of
*&quot;* local helper classes, interface definitions and type
*&quot;* declarations</localImplementation>
  <localTypes>*&quot;* use this source file for any type of declarations (class
*&quot;* definitions, interfaces or type declarations) you need for
*&quot;* components in the private section</localTypes>
  <localMacros>*&quot;* use this source file for any macro definitions you need
*&quot;* in the implementation part of the class</localMacros>
  <inheritance CLSNAME="ZSAPLINK_VIEW_CLUSTER" REFCLSNAME="ZSAPLINK" VERSION="1" STATE="1">
   <redefinition CLSNAME="ZSAPLINK_VIEW_CLUSTER" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="CHECKEXISTS" EXPOSURE="2"/>
   <redefinition CLSNAME="ZSAPLINK_VIEW_CLUSTER" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="CREATEIXMLDOCFROMOBJECT" EXPOSURE="2"/>
   <redefinition CLSNAME="ZSAPLINK_VIEW_CLUSTER" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="CREATEOBJECTFROMIXMLDOC" EXPOSURE="2"/>
   <redefinition CLSNAME="ZSAPLINK_VIEW_CLUSTER" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="DELETEOBJECT" EXPOSURE="1"/>
   <redefinition CLSNAME="ZSAPLINK_VIEW_CLUSTER" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="GETOBJECTTYPE" EXPOSURE="1"/>
  </inheritance>
  <method CLSNAME="ZSAPLINK" CMPNAME="CHECKEXISTS" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>METHOD checkexists.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   The code of this project is provided to you under the current     |
*|   version of the SAP Code Exchange Terms of Use. You can find the   |
*|   text on the SAP Code Exchange webpage at http://www.sdn.sap.com   |
*|                                                                     |
*|   SAPlink is provided to you AS IS with no guarantee, warranty or   |
*|   support.                                                          |
*\---------------------------------------------------------------------/

  &quot; Plugin created by:
  &quot; Nicolas Busson
  &quot; bussonnicolas@gmail.com

  SELECT SINGLE vclname INTO objname FROM vcldir WHERE vclname = objname.
  IF sy-subrc = 0.
    exists = &apos;X&apos;.
  ENDIF.

ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZSAPLINK_VIEW_CLUSTER" CMPNAME="CHECK_AUTHORITY" VERSION="1" LANGU="E" DESCRIPT="Authorization check" EXPOSURE="0" STATE="1" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" MTDNEWEXC="X" BCMTDCAT="00" BCMTDSYN="0">
   <exception CLSNAME="ZSAPLINK_VIEW_CLUSTER" CMPNAME="CHECK_AUTHORITY" SCONAME="ZCX_SAPLINK" VERSION="1" LANGU="E" DESCRIPT="SAPlink exception class" MTDTYPE="0" EDITORDER="1 "/>
   <source>METHOD check_authority.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   The code of this project is provided to you under the current     |
*|   version of the SAP Code Exchange Terms of Use. You can find the   |
*|   text on the SAP Code Exchange webpage at http://www.sdn.sap.com   |
*|                                                                     |
*|   SAPlink is provided to you AS IS with no guarantee, warranty or   |
*|   support.                                                          |
*\---------------------------------------------------------------------/

  &quot; Plugin created by:
  &quot; Nicolas Busson
  &quot; bussonnicolas@gmail.com

  CALL FUNCTION &apos;VIEW_AUTHORITY_CHECK&apos;
    EXPORTING
      view_action                    = &apos;U&apos;
      view_name                      = &apos;V_VCLDIR&apos;
      no_warning_for_clientindep     = &apos;X&apos;
    EXCEPTIONS
      no_authority                   = 1
      no_clientindependent_authority = 2
      OTHERS                         = 3.
  IF sy-subrc &lt;&gt; 0.
    RAISE EXCEPTION TYPE zcx_saplink
      EXPORTING
        textid = zcx_saplink=&gt;not_authorized.
  ENDIF.

ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZSAPLINK" CMPNAME="CREATEIXMLDOCFROMOBJECT" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>METHOD createixmldocfromobject.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   The code of this project is provided to you under the current     |
*|   version of the SAP Code Exchange Terms of Use. You can find the   |
*|   text on the SAP Code Exchange webpage at http://www.sdn.sap.com   |
*|                                                                     |
*|   SAPlink is provided to you AS IS with no guarantee, warranty or   |
*|   support.                                                          |
*\---------------------------------------------------------------------/

  &quot; Plugin created by:
  &quot; Nicolas Busson
  &quot; bussonnicolas@gmail.com

  DATA lv_vclname             TYPE vcldir-vclname.
  DATA ls_vcldir              TYPE v_vcldir.
  DATA lt_vclstruc            TYPE TABLE OF v_vclstruc.
  DATA lt_vclstrudep          TYPE TABLE OF vclstrudep.
  DATA lt_vcltab              TYPE TABLE OF vclmf.
  DATA ls_vclstruc            TYPE v_vclstruc.
  DATA ls_vclstrudep          TYPE vclstrudep.
  DATA ls_vcltab              TYPE vclmf.
  DATA rc                     TYPE sysubrc.                 &quot;#EC NEEDED

  DATA _objtype               TYPE string.
  DATA rootnode               TYPE REF TO if_ixml_element.
  DATA node                   TYPE REF TO if_ixml_element.



  &quot; Read view cluster info
  lv_vclname = objname.
  CALL FUNCTION &apos;VIEWCLUSTER_GET_DEFINITION&apos;
    EXPORTING
      vclname                = lv_vclname
    IMPORTING
      vcldir_entry           = ls_vcldir
    TABLES
      vclstruc_tab           = lt_vclstruc
      vclstrudep_tab         = lt_vclstrudep
      vclmf_tab              = lt_vcltab
    EXCEPTIONS
      viewcluster_not_found  = 1
      incomplete_viewcluster = 2
      OTHERS                 = 3.

  IF sy-subrc &lt;&gt; 0.
    RAISE EXCEPTION TYPE zcx_saplink
      EXPORTING
        textid = zcx_saplink=&gt;not_found.
  ENDIF.


  &quot; Create XML
  _objtype = getobjecttype( ).
  rootnode = xmldoc-&gt;create_element( _objtype ).
  setattributesfromstructure( node = rootnode structure = ls_vcldir ).

  LOOP AT lt_vclstruc INTO ls_vclstruc.
    node = xmldoc-&gt;create_element( &apos;vclstruc&apos; ).
    setattributesfromstructure( node = node structure = ls_vclstruc ).
    rc = rootnode-&gt;append_child( node ).
  ENDLOOP.

  LOOP AT lt_vclstrudep INTO ls_vclstrudep.
    node = xmldoc-&gt;create_element( &apos;vclstrudep&apos; ).
    setattributesfromstructure( node = node structure = ls_vclstrudep ).
    rc = rootnode-&gt;append_child( node ).
  ENDLOOP.

  LOOP AT lt_vcltab INTO ls_vcltab.
    node = xmldoc-&gt;create_element( &apos;vcltab&apos; ).
    setattributesfromstructure( node = node structure = ls_vcltab ).
    rc = rootnode-&gt;append_child( node ).
  ENDLOOP.

  rc = xmldoc-&gt;append_child( rootnode ).
  ixmldocument = xmldoc.

ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZSAPLINK" CMPNAME="CREATEOBJECTFROMIXMLDOC" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>METHOD createobjectfromixmldoc.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   The code of this project is provided to you under the current     |
*|   version of the SAP Code Exchange Terms of Use. You can find the   |
*|   text on the SAP Code Exchange webpage at http://www.sdn.sap.com   |
*|                                                                     |
*|   SAPlink is provided to you AS IS with no guarantee, warranty or   |
*|   support.                                                          |
*\---------------------------------------------------------------------/

  &quot; Plugin created by:
  &quot; Nicolas Busson
  &quot; bussonnicolas@gmail.com

  DATA lv_vclname             TYPE vcldir-vclname.
  DATA ls_vcldir              TYPE v_vcldir.
  DATA lt_vclstruc            TYPE TABLE OF v_vclstruc.
  DATA lt_vclstrudep          TYPE TABLE OF vclstrudep.
  DATA lt_vcltab              TYPE TABLE OF vclmf.
  DATA ls_vclstruc            TYPE v_vclstruc.
  DATA ls_vclstrudep          TYPE vclstrudep.
  DATA ls_vcltab              TYPE vclmf.
  DATA checkexists            TYPE flag.
  DATA lv_trkorr              TYPE trkorr.

  DATA _objtype               TYPE string.
  DATA rootnode               TYPE REF TO if_ixml_element.
  DATA node                   TYPE REF TO if_ixml_element.
  DATA filter                 TYPE REF TO if_ixml_node_filter.
  DATA iterator               TYPE REF TO if_ixml_node_iterator.



  _objtype = getobjecttype( ).
  xmldoc = ixmldocument.
  rootnode = xmldoc-&gt;find_from_name( _objtype ).
  CALL METHOD getstructurefromattributes
    EXPORTING
      node      = rootnode
    CHANGING
      structure = ls_vcldir.

  objname = ls_vcldir-vclname.

  checkexists = checkexists( ).
  IF checkexists IS NOT INITIAL.
    IF overwrite IS INITIAL.
      RAISE EXCEPTION TYPE zcx_saplink
        EXPORTING
          textid = zcx_saplink=&gt;existing.
    ELSE.                                                   &quot;#EC NEEDED
      &quot; Object will be overwritten automatically
      &quot; No need for deletion
    ENDIF.
  ENDIF.


  FREE: filter, iterator, node.
  filter = xmldoc-&gt;create_filter_name( &apos;vclstruc&apos; ).
  iterator = xmldoc-&gt;create_iterator_filtered( filter ).
  node ?= iterator-&gt;get_next( ).
  WHILE node IS NOT INITIAL.
    CLEAR ls_vclstruc.
    CALL METHOD getstructurefromattributes
      EXPORTING
        node      = node
      CHANGING
        structure = ls_vclstruc.
    APPEND ls_vclstruc TO lt_vclstruc.
    node ?= iterator-&gt;get_next( ).
  ENDWHILE.

  FREE: filter, iterator, node.
  filter = xmldoc-&gt;create_filter_name( &apos;vclstrudep&apos; ).
  iterator = xmldoc-&gt;create_iterator_filtered( filter ).
  node ?= iterator-&gt;get_next( ).
  WHILE node IS NOT INITIAL.
    CLEAR ls_vclstrudep.
    CALL METHOD getstructurefromattributes
      EXPORTING
        node      = node
      CHANGING
        structure = ls_vclstrudep.
    APPEND ls_vclstrudep TO lt_vclstrudep.
    node ?= iterator-&gt;get_next( ).
  ENDWHILE.

  FREE: filter, iterator, node.
  filter = xmldoc-&gt;create_filter_name( &apos;vcltab&apos; ).
  iterator = xmldoc-&gt;create_iterator_filtered( filter ).
  node ?= iterator-&gt;get_next( ).
  WHILE node IS NOT INITIAL.
    CLEAR ls_vcltab.
    CALL METHOD getstructurefromattributes
      EXPORTING
        node      = node
      CHANGING
        structure = ls_vcltab.
    APPEND ls_vcltab TO lt_vcltab.
    node ?= iterator-&gt;get_next( ).
  ENDWHILE.

  check_authority( ).
  enqueue( action = &apos;E&apos; ).
  lv_trkorr = create_transport( ).

  CALL FUNCTION &apos;VIEWCLUSTER_SAVE_DEFINITION&apos;
    EXPORTING
      vcldir_entry   = ls_vcldir
    TABLES
      vclstruc_tab   = lt_vclstruc
      vclstrudep_tab = lt_vclstrudep
      vclmf_tab      = lt_vcltab.

  CALL FUNCTION &apos;OBJ_GENERATE&apos;
    EXPORTING
      iv_korrnum       = lv_trkorr
      iv_objectname    = ls_vcldir-vclname
      iv_objecttype    = &apos;C&apos;
      iv_maint_mode    = &apos;I&apos;
    EXCEPTIONS
      illegal_call     = 1
      object_not_found = 2
      generate_error   = 3
      transport_error  = 4
      OTHERS           = 5.

  IF sy-subrc = 0.
    &quot; successful install
    enqueue( action = &apos;D&apos; ).
    name = ls_vcldir-vclname.
  ENDIF.


ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZSAPLINK_VIEW_CLUSTER" CMPNAME="CREATE_TRANSPORT" VERSION="1" LANGU="E" DESCRIPT="Create transport order for newly created view cluster" EXPOSURE="0" STATE="1" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" MTDNEWEXC="X" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZSAPLINK_VIEW_CLUSTER" CMPNAME="CREATE_TRANSPORT" SCONAME="RV_TRKORR" VERSION="1" LANGU="E" DESCRIPT="Request/Task" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="1" TYPE="TRKORR"/>
   <exception CLSNAME="ZSAPLINK_VIEW_CLUSTER" CMPNAME="CREATE_TRANSPORT" SCONAME="ZCX_SAPLINK" VERSION="1" LANGU="E" DESCRIPT="SAPlink exception class" MTDTYPE="0" EDITORDER="1 "/>
   <source>METHOD create_transport.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   The code of this project is provided to you under the current     |
*|   version of the SAP Code Exchange Terms of Use. You can find the   |
*|   text on the SAP Code Exchange webpage at http://www.sdn.sap.com   |
*|                                                                     |
*|   SAPlink is provided to you AS IS with no guarantee, warranty or   |
*|   support.                                                          |
*\---------------------------------------------------------------------/

  &quot; Plugin created by:
  &quot; Nicolas Busson
  &quot; bussonnicolas@gmail.com

  DATA lt_ko200 TYPE TABLE OF ko200.
  DATA ls_ko200 TYPE ko200.
  DATA lv_trkorr  TYPE trkorr.


  ls_ko200-pgmid = &apos;R3TR&apos;.
  ls_ko200-object = &apos;VCLS&apos;.
  ls_ko200-obj_name = objname.
  APPEND ls_ko200 TO lt_ko200.

  CALL FUNCTION &apos;TR_OBJECTS_CHECK&apos;
    IMPORTING
      we_order                = lv_trkorr
    TABLES
      wt_ko200                = lt_ko200
    EXCEPTIONS
      cancel_edit_other_error = 1
      show_only_other_error   = 2
      OTHERS                  = 3.
  IF sy-subrc &lt;&gt; 0.
    RAISE EXCEPTION TYPE zcx_saplink
      EXPORTING
        textid = zcx_saplink=&gt;system_error.
  ENDIF.

  CALL FUNCTION &apos;TR_OBJECTS_INSERT&apos;
    EXPORTING
      wi_order                = lv_trkorr
    IMPORTING
      we_order                = rv_trkorr
    TABLES
      wt_ko200                = lt_ko200
    EXCEPTIONS
      cancel_edit_other_error = 1
      show_only_other_error   = 2
      OTHERS                  = 3.
  IF sy-subrc &lt;&gt; 0.
    RAISE EXCEPTION TYPE zcx_saplink
      EXPORTING
        textid = zcx_saplink=&gt;system_error.
  ENDIF.


ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZSAPLINK" CMPNAME="DELETEOBJECT" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>METHOD deleteobject.                                        &quot;#EC NEEDED
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   The code of this project is provided to you under the current     |
*|   version of the SAP Code Exchange Terms of Use. You can find the   |
*|   text on the SAP Code Exchange webpage at http://www.sdn.sap.com   |
*|                                                                     |
*|   SAPlink is provided to you AS IS with no guarantee, warranty or   |
*|   support.                                                          |
*\---------------------------------------------------------------------/

  &quot; Plugin created by:
  &quot; Nicolas Busson
  &quot; bussonnicolas@gmail.com

* Do need to delete -&gt; Object will be regenerated

ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZSAPLINK_VIEW_CLUSTER" CMPNAME="ENQUEUE" VERSION="1" LANGU="E" DESCRIPT="Enqueue" EXPOSURE="0" STATE="1" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" MTDNEWEXC="X" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZSAPLINK_VIEW_CLUSTER" CMPNAME="ENQUEUE" SCONAME="ACTION" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="C"/>
   <exception CLSNAME="ZSAPLINK_VIEW_CLUSTER" CMPNAME="ENQUEUE" SCONAME="ZCX_SAPLINK" VERSION="1" LANGU="E" DESCRIPT="SAPlink exception class" MTDTYPE="0" EDITORDER="1 "/>
   <source>METHOD enqueue.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   The code of this project is provided to you under the current     |
*|   version of the SAP Code Exchange Terms of Use. You can find the   |
*|   text on the SAP Code Exchange webpage at http://www.sdn.sap.com   |
*|                                                                     |
*|   SAPlink is provided to you AS IS with no guarantee, warranty or   |
*|   support.                                                          |
*\---------------------------------------------------------------------/

  &quot; Plugin created by:
  &quot; Nicolas Busson
  &quot; bussonnicolas@gmail.com

  DATA: vcl_sellist TYPE TABLE OF vimsellist.
  DATA: vcl_sel     TYPE vimsellist.
  DATA: lv_error    TYPE string.
  DATA: lv_subrc    TYPE sysubrc.

  REFRESH vcl_sellist. CLEAR vcl_sellist.
  vcl_sel-viewfield = &apos;VCLNAME&apos;.
  vcl_sel-operator  = &apos;EQ&apos;.
  vcl_sel-value     = objname.
  vcl_sel-ddic      = &apos;S&apos;.
  APPEND vcl_sel TO vcl_sellist.

  CALL FUNCTION &apos;VIEW_ENQUEUE&apos;
    EXPORTING
      action         = action
      enqueue_mode   = &apos;E&apos;
      view_name      = &apos;V_VCLDIR&apos;
      enqueue_range  = &apos;X&apos;
    TABLES
      sellist        = vcl_sellist
    EXCEPTIONS
      foreign_lock   = 1
      system_failure = 2.
  IF sy-subrc &lt;&gt; 0 AND action = &apos;E&apos;.
    CASE sy-subrc.
      WHEN 1.
        MESSAGE e049(sv) WITH sy-msgv1 INTO lv_error.
        RAISE EXCEPTION TYPE zcx_saplink
          EXPORTING
            textid = zcx_saplink=&gt;error_message
            msg    = lv_error.
      WHEN 2.
        MESSAGE e050(sv) WITH &apos;V_VCLDIR&apos; INTO lv_error.
        RAISE EXCEPTION TYPE zcx_saplink
          EXPORTING
            textid = zcx_saplink=&gt;error_message
            msg    = lv_error.
    ENDCASE.
  ENDIF.

  CALL FUNCTION &apos;VIEW_ENQUEUE&apos;
    EXPORTING
      action         = action
      enqueue_mode   = &apos;E&apos;
      view_name      = &apos;V_VCLSTRUC&apos;
      enqueue_range  = &apos;X&apos;
    TABLES
      sellist        = vcl_sellist
    EXCEPTIONS
      foreign_lock   = 1
      system_failure = 2.
  IF sy-subrc &lt;&gt; 0 AND action = &apos;E&apos;.
    lv_subrc = sy-subrc.
    CALL FUNCTION &apos;VIEW_ENQUEUE&apos;
      EXPORTING
        action        = &apos;D&apos;
        enqueue_mode  = &apos;E&apos;
        view_name     = &apos;V_VCLDIR&apos;
        enqueue_range = &apos;X&apos;
      TABLES
        sellist       = vcl_sellist.

    CASE lv_subrc.
      WHEN 1.
        MESSAGE e049(sv) WITH sy-msgv1 INTO lv_error.
        RAISE EXCEPTION TYPE zcx_saplink
          EXPORTING
            textid = zcx_saplink=&gt;error_message
            msg    = lv_error.
      WHEN 2.
        MESSAGE e050(sv) WITH &apos;V_VCLSTRUC&apos; INTO lv_error.
        RAISE EXCEPTION TYPE zcx_saplink
          EXPORTING
            textid = zcx_saplink=&gt;error_message
            msg    = lv_error.
    ENDCASE.
  ENDIF.

  CALL FUNCTION &apos;VIEW_ENQUEUE&apos;
    EXPORTING
      action         = action
      enqueue_mode   = &apos;E&apos;
      view_name      = &apos;V_VCLSTDEP&apos;
      enqueue_range  = &apos;X&apos;
    TABLES
      sellist        = vcl_sellist
    EXCEPTIONS
      foreign_lock   = 1
      system_failure = 2.
  IF sy-subrc &lt;&gt; 0 AND action = &apos;E&apos;.
    lv_subrc = sy-subrc.
    CALL FUNCTION &apos;VIEW_ENQUEUE&apos;
      EXPORTING
        action        = &apos;D&apos;
        enqueue_mode  = &apos;E&apos;
        view_name     = &apos;V_VCLDIR&apos;
        enqueue_range = &apos;X&apos;
      TABLES
        sellist       = vcl_sellist.
    CALL FUNCTION &apos;VIEW_ENQUEUE&apos;
      EXPORTING
        action        = &apos;D&apos;
        enqueue_mode  = &apos;E&apos;
        view_name     = &apos;V_VCLSTRUC&apos;
        enqueue_range = &apos;X&apos;
      TABLES
        sellist       = vcl_sellist.

    CASE lv_subrc.
      WHEN 1.
        MESSAGE e049(sv) WITH sy-msgv1 INTO lv_error.
        RAISE EXCEPTION TYPE zcx_saplink
          EXPORTING
            textid = zcx_saplink=&gt;error_message
            msg    = lv_error.
      WHEN 2.
        MESSAGE e050(sv) WITH &apos;V_VCLSTDEP&apos; INTO lv_error.
        RAISE EXCEPTION TYPE zcx_saplink
          EXPORTING
            textid = zcx_saplink=&gt;error_message
            msg    = lv_error.
    ENDCASE.
  ENDIF.

  CALL FUNCTION &apos;VIEW_ENQUEUE&apos;
    EXPORTING
      action         = action
      enqueue_mode   = &apos;E&apos;
      view_name      = &apos;V_VCLMF&apos;
      enqueue_range  = &apos;X&apos;
    TABLES
      sellist        = vcl_sellist
    EXCEPTIONS
      foreign_lock   = 1
      system_failure = 2.
  IF sy-subrc &lt;&gt; 0 AND action = &apos;E&apos;.
    lv_subrc = sy-subrc.
    CALL FUNCTION &apos;VIEW_ENQUEUE&apos;
      EXPORTING
        action        = &apos;D&apos;
        enqueue_mode  = &apos;E&apos;
        view_name     = &apos;V_VCLDIR&apos;
        enqueue_range = &apos;X&apos;
      TABLES
        sellist       = vcl_sellist.
    CALL FUNCTION &apos;VIEW_ENQUEUE&apos;
      EXPORTING
        action        = &apos;D&apos;
        enqueue_mode  = &apos;E&apos;
        view_name     = &apos;V_VCLSTRUC&apos;
        enqueue_range = &apos;X&apos;
      TABLES
        sellist       = vcl_sellist.
    CALL FUNCTION &apos;VIEW_ENQUEUE&apos;
      EXPORTING
        action        = &apos;D&apos;
        enqueue_mode  = &apos;E&apos;
        view_name     = &apos;V_VCLSTDEP&apos;
        enqueue_range = &apos;X&apos;
      TABLES
        sellist       = vcl_sellist.
    CASE lv_subrc.
      WHEN 1.
        MESSAGE e049(sv) WITH sy-msgv1 INTO lv_error.
        RAISE EXCEPTION TYPE zcx_saplink
          EXPORTING
            textid = zcx_saplink=&gt;error_message
            msg    = lv_error.
      WHEN 2.
        MESSAGE e050(sv) WITH &apos;V_VCLMF&apos; INTO lv_error.
        RAISE EXCEPTION TYPE zcx_saplink
          EXPORTING
            textid = zcx_saplink=&gt;error_message
            msg    = lv_error.
    ENDCASE.
  ENDIF.


ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZSAPLINK" CMPNAME="GETOBJECTTYPE" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>METHOD getobjecttype.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   The code of this project is provided to you under the current     |
*|   version of the SAP Code Exchange Terms of Use. You can find the   |
*|   text on the SAP Code Exchange webpage at http://www.sdn.sap.com   |
*|                                                                     |
*|   SAPlink is provided to you AS IS with no guarantee, warranty or   |
*|   support.                                                          |
*\---------------------------------------------------------------------/

  &quot; Plugin created by:
  &quot; Nicolas Busson
  &quot; bussonnicolas@gmail.com

  objecttype = &apos;VCLS&apos;. &quot; View cluster

ENDMETHOD.</source>
  </method>
 </CLAS>
 <CLAS CLSNAME="ZSAPLINK_USER_PARAMETER" VERSION="1" LANGU="E" DESCRIPT="SAPlink - User parameter" CATEGORY="00" EXPOSURE="2" STATE="1" RELEASE="0" CLSFINAL="X" CLSCCINCL="X" FIXPT="X" UNICODE="X" CLSBCCAT="00" DURATION_TYPE="0 " RISK_LEVEL="0 " REFCLSNAME="ZSAPLINK">
  <localImplementation>*&quot;* use this source file for the definition and implementation of
*&quot;* local helper classes, interface definitions and type
*&quot;* declarations</localImplementation>
  <localTypes>*&quot;* use this source file for any type of declarations (class
*&quot;* definitions, interfaces or type declarations) you need for
*&quot;* components in the private section</localTypes>
  <localMacros>*&quot;* use this source file for any macro definitions you need
*&quot;* in the implementation part of the class</localMacros>
  <inheritance CLSNAME="ZSAPLINK_USER_PARAMETER" REFCLSNAME="ZSAPLINK" VERSION="1" STATE="1">
   <redefinition CLSNAME="ZSAPLINK_USER_PARAMETER" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="CHECKEXISTS" EXPOSURE="2"/>
   <redefinition CLSNAME="ZSAPLINK_USER_PARAMETER" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="CREATEIXMLDOCFROMOBJECT" EXPOSURE="2"/>
   <redefinition CLSNAME="ZSAPLINK_USER_PARAMETER" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="CREATEOBJECTFROMIXMLDOC" EXPOSURE="2"/>
   <redefinition CLSNAME="ZSAPLINK_USER_PARAMETER" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="DELETEOBJECT" EXPOSURE="1"/>
   <redefinition CLSNAME="ZSAPLINK_USER_PARAMETER" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="GETOBJECTTYPE" EXPOSURE="1"/>
  </inheritance>
  <method CLSNAME="ZSAPLINK" CMPNAME="CHECKEXISTS" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>METHOD checkexists.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   The code of this project is provided to you under the current     |
*|   version of the SAP Code Exchange Terms of Use. You can find the   |
*|   text on the SAP Code Exchange webpage at http://www.sdn.sap.com   |
*|                                                                     |
*|   SAPlink is provided to you AS IS with no guarantee, warranty or   |
*|   support.                                                          |
*\---------------------------------------------------------------------/

  &quot; Plugin created by:
  &quot; Nicolas Busson
  &quot; bussonnicolas@gmail.com

  DATA ls_para  TYPE tpara.

  SELECT SINGLE * FROM tpara INTO ls_para WHERE paramid = objname.
  IF sy-subrc = 0.
    exists = &apos;X&apos;.
  ENDIF.

ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZSAPLINK_USER_PARAMETER" CMPNAME="CHECK_AUTHORITY" VERSION="1" LANGU="E" DESCRIPT="Authorization check" EXPOSURE="0" STATE="1" EDITORDER="1 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" MTDNEWEXC="X" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZSAPLINK_USER_PARAMETER" CMPNAME="CHECK_AUTHORITY" SCONAME="IV_ACTVT" VERSION="1" LANGU="E" DESCRIPT="Version Number Component" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="CHAR1"/>
   <exception CLSNAME="ZSAPLINK_USER_PARAMETER" CMPNAME="CHECK_AUTHORITY" SCONAME="ZCX_SAPLINK" VERSION="1" LANGU="E" DESCRIPT="SAPlink exception class" MTDTYPE="0" EDITORDER="1 "/>
   <source>METHOD check_authority.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   The code of this project is provided to you under the current     |
*|   version of the SAP Code Exchange Terms of Use. You can find the   |
*|   text on the SAP Code Exchange webpage at http://www.sdn.sap.com   |
*|                                                                     |
*|   SAPlink is provided to you AS IS with no guarantee, warranty or   |
*|   support.                                                          |
*\---------------------------------------------------------------------/

  &quot; Plugin created by:
  &quot; Nicolas Busson
  &quot; bussonnicolas@gmail.com

  DATA lv_mode            TYPE char6.
  DATA lv_paramid         TYPE tpara-paramid.
  DATA lv_error           TYPE string.


  lv_paramid = objname.
  CASE iv_actvt.
    WHEN &apos;C&apos;. &quot; Create user parameter
      lv_mode = &apos;INSERT&apos;.

    WHEN &apos;D&apos;. &quot; Delete user parameter
      lv_mode = &apos;MODIFY&apos;.

    WHEN OTHERS.
      &quot; Not supported
      RAISE EXCEPTION TYPE zcx_saplink
        EXPORTING
          textid = zcx_saplink=&gt;system_error.
  ENDCASE.

  CALL FUNCTION &apos;RS_ACCESS_PERMISSION&apos;
    EXPORTING
      global_lock             = abap_true
      object                  = lv_paramid
      object_class            = &apos;PARA&apos;
      mode                    = lv_mode
      language_upd_exit       = &apos;RS_PARAMETER_LANGUAGE_EXIT&apos;
      suppress_language_check = space
    EXCEPTIONS
      canceled_in_corr        = 1
      OTHERS                  = 2.

  IF sy-subrc NE 0.
    MESSAGE ID sy-msgid TYPE &apos;E&apos; NUMBER sy-msgno
          WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4
          INTO lv_error.
    RAISE EXCEPTION TYPE zcx_saplink
      EXPORTING
        textid = zcx_saplink=&gt;error_message
        msg    = lv_error.
  ENDIF.


ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZSAPLINK" CMPNAME="CREATEIXMLDOCFROMOBJECT" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>METHOD createixmldocfromobject.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   The code of this project is provided to you under the current     |
*|   version of the SAP Code Exchange Terms of Use. You can find the   |
*|   text on the SAP Code Exchange webpage at http://www.sdn.sap.com   |
*|                                                                     |
*|   SAPlink is provided to you AS IS with no guarantee, warranty or   |
*|   support.                                                          |
*\---------------------------------------------------------------------/

  &quot; Plugin created by:
  &quot; Nicolas Busson
  &quot; bussonnicolas@gmail.com

  DATA ls_para                TYPE tpara.
  DATA lt_parat               TYPE TABLE OF tparat.
  DATA ls_parat               TYPE tparat.
  DATA lv_error               TYPE string.
  DATA rc                     TYPE sysubrc.                 &quot;#EC NEEDED

  DATA _objtype               TYPE string.
  DATA rootnode               TYPE REF TO if_ixml_element.
  DATA node                   TYPE REF TO if_ixml_element.



  &quot; Read user parameter properties
  SELECT SINGLE * FROM tpara INTO ls_para  WHERE paramid = objname.
  SELECT * FROM tparat INTO TABLE lt_parat WHERE paramid = objname.

  IF ls_para IS INITIAL.
    MESSAGE e061(eu) WITH objname INTO lv_error.
    RAISE EXCEPTION TYPE zcx_saplink
      EXPORTING
        textid = zcx_saplink=&gt;error_message
        msg    = lv_error.
  ENDIF.

  &quot; Create XML
  _objtype = getobjecttype( ).
  rootnode = xmldoc-&gt;create_element( _objtype ).
  setattributesfromstructure( node = rootnode structure = ls_para ).

  LOOP AT lt_parat INTO ls_parat.
    node = xmldoc-&gt;create_element( &apos;parat&apos; ).
    setattributesfromstructure( node = node structure = ls_parat ).
    rc = rootnode-&gt;append_child( node ).
  ENDLOOP.

  rc = xmldoc-&gt;append_child( rootnode ).
  ixmldocument = xmldoc.

ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZSAPLINK" CMPNAME="CREATEOBJECTFROMIXMLDOC" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>METHOD createobjectfromixmldoc.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   The code of this project is provided to you under the current     |
*|   version of the SAP Code Exchange Terms of Use. You can find the   |
*|   text on the SAP Code Exchange webpage at http://www.sdn.sap.com   |
*|                                                                     |
*|   SAPlink is provided to you AS IS with no guarantee, warranty or   |
*|   support.                                                          |
*\---------------------------------------------------------------------/

  &quot; Plugin created by:
  &quot; Nicolas Busson
  &quot; bussonnicolas@gmail.com

  DATA ls_para                TYPE tpara.
  DATA ls_parat               TYPE tparat.
  DATA lt_parat               TYPE TABLE OF tparat.
  DATA lv_error               TYPE string.

  DATA _objtype               TYPE string.
  DATA rootnode               TYPE REF TO if_ixml_element.
  DATA node                   TYPE REF TO if_ixml_element.
  DATA filter                 TYPE REF TO if_ixml_node_filter.
  DATA iterator               TYPE REF TO if_ixml_node_iterator.
  DATA checkexists            TYPE flag.


  _objtype = getobjecttype( ).
  xmldoc = ixmldocument.
  rootnode = xmldoc-&gt;find_from_name( _objtype ).
  CALL METHOD getstructurefromattributes
    EXPORTING
      node      = rootnode
    CHANGING
      structure = ls_para.
  objname = ls_para-paramid.

  checkexists = checkexists( ).
  IF checkexists IS NOT INITIAL.
    IF overwrite IS INITIAL.
      RAISE EXCEPTION TYPE zcx_saplink
        EXPORTING
          textid = zcx_saplink=&gt;existing.
    ELSE.
      deleteobject( ).
    ENDIF.
  ENDIF.

  filter = xmldoc-&gt;create_filter_name( &apos;parat&apos; ).
  iterator = xmldoc-&gt;create_iterator_filtered( filter ).
  node ?= iterator-&gt;get_next( ).
  WHILE node IS NOT INITIAL.
    CLEAR ls_parat.
    CALL METHOD getstructurefromattributes
      EXPORTING
        node      = node
      CHANGING
        structure = ls_parat.
    APPEND ls_parat TO lt_parat.
    node ?= iterator-&gt;get_next( ).
  ENDWHILE.

  &quot; Create user parameter
  check_authority( &apos;C&apos; ).
  CALL FUNCTION &apos;RS_CHARACTER_CHECK&apos;
    EXPORTING
      objectname = ls_para-paramid
    EXCEPTIONS
      OTHERS     = 5.
  IF sy-subrc NE 0.
    MESSAGE ID sy-msgid TYPE &apos;E&apos; NUMBER sy-msgno
          WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4
          INTO lv_error.
    RAISE EXCEPTION TYPE zcx_saplink
      EXPORTING
        textid = zcx_saplink=&gt;error_message
        msg    = lv_error.
  ENDIF.

  CALL FUNCTION &apos;RS_CORR_INSERT&apos;
    EXPORTING
      global_lock         = abap_true
      object              = ls_para-paramid
      object_class        = &apos;PARA&apos;
      mode                = &apos;I&apos;
      master_language     = sy-langu
    EXCEPTIONS
      cancelled           = 01
      permission_failure  = 02
      unknown_objectclass = 03.
  IF sy-subrc NE 0.
    MESSAGE ID sy-msgid TYPE &apos;E&apos; NUMBER sy-msgno
          WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4
          INTO lv_error.
    RAISE EXCEPTION TYPE zcx_saplink
      EXPORTING
        textid = zcx_saplink=&gt;error_message
        msg    = lv_error.
  ENDIF.

  INSERT tpara  FROM ls_para.
  INSERT tparat FROM TABLE lt_parat.

  CALL FUNCTION &apos;RS_TREE_OBJECT_PLACEMENT&apos;
    EXPORTING
      object    = ls_para-paramid
      operation = &apos;INSERT&apos;
      type      = &apos;CR&apos;.

  free( ).

  &quot; successful install
  name = objname.


ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZSAPLINK" CMPNAME="DELETEOBJECT" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>METHOD deleteobject.                                        &quot;#EC NEEDED
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   The code of this project is provided to you under the current     |
*|   version of the SAP Code Exchange Terms of Use. You can find the   |
*|   text on the SAP Code Exchange webpage at http://www.sdn.sap.com   |
*|                                                                     |
*|   SAPlink is provided to you AS IS with no guarantee, warranty or   |
*|   support.                                                          |
*\---------------------------------------------------------------------/

  &quot; Plugin created by:
  &quot; Nicolas Busson
  &quot; bussonnicolas@gmail.com

  DATA lv_error         TYPE string.
  DATA ls_para          TYPE tpara.


  check_authority( &apos;D&apos; ).

  SELECT SINGLE * FROM tpara INTO ls_para WHERE paramid = objname.
  IF sy-subrc NE 0.
    MESSAGE e061(eu) WITH objname INTO lv_error.
    RAISE EXCEPTION TYPE zcx_saplink
      EXPORTING
        textid = zcx_saplink=&gt;error_message
        msg    = lv_error.
  ENDIF.


  DELETE FROM tpara  WHERE paramid = objname.
  DELETE FROM tparat WHERE paramid = objname.
  CALL FUNCTION &apos;RS_TREE_OBJECT_PLACEMENT&apos;
    EXPORTING
      object    = ls_para-paramid
      operation = &apos;DELETE&apos;
      type      = &apos;CR&apos;.

  free( ).

ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZSAPLINK_USER_PARAMETER" CMPNAME="FREE" VERSION="1" LANGU="E" DESCRIPT="Remove permission lock" EXPOSURE="0" STATE="1" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>METHOD free.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   The code of this project is provided to you under the current     |
*|   version of the SAP Code Exchange Terms of Use. You can find the   |
*|   text on the SAP Code Exchange webpage at http://www.sdn.sap.com   |
*|                                                                     |
*|   SAPlink is provided to you AS IS with no guarantee, warranty or   |
*|   support.                                                          |
*\---------------------------------------------------------------------/

  &quot; Plugin created by:
  &quot; Nicolas Busson
  &quot; bussonnicolas@gmail.com

  CALL FUNCTION &apos;RS_ACCESS_PERMISSION&apos;
    EXPORTING
      mode         = &apos;FREE&apos;
      object       = objname
      object_class = &apos;PARA&apos;.

ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZSAPLINK" CMPNAME="GETOBJECTTYPE" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>METHOD getobjecttype.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   The code of this project is provided to you under the current     |
*|   version of the SAP Code Exchange Terms of Use. You can find the   |
*|   text on the SAP Code Exchange webpage at http://www.sdn.sap.com   |
*|                                                                     |
*|   SAPlink is provided to you AS IS with no guarantee, warranty or   |
*|   support.                                                          |
*\---------------------------------------------------------------------/

  &quot; Plugin created by:
  &quot; Nicolas Busson
  &quot; bussonnicolas@gmail.com

  objecttype = &apos;PARA&apos;. &quot; User parameter

ENDMETHOD.</source>
  </method>
 </CLAS>
 <CLAS CLSNAME="ZSAPLINK_CHECKPOINT_GROUP" VERSION="1" LANGU="E" DESCRIPT="SAPlink - Checkpoint group" CATEGORY="00" EXPOSURE="2" STATE="1" RELEASE="0" CLSFINAL="X" CLSCCINCL="X" FIXPT="X" UNICODE="X" CLSBCCAT="00" DURATION_TYPE="0 " RISK_LEVEL="0 " REFCLSNAME="ZSAPLINK">
  <localImplementation>*&quot;* use this source file for the definition and implementation of
*&quot;* local helper classes, interface definitions and type
*&quot;* declarations</localImplementation>
  <localTypes>*&quot;* use this source file for any type of declarations (class
*&quot;* definitions, interfaces or type declarations) you need for
*&quot;* components in the private section</localTypes>
  <localMacros>*&quot;* use this source file for any macro definitions you need
*&quot;* in the implementation part of the class</localMacros>
  <inheritance CLSNAME="ZSAPLINK_CHECKPOINT_GROUP" REFCLSNAME="ZSAPLINK" VERSION="1" STATE="1">
   <redefinition CLSNAME="ZSAPLINK_CHECKPOINT_GROUP" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="CHECKEXISTS" EXPOSURE="2"/>
   <redefinition CLSNAME="ZSAPLINK_CHECKPOINT_GROUP" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="CREATEIXMLDOCFROMOBJECT" EXPOSURE="2"/>
   <redefinition CLSNAME="ZSAPLINK_CHECKPOINT_GROUP" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="CREATEOBJECTFROMIXMLDOC" EXPOSURE="2"/>
   <redefinition CLSNAME="ZSAPLINK_CHECKPOINT_GROUP" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="DELETEOBJECT" EXPOSURE="1"/>
   <redefinition CLSNAME="ZSAPLINK_CHECKPOINT_GROUP" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="GETOBJECTTYPE" EXPOSURE="1"/>
  </inheritance>
  <method CLSNAME="ZSAPLINK" CMPNAME="CHECKEXISTS" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>METHOD checkexists.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   The code of this project is provided to you under the current     |
*|   version of the SAP Code Exchange Terms of Use. You can find the   |
*|   text on the SAP Code Exchange webpage at http://www.sdn.sap.com   |
*|                                                                     |
*|   SAPlink is provided to you AS IS with no guarantee, warranty or   |
*|   support.                                                          |
*\---------------------------------------------------------------------/

  &quot; Plugin created by:
  &quot; Nicolas Busson
  &quot; bussonnicolas@gmail.com

  DATA lr_acid                 TYPE REF TO cl_aab_id.
  DATA lv_state                TYPE flag.


  lr_acid = get_ref( ).
  CALL METHOD lr_acid-&gt;get_state
    IMPORTING
      ex_state = lv_state.

  IF NOT lv_state IS INITIAL.
    exists = &apos;X&apos;.
  ENDIF.

ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZSAPLINK_CHECKPOINT_GROUP" CMPNAME="CHECK_AUTHORITY" VERSION="1" LANGU="E" DESCRIPT="Authorization check" EXPOSURE="0" STATE="1" EDITORDER="1 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" MTDNEWEXC="X" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZSAPLINK_CHECKPOINT_GROUP" CMPNAME="CHECK_AUTHORITY" SCONAME="IV_ACTVT" VERSION="1" LANGU="E" DESCRIPT="Version Number Component" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="CHAR1"/>
   <exception CLSNAME="ZSAPLINK_CHECKPOINT_GROUP" CMPNAME="CHECK_AUTHORITY" SCONAME="ZCX_SAPLINK" VERSION="1" LANGU="E" DESCRIPT="SAPlink exception class" MTDTYPE="0" EDITORDER="1 "/>
   <source>METHOD check_authority.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   The code of this project is provided to you under the current     |
*|   version of the SAP Code Exchange Terms of Use. You can find the   |
*|   text on the SAP Code Exchange webpage at http://www.sdn.sap.com   |
*|                                                                     |
*|   SAPlink is provided to you AS IS with no guarantee, warranty or   |
*|   support.                                                          |
*\---------------------------------------------------------------------/

  &quot; Plugin created by:
  &quot; Nicolas Busson
  &quot; bussonnicolas@gmail.com

  DATA lr_acid                 TYPE REF TO cl_aab_id.


  CASE iv_actvt.
    WHEN &apos;C&apos;. &quot; Create checkpoint group
      IF cl_aab_id=&gt;check_acid_authority( actvt = &apos;01&apos; ) EQ abap_false.
        RAISE EXCEPTION TYPE zcx_saplink
          EXPORTING
            textid = zcx_saplink=&gt;not_authorized.
      ENDIF.

    WHEN &apos;D&apos;. &quot; Delete checkpoint group
      lr_acid = get_ref( ).
      IF lr_acid-&gt;check_authority( actvt = &apos;06&apos; ) NE abap_true.
        RAISE EXCEPTION TYPE zcx_saplink
          EXPORTING
            textid = zcx_saplink=&gt;not_authorized.
      ENDIF.

    WHEN OTHERS.
      &quot; Not supported
      RAISE EXCEPTION TYPE zcx_saplink
        EXPORTING
          textid = zcx_saplink=&gt;system_error.
  ENDCASE.

ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZSAPLINK_CHECKPOINT_GROUP" CMPNAME="CREATE" VERSION="1" LANGU="E" DESCRIPT="Create checkpoint group" EXPOSURE="0" STATE="1" EDITORDER="2 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" MTDNEWEXC="X" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZSAPLINK_CHECKPOINT_GROUP" CMPNAME="CREATE" SCONAME="IS_PROP" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="AAB_ID_PROPT"/>
   <exception CLSNAME="ZSAPLINK_CHECKPOINT_GROUP" CMPNAME="CREATE" SCONAME="ZCX_SAPLINK" VERSION="1" LANGU="E" DESCRIPT="SAPlink exception class" MTDTYPE="0" EDITORDER="1 "/>
   <source>METHOD create.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   The code of this project is provided to you under the current     |
*|   version of the SAP Code Exchange Terms of Use. You can find the   |
*|   text on the SAP Code Exchange webpage at http://www.sdn.sap.com   |
*|                                                                     |
*|   SAPlink is provided to you AS IS with no guarantee, warranty or   |
*|   support.                                                          |
*\---------------------------------------------------------------------/

  &quot; Plugin created by:
  &quot; Nicolas Busson
  &quot; bussonnicolas@gmail.com

  DATA lr_acid                 TYPE REF TO cl_aab_id.
  DATA lv_error                TYPE string.


  lr_acid = get_ref( ).
  CALL METHOD lr_acid-&gt;set_descript
    EXPORTING
      im_descript      = is_prop-descript
    EXCEPTIONS
      no_authorization = 1
      OTHERS           = 2.
  IF sy-subrc &lt;&gt; 0.
    MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
          WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4
          INTO lv_error.
    RAISE EXCEPTION TYPE zcx_saplink
      EXPORTING
        textid = zcx_saplink=&gt;error_message
        msg    = lv_error.
  ENDIF.

  CALL METHOD lr_acid-&gt;save
    EXCEPTIONS
      no_descript_specified = 1
      no_changes_found      = 2
      prop_error            = 3
      propt_error           = 4
      act_error             = 5
      cts_error             = 6
      sync_attributes_error = 7
      OTHERS                = 8.
  IF sy-subrc &lt;&gt; 0.
    MESSAGE s011(saab) INTO lv_error.
    RAISE EXCEPTION TYPE zcx_saplink
      EXPORTING
        textid = zcx_saplink=&gt;error_message
        msg    = lv_error.
  ENDIF.

ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZSAPLINK" CMPNAME="CREATEIXMLDOCFROMOBJECT" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>METHOD createixmldocfromobject.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   The code of this project is provided to you under the current     |
*|   version of the SAP Code Exchange Terms of Use. You can find the   |
*|   text on the SAP Code Exchange webpage at http://www.sdn.sap.com   |
*|                                                                     |
*|   SAPlink is provided to you AS IS with no guarantee, warranty or   |
*|   support.                                                          |
*\---------------------------------------------------------------------/

  &quot; Plugin created by:
  &quot; Nicolas Busson
  &quot; bussonnicolas@gmail.com

  DATA ls_prop                TYPE aab_id_propt.
  DATA lv_string              TYPE string.
  DATA rc                     TYPE sysubrc.                 &quot;#EC NEEDED

  DATA _objtype               TYPE string.
  DATA rootnode               TYPE REF TO if_ixml_element.



  &quot; Read checkpoint group properties
  SELECT SINGLE * FROM aab_id_propt INTO ls_prop WHERE name EQ objname AND langu = sy-langu.
  IF sy-subrc &lt;&gt; 0.
    SELECT SINGLE * FROM aab_id_propt INTO ls_prop WHERE name EQ objname. &quot;#EC WARNOK
  ENDIF.

  IF ls_prop-descript IS INITIAL.
    RAISE EXCEPTION TYPE zcx_saplink
      EXPORTING
        textid = zcx_saplink=&gt;system_error.
  ENDIF.


  &quot; Create XML
  _objtype = getobjecttype( ).
  rootnode = xmldoc-&gt;create_element( _objtype ).

  &quot; Checkpoint name is not the first component of structure
  &quot; ls_prop so we need to add it &apos;manually&apos; in first position
  &quot; otherwise SAPLINK won&apos;t be able to fill-in
  &quot; variable &apos;objname&apos; correctly
  lv_string = ls_prop-name.
  rootnode-&gt;set_attribute( name = &apos;NAME&apos;     value = lv_string ).
  lv_string = ls_prop-langu.
  rootnode-&gt;set_attribute( name = &apos;LANGU&apos;    value = lv_string ).
  lv_string = ls_prop-descript.
  rootnode-&gt;set_attribute( name = &apos;DESCRIPT&apos; value = lv_string ).

  rc = xmldoc-&gt;append_child( rootnode ).
  ixmldocument = xmldoc.

ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZSAPLINK" CMPNAME="CREATEOBJECTFROMIXMLDOC" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>METHOD createobjectfromixmldoc.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   The code of this project is provided to you under the current     |
*|   version of the SAP Code Exchange Terms of Use. You can find the   |
*|   text on the SAP Code Exchange webpage at http://www.sdn.sap.com   |
*|                                                                     |
*|   SAPlink is provided to you AS IS with no guarantee, warranty or   |
*|   support.                                                          |
*\---------------------------------------------------------------------/

  &quot; Plugin created by:
  &quot; Nicolas Busson
  &quot; bussonnicolas@gmail.com

  DATA ls_prop                TYPE aab_id_propt.
  DATA _objtype               TYPE string.
  DATA rootnode               TYPE REF TO if_ixml_element.
  DATA checkexists            TYPE flag.



  _objtype = getobjecttype( ).
  xmldoc = ixmldocument.
  rootnode = xmldoc-&gt;find_from_name( _objtype ).
  CALL METHOD getstructurefromattributes
    EXPORTING
      node      = rootnode
    CHANGING
      structure = ls_prop.
  objname = ls_prop-name.

  checkexists = checkexists( ).
  IF checkexists IS NOT INITIAL.
    IF overwrite IS INITIAL.
      RAISE EXCEPTION TYPE zcx_saplink
        EXPORTING
          textid = zcx_saplink=&gt;existing.
    ELSE.
      &quot; Removed to avoid errors in case the checkkpoint
      &quot; group is still in use... Description will
      &quot; be updated anyway, deletion is therefore not mandatory

      &quot; deleteobject( ).
    ENDIF.
  ENDIF.



  &quot; Create checkpoint group
  check_authority( &apos;C&apos; ).
  enqueue( ).
  create( ls_prop ).
  dequeue( ).

  &quot; successful install
  name = objname.


ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZSAPLINK" CMPNAME="DELETEOBJECT" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>METHOD deleteobject.                                        &quot;#EC NEEDED
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   The code of this project is provided to you under the current     |
*|   version of the SAP Code Exchange Terms of Use. You can find the   |
*|   text on the SAP Code Exchange webpage at http://www.sdn.sap.com   |
*|                                                                     |
*|   SAPlink is provided to you AS IS with no guarantee, warranty or   |
*|   support.                                                          |
*\---------------------------------------------------------------------/

  &quot; Plugin created by:
  &quot; Nicolas Busson
  &quot; bussonnicolas@gmail.com

  DATA lr_acid          TYPE REF TO cl_aab_id.
  DATA lv_subrc         TYPE sysubrc.
  DATA lv_error         TYPE string.


  check_authority( &apos;D&apos; ).
  enqueue( ).

  lr_acid = get_ref( ).
  lr_acid-&gt;delete( EXCEPTIONS prop_error       = 1
                              propt_error      = 2
                              act_error        = 3
                              cts_error        = 4
                              cts_devclass     = 5
                              id_not_found     = 6
                              no_authorization = 7
                              OTHERS           = 8 ).
  IF sy-subrc &lt;&gt; 0.
    MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
          WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4
          INTO lv_error.
    dequeue( ).
    RAISE EXCEPTION TYPE zcx_saplink
      EXPORTING
        textid = zcx_saplink=&gt;error_message
        msg    = lv_error.
  ENDIF.
  dequeue( ).


ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZSAPLINK_CHECKPOINT_GROUP" CMPNAME="DEQUEUE" VERSION="1" LANGU="E" DESCRIPT="Enqueue" EXPOSURE="0" STATE="1" EDITORDER="3 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" MTDNEWEXC="X" BCMTDCAT="00" BCMTDSYN="0">
   <source>METHOD dequeue.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   The code of this project is provided to you under the current     |
*|   version of the SAP Code Exchange Terms of Use. You can find the   |
*|   text on the SAP Code Exchange webpage at http://www.sdn.sap.com   |
*|                                                                     |
*|   SAPlink is provided to you AS IS with no guarantee, warranty or   |
*|   support.                                                          |
*\---------------------------------------------------------------------/

  &quot; Plugin created by:
  &quot; Nicolas Busson
  &quot; bussonnicolas@gmail.com

  DATA lr_acid TYPE REF TO cl_aab_id.

  lr_acid = get_ref( ).
  lr_acid-&gt;dequeue( ).


ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZSAPLINK_CHECKPOINT_GROUP" CMPNAME="ENQUEUE" VERSION="1" LANGU="E" DESCRIPT="Enqueue" EXPOSURE="0" STATE="1" EDITORDER="4 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" MTDNEWEXC="X" BCMTDCAT="00" BCMTDSYN="0">
   <exception CLSNAME="ZSAPLINK_CHECKPOINT_GROUP" CMPNAME="ENQUEUE" SCONAME="ZCX_SAPLINK" VERSION="1" LANGU="E" DESCRIPT="SAPlink exception class" MTDTYPE="0" EDITORDER="1 "/>
   <source>METHOD enqueue.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   The code of this project is provided to you under the current     |
*|   version of the SAP Code Exchange Terms of Use. You can find the   |
*|   text on the SAP Code Exchange webpage at http://www.sdn.sap.com   |
*|                                                                     |
*|   SAPlink is provided to you AS IS with no guarantee, warranty or   |
*|   support.                                                          |
*\---------------------------------------------------------------------/

  &quot; Plugin created by:
  &quot; Nicolas Busson
  &quot; bussonnicolas@gmail.com

  DATA lr_acid TYPE REF TO cl_aab_id.


  lr_acid = get_ref( ).
  CALL METHOD lr_acid-&gt;enqueue
    EXCEPTIONS
      foreign_lock = 1
      system_error = 2
      cts_error    = 3
      OTHERS       = 4.
  IF sy-subrc &lt;&gt; 0.
    RAISE EXCEPTION TYPE zcx_saplink
      EXPORTING
        textid = zcx_saplink=&gt;locked.
  ENDIF.


ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZSAPLINK" CMPNAME="GETOBJECTTYPE" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>METHOD GETOBJECTTYPE.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   The code of this project is provided to you under the current     |
*|   version of the SAP Code Exchange Terms of Use. You can find the   |
*|   text on the SAP Code Exchange webpage at http://www.sdn.sap.com   |
*|                                                                     |
*|   SAPlink is provided to you AS IS with no guarantee, warranty or   |
*|   support.                                                          |
*\---------------------------------------------------------------------/

  &quot; Plugin created by:
  &quot; Nicolas Busson
  &quot; bussonnicolas@gmail.com

  objecttype = &apos;ACID&apos;. &quot; Checkpoint group

ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZSAPLINK_CHECKPOINT_GROUP" CMPNAME="GET_REF" VERSION="1" LANGU="E" DESCRIPT="Get acid object reference" EXPOSURE="0" STATE="1" EDITORDER="5 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZSAPLINK_CHECKPOINT_GROUP" CMPNAME="GET_REF" SCONAME="RR_ACID" VERSION="1" LANGU="E" DESCRIPT="Activation ID" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="3" TYPE="CL_AAB_ID"/>
   <source>METHOD get_ref.
*/---------------------------------------------------------------------\
*|   This file is part of SAPlink.                                     |
*|                                                                     |
*|   The code of this project is provided to you under the current     |
*|   version of the SAP Code Exchange Terms of Use. You can find the   |
*|   text on the SAP Code Exchange webpage at http://www.sdn.sap.com   |
*|                                                                     |
*|   SAPlink is provided to you AS IS with no guarantee, warranty or   |
*|   support.                                                          |
*\---------------------------------------------------------------------/

  &quot; Plugin created by:
  &quot; Nicolas Busson
  &quot; bussonnicolas@gmail.com

  DATA lv_name TYPE aab_id_name.

  lv_name = objname.
  CREATE OBJECT rr_acid
    EXPORTING
      im_name          = lv_name
    EXCEPTIONS
      name_not_allowed = 1
      OTHERS           = 2.
  IF sy-subrc &lt;&gt; 0.                                         &quot;#EC NEEDED
    &quot; Should never happen!
  ENDIF.

ENDMETHOD.</source>
  </method>
 </CLAS>
 <CLAS CLSNAME="ZSAPLINK_TRANSFORMATION" VERSION="1" LANGU="E" DESCRIPT="SAPlink - XSLT Plugin" CATEGORY="00" EXPOSURE="2" STATE="1" RELEASE="0" CLSCCINCL="X" FIXPT="X" UNICODE="X" CLSBCCAT="00" DURATION_TYPE="0 " RISK_LEVEL="0 " ZSAPLINK_PLUGIN_MAJOR_VERSION="0 " ZSAPLINK_PLUGIN_MINOR_VERSION="1 " ZSAPLINK_PLUGIN_BUILD_VERSION="0 " ZSAPLINK_PLUGIN_INFO1="ZSAPLINK_CLASS is part of the main ZSAPLINK project --&gt; This plugin found there instead of ZSAPLINK_PLUGINS projects" ZSAPLINK_PLUGIN_INFO2="SAPLINK homepage: https://www.assembla.com/spaces/saplink/wiki" ZSAPLINK_PLUGIN_INFO3="Download from https://www.assembla.com/code/saplink/subversion/nodes" ZSAPLINK_PLUGIN_INFO4="and navigate to:  trunk -&gt; core -&gt; ZSAPLINK -&gt; CLAS -&gt; ZSAPLINK_CLASS.slnk" REFCLSNAME="ZSAPLINK">
  <localImplementation>*&quot;* local class implementation for public class
*&quot;* use this source file for the implementation part of
*&quot;* local helper classes</localImplementation>
  <localTypes>*&quot;* use this source file for any type declarations (class
*&quot;* definitions, interfaces or data types) you need for method
*&quot;* implementation or private method&apos;s signature</localTypes>
  <localMacros>*&quot;* use this source file for any macro definitions you need
*&quot;* in the implementation part of the class</localMacros>
  <attribute CLSNAME="ZSAPLINK_TRANSFORMATION" CMPNAME="C_OBJECT_TYPE" VERSION="1" LANGU="E" DESCRIPT="XSLT Object Type" EXPOSURE="1" STATE="1" EDITORDER="0 " ATTDECLTYP="2" ATTVALUE="&apos;XSLT&apos;" ATTEXPVIRT="0" TYPTYPE="1" TYPE="STRING" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZSAPLINK_TRANSFORMATION" CMPNAME="C_TAG_SOURCE" VERSION="1" LANGU="E" DESCRIPT="XML Tag for Source" EXPOSURE="1" STATE="1" EDITORDER="3 " ATTDECLTYP="2" ATTVALUE="&apos;source&apos;" ATTEXPVIRT="0" TYPTYPE="1" TYPE="STRING" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZSAPLINK_TRANSFORMATION" CMPNAME="XSLT_NAME" VERSION="1" LANGU="E" DESCRIPT="XSLT Name" EXPOSURE="1" STATE="1" EDITORDER="1 " ATTDECLTYP="0" ATTEXPVIRT="0" TYPTYPE="1" TYPE="CXSLTDESC" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <inheritance CLSNAME="ZSAPLINK_TRANSFORMATION" REFCLSNAME="ZSAPLINK" VERSION="1" STATE="1">
   <redefinition CLSNAME="ZSAPLINK_TRANSFORMATION" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="CHECKEXISTS" EXPOSURE="0"/>
   <redefinition CLSNAME="ZSAPLINK_TRANSFORMATION" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="CREATEIXMLDOCFROMOBJECT" EXPOSURE="0"/>
   <redefinition CLSNAME="ZSAPLINK_TRANSFORMATION" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="CREATEOBJECTFROMIXMLDOC" EXPOSURE="0"/>
   <redefinition CLSNAME="ZSAPLINK_TRANSFORMATION" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="DELETEOBJECT" EXPOSURE="0"/>
   <redefinition CLSNAME="ZSAPLINK_TRANSFORMATION" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="GETOBJECTTYPE" EXPOSURE="0"/>
  </inheritance>
  <method CLSNAME="ZSAPLINK" CMPNAME="CHECKEXISTS" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>*/---------------------------------------------------------------------\
*| This file is part of SAPlink.                                       |
*|                                                                     |
*|Copyright 2006-2015 by Nicola Fankhauser(nicola.fankhauser@variant.ch)
*|                                                                     |
*| Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);     |
*| you may not use this file except in compliance with the License.    |
*| You may obtain a copy of the License at                             |
*|                                                                     |
*|     http://www.apache.org/licenses/LICENSE-2.0                      |
*|                                                                     |
*| Unless required by applicable law or agreed to in writing, software |
*| distributed under the License is distributed on an &quot;AS IS&quot; BASIS,   |
*| WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or     |
*| implied.                                                            |
*| See the License for the specific language governing permissions and |
*| limitations under the License.                                      |
*\---------------------------------------------------------------------/
METHOD checkexists .

  CONSTANTS:
    lc_exists TYPE char1 VALUE &apos;1&apos;.

  set_xslt_name( ).

  IF cl_o2_api_xsltdesc=&gt;exists( xslt_name ) EQ lc_exists.
    exists = abap_true.
  ENDIF.

ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZSAPLINK" CMPNAME="CREATEIXMLDOCFROMOBJECT" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>*/---------------------------------------------------------------------\
*| This file is part of SAPlink.                                       |
*|                                                                     |
*|Copyright 2006-2015 by Nicola Fankhauser(nicola.fankhauser@variant.ch)
*|                                                                     |
*| Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);     |
*| you may not use this file except in compliance with the License.    |
*| You may obtain a copy of the License at                             |
*|                                                                     |
*|     http://www.apache.org/licenses/LICENSE-2.0                      |
*|                                                                     |
*| Unless required by applicable law or agreed to in writing, software |
*| distributed under the License is distributed on an &quot;AS IS&quot; BASIS,   |
*| WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or     |
*| implied.                                                            |
*| See the License for the specific language governing permissions and |
*| limitations under the License.                                      |
*\---------------------------------------------------------------------/
METHOD createixmldocfromobject .

  DATA:
    lo_xslt TYPE REF TO cl_o2_api_xsltdesc,
    ls_attributes TYPE o2xsltattr,
    lo_rootnode TYPE REF TO if_ixml_element,
    lt_xslt_source TYPE o2pageline_table,
    lo_node TYPE REF TO if_ixml_element,
    l_source TYPE string.

* set internal object name
  set_xslt_name( ).

* load XSLT transformation
  lo_xslt = get_xslt( xslt_name ).

* create parent node with attributes
  lo_rootnode = xmldoc-&gt;create_element( c_object_type ).

* 1. get attributes
  ls_attributes = lo_xslt-&gt;get_attributes( ).
  setattributesfromstructure( node = lo_rootnode structure = ls_attributes ).

* 2. get XSLT source
  lt_xslt_source = lo_xslt-&gt;get_source( ).

  l_source = zsaplink_transformation=&gt;buildsourcestring( pagetable = lt_xslt_source ).
  lo_node = xmldoc-&gt;create_element( c_tag_source ).
  lo_node-&gt;set_value( l_source ).
  lo_rootnode-&gt;append_child( lo_node ).

  xmldoc-&gt;append_child( lo_rootnode ).

  ixmldocument = xmldoc.

ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZSAPLINK" CMPNAME="CREATEOBJECTFROMIXMLDOC" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>*/---------------------------------------------------------------------\
*| This file is part of SAPlink.                                       |
*|                                                                     |
*|Copyright 2006-2015 by Nicola Fankhauser(nicola.fankhauser@variant.ch)
*|                                                                     |
*| Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);     |
*| you may not use this file except in compliance with the License.    |
*| You may obtain a copy of the License at                             |
*|                                                                     |
*|     http://www.apache.org/licenses/LICENSE-2.0                      |
*|                                                                     |
*| Unless required by applicable law or agreed to in writing, software |
*| distributed under the License is distributed on an &quot;AS IS&quot; BASIS,   |
*| WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or     |
*| implied.                                                            |
*| See the License for the specific language governing permissions and |
*| limitations under the License.                                      |
*\---------------------------------------------------------------------/
METHOD createobjectfromixmldoc .

  DATA:
    lo_rootnode TYPE REF TO if_ixml_element,
    lo_node TYPE REF TO if_ixml_element,
    lo_filter TYPE REF TO if_ixml_node_filter,
    lo_iterator TYPE REF TO if_ixml_node_iterator,
    lo_xslt TYPE REF TO cl_o2_api_xsltdesc,
    ls_attributes TYPE o2xsltattr,
    lt_xslt_source TYPE o2pageline_table,
    ls_xslt_source LIKE LINE OF lt_xslt_source,
    l_source TYPE string,
    lt_source TYPE table_of_strings.

* try to find a XSLT transformation in the XML tree
  xmldoc = ixmldocument.
  lo_rootnode = xmldoc-&gt;find_from_name( c_object_type ).

* 1. get attributes
  getstructurefromattributes( EXPORTING node = lo_rootnode CHANGING structure = ls_attributes ).

* set XSLT transformation name
  objname = ls_attributes-xsltdesc.
  set_xslt_name( ).

* check whether object already exists and if overwriting
* is allowed
  IF checkexists( ) IS NOT INITIAL.
    IF overwrite IS INITIAL.
      RAISE EXCEPTION TYPE zcx_saplink
        EXPORTING textid = zcx_saplink=&gt;existing.
    ELSE.
*     delete object for new install
      deleteobject( ).
    ENDIF.
  ENDIF.

* 2. get XSLT source
  CLEAR: lo_filter, lo_iterator, lo_node.
  lo_filter = xmldoc-&gt;create_filter_name( c_tag_source ).
  lo_iterator = xmldoc-&gt;create_iterator_filtered( lo_filter ).
  lo_node ?= lo_iterator-&gt;get_next( ).

  IF lo_node IS NOT INITIAL.
    l_source = lo_node-&gt;get_value( ).
    lt_source = zsaplink_transformation=&gt;buildtablefromstring( source = l_source ).

    LOOP AT lt_source INTO l_source.
      CLEAR ls_xslt_source.
      ls_xslt_source-line = l_source.
      APPEND ls_xslt_source TO lt_xslt_source.
    ENDLOOP.
  ENDIF.

* create new XSLT transformation
  cl_o2_api_xsltdesc=&gt;create_new(
    EXPORTING
      p_source                     = lt_xslt_source
      p_attr                       = ls_attributes
    IMPORTING
      p_obj                        = lo_xslt
    EXCEPTIONS
      object_already_existing      = 1
      not_authorized               = 2
      undefined_name               = 3
      OTHERS                       = 4 ).

  IF sy-subrc NE 0.
    CASE sy-subrc.

*     object must not be existing already at this stage
      WHEN 1.
        RAISE EXCEPTION TYPE zcx_saplink
          EXPORTING textid = zcx_saplink=&gt;existing.

      WHEN 2.
        RAISE EXCEPTION TYPE zcx_saplink
          EXPORTING textid = zcx_saplink=&gt;not_authorized.
      WHEN 3.
        RAISE EXCEPTION TYPE zcx_saplink
          EXPORTING textid = zcx_saplink=&gt;not_found.
      WHEN OTHERS.
        RAISE EXCEPTION TYPE zcx_saplink
          EXPORTING textid = zcx_saplink=&gt;system_error.
    ENDCASE.
  ENDIF.

* check for valid object reference
  IF lo_xslt IS NOT BOUND.

    RAISE EXCEPTION TYPE zcx_saplink
      EXPORTING textid = zcx_saplink=&gt;system_error.

  ENDIF.

* save XSLT transformation
  save_xslt( lo_xslt ).

* reset
  set_xslt_changeable( i_changeable = abap_false io_xslt = lo_xslt ).

  name = objname.

ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZSAPLINK" CMPNAME="DELETEOBJECT" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>*/---------------------------------------------------------------------\
*| This file is part of SAPlink.                                       |
*|                                                                     |
*|Copyright 2006-2015 by Nicola Fankhauser(nicola.fankhauser@variant.ch)
*|                                                                     |
*| Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);     |
*| you may not use this file except in compliance with the License.    |
*| You may obtain a copy of the License at                             |
*|                                                                     |
*|     http://www.apache.org/licenses/LICENSE-2.0                      |
*|                                                                     |
*| Unless required by applicable law or agreed to in writing, software |
*| distributed under the License is distributed on an &quot;AS IS&quot; BASIS,   |
*| WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or     |
*| implied.                                                            |
*| See the License for the specific language governing permissions and |
*| limitations under the License.                                      |
*\---------------------------------------------------------------------/
METHOD deleteobject .

  DATA:
    lo_xslt TYPE REF TO cl_o2_api_xsltdesc.

* set internal object name
  set_xslt_name( ).

* load XSLT transformation
  lo_xslt = get_xslt( xslt_name ).

* set changeable
  set_xslt_changeable( i_changeable = abap_true io_xslt = lo_xslt ).

* delete XSLT transformation
  lo_xslt-&gt;delete(
    EXCEPTIONS
      object_invalid        = 1
      object_not_changeable = 2
      OTHERS                = 3 ).

  IF sy-subrc &lt;&gt; 0.
    CASE sy-subrc.
      WHEN 1.
        RAISE EXCEPTION TYPE zcx_saplink
          EXPORTING textid = zcx_saplink=&gt;not_found.
      WHEN 2.
        RAISE EXCEPTION TYPE zcx_saplink
          EXPORTING textid = zcx_saplink=&gt;locked.
      WHEN OTHERS.
        RAISE EXCEPTION TYPE zcx_saplink
          EXPORTING textid = zcx_saplink=&gt;system_error.
    ENDCASE.
  ENDIF.

* only this call really deletes the XSLT
  save_xslt( lo_xslt ).

ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZSAPLINK" CMPNAME="GETOBJECTTYPE" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>*/---------------------------------------------------------------------\
*| This file is part of SAPlink.                                       |
*|                                                                     |
*|Copyright 2006-2015 by Nicola Fankhauser(nicola.fankhauser@variant.ch)
*|                                                                     |
*| Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);     |
*| you may not use this file except in compliance with the License.    |
*| You may obtain a copy of the License at                             |
*|                                                                     |
*|     http://www.apache.org/licenses/LICENSE-2.0                      |
*|                                                                     |
*| Unless required by applicable law or agreed to in writing, software |
*| distributed under the License is distributed on an &quot;AS IS&quot; BASIS,   |
*| WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or     |
*| implied.                                                            |
*| See the License for the specific language governing permissions and |
*| limitations under the License.                                      |
*\---------------------------------------------------------------------/
METHOD getobjecttype .

  objecttype = c_object_type. &quot; XSLT transformation

ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZSAPLINK_TRANSFORMATION" CMPNAME="GET_XSLT" VERSION="1" LANGU="E" DESCRIPT="Returns the requested XXSLT Transformation object" EXPOSURE="1" STATE="1" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" MTDNEWEXC="X" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZSAPLINK_TRANSFORMATION" CMPNAME="GET_XSLT" SCONAME="I_XSLT_NAME" VERSION="1" LANGU="E" DESCRIPT="XSLT Name" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="CSEQUENCE" PAROPTIONL="X"/>
   <parameter CLSNAME="ZSAPLINK_TRANSFORMATION" CMPNAME="GET_XSLT" SCONAME="RO_XSLT" VERSION="1" LANGU="E" DESCRIPT="XSLT Transformation" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="3" TYPE="CL_O2_API_XSLTDESC"/>
   <exception CLSNAME="ZSAPLINK_TRANSFORMATION" CMPNAME="GET_XSLT" SCONAME="ZCX_SAPLINK" VERSION="1" LANGU="E" DESCRIPT="SAPlink exception class" MTDTYPE="0" EDITORDER="1 "/>
   <source>*/---------------------------------------------------------------------\
*| This file is part of SAPlink.                                       |
*|                                                                     |
*|Copyright 2006-2015 by Nicola Fankhauser(nicola.fankhauser@variant.ch)
*|                                                                     |
*| Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);     |
*| you may not use this file except in compliance with the License.    |
*| You may obtain a copy of the License at                             |
*|                                                                     |
*|     http://www.apache.org/licenses/LICENSE-2.0                      |
*|                                                                     |
*| Unless required by applicable law or agreed to in writing, software |
*| distributed under the License is distributed on an &quot;AS IS&quot; BASIS,   |
*| WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or     |
*| implied.                                                            |
*| See the License for the specific language governing permissions and |
*| limitations under the License.                                      |
*\---------------------------------------------------------------------/
METHOD get_xslt .

* load XSLT transformation
  cl_o2_api_xsltdesc=&gt;load(
    EXPORTING
      p_xslt_desc                  = i_xslt_name
    IMPORTING
      p_obj                        = ro_xslt
    EXCEPTIONS
      not_existing                 = 1
      permission_failure           = 2
      OTHERS                       = 5 ).

  IF sy-subrc &lt;&gt; 0.
    CASE sy-subrc.
      WHEN 1.
        RAISE EXCEPTION TYPE zcx_saplink
          EXPORTING textid = zcx_saplink=&gt;not_found.
      WHEN 2.
        RAISE EXCEPTION TYPE zcx_saplink
          EXPORTING textid = zcx_saplink=&gt;not_authorized.
      WHEN OTHERS.
        RAISE EXCEPTION TYPE zcx_saplink
          EXPORTING textid = zcx_saplink=&gt;system_error.
    ENDCASE.
  ENDIF.
ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZSAPLINK_TRANSFORMATION" CMPNAME="SAVE_XSLT" VERSION="1" LANGU="E" DESCRIPT="Saves the XSLT Transformation" EXPOSURE="1" STATE="1" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" MTDNEWEXC="X" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZSAPLINK_TRANSFORMATION" CMPNAME="SAVE_XSLT" SCONAME="IO_XSLT" VERSION="1" LANGU="E" DESCRIPT="XSLT Transformation" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="3" TYPE="CL_O2_API_XSLTDESC"/>
   <exception CLSNAME="ZSAPLINK_TRANSFORMATION" CMPNAME="SAVE_XSLT" SCONAME="ZCX_SAPLINK" VERSION="1" LANGU="E" DESCRIPT="SAPlink exception class" MTDTYPE="0" EDITORDER="1 "/>
   <source>*/---------------------------------------------------------------------\
*| This file is part of SAPlink.                                       |
*|                                                                     |
*|Copyright 2006-2015 by Nicola Fankhauser(nicola.fankhauser@variant.ch)
*|                                                                     |
*| Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);     |
*| you may not use this file except in compliance with the License.    |
*| You may obtain a copy of the License at                             |
*|                                                                     |
*|     http://www.apache.org/licenses/LICENSE-2.0                      |
*|                                                                     |
*| Unless required by applicable law or agreed to in writing, software |
*| distributed under the License is distributed on an &quot;AS IS&quot; BASIS,   |
*| WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or     |
*| implied.                                                            |
*| See the License for the specific language governing permissions and |
*| limitations under the License.                                      |
*\---------------------------------------------------------------------/
METHOD SAVE_XSLT .

* save XSLT transformation
  io_xslt-&gt;save(
    EXCEPTIONS
      permission_failure        = 5
      OTHERS                    = 6 ).

  IF sy-subrc &lt;&gt; 0.
    CASE sy-subrc.
      WHEN 5.
        RAISE EXCEPTION TYPE zcx_saplink
          EXPORTING textid = zcx_saplink=&gt;not_authorized.
      WHEN OTHERS.
        RAISE EXCEPTION TYPE zcx_saplink
          EXPORTING textid = zcx_saplink=&gt;system_error.
    ENDCASE.
  ENDIF.

ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZSAPLINK_TRANSFORMATION" CMPNAME="SET_XSLT_CHANGEABLE" VERSION="1" LANGU="E" DESCRIPT="Sets the XSLT Transformation changeable" EXPOSURE="1" STATE="1" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" MTDNEWEXC="X" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZSAPLINK_TRANSFORMATION" CMPNAME="SET_XSLT_CHANGEABLE" SCONAME="I_CHANGEABLE" VERSION="1" LANGU="E" DESCRIPT="Changeable?" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="ABAP_BOOL" PARVALUE="ABAP_TRUE" PARPREFERD="X"/>
   <parameter CLSNAME="ZSAPLINK_TRANSFORMATION" CMPNAME="SET_XSLT_CHANGEABLE" SCONAME="IO_XSLT" VERSION="1" LANGU="E" DESCRIPT="XSLT Transformation" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="3" TYPE="CL_O2_API_XSLTDESC"/>
   <exception CLSNAME="ZSAPLINK_TRANSFORMATION" CMPNAME="SET_XSLT_CHANGEABLE" SCONAME="ZCX_SAPLINK" VERSION="1" LANGU="E" DESCRIPT="SAPlink exception class" MTDTYPE="0" EDITORDER="1 "/>
   <source>*/---------------------------------------------------------------------\
*| This file is part of SAPlink.                                       |
*|                                                                     |
*|Copyright 2006-2015 by Nicola Fankhauser(nicola.fankhauser@variant.ch)
*|                                                                     |
*| Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);     |
*| you may not use this file except in compliance with the License.    |
*| You may obtain a copy of the License at                             |
*|                                                                     |
*|     http://www.apache.org/licenses/LICENSE-2.0                      |
*|                                                                     |
*| Unless required by applicable law or agreed to in writing, software |
*| distributed under the License is distributed on an &quot;AS IS&quot; BASIS,   |
*| WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or     |
*| implied.                                                            |
*| See the License for the specific language governing permissions and |
*| limitations under the License.                                      |
*\---------------------------------------------------------------------/
METHOD set_xslt_changeable.

* set changeable
  io_xslt-&gt;set_changeable(
    EXPORTING
      p_changeable                = i_changeable
    EXCEPTIONS
      object_already_unlocked     = 4
      object_already_changeable   = 5
      object_locked_by_other_user = 3
      permission_failure          = 2
      OTHERS                      = 10 ).

  IF sy-subrc &lt;&gt; 0.
    CASE sy-subrc.
      WHEN 1.
        RAISE EXCEPTION TYPE zcx_saplink
          EXPORTING textid = zcx_saplink=&gt;not_found.
      WHEN 2.
        RAISE EXCEPTION TYPE zcx_saplink
          EXPORTING textid = zcx_saplink=&gt;not_authorized.
      WHEN 3.
        RAISE EXCEPTION TYPE zcx_saplink
          EXPORTING textid = zcx_saplink=&gt;locked.
      WHEN 4 OR 5. &quot; do nothing, continue
      WHEN OTHERS.
        RAISE EXCEPTION TYPE zcx_saplink
          EXPORTING textid = zcx_saplink=&gt;system_error.
    ENDCASE.
  ENDIF.

ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZSAPLINK_TRANSFORMATION" CMPNAME="SET_XSLT_NAME" VERSION="1" LANGU="E" DESCRIPT="Setzt XSLT Name" EXPOSURE="1" STATE="1" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>*/---------------------------------------------------------------------\
*| This file is part of SAPlink.                                       |
*|                                                                     |
*|Copyright 2006-2015 by Nicola Fankhauser(nicola.fankhauser@variant.ch)
*|                                                                     |
*| Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);     |
*| you may not use this file except in compliance with the License.    |
*| You may obtain a copy of the License at                             |
*|                                                                     |
*|     http://www.apache.org/licenses/LICENSE-2.0                      |
*|                                                                     |
*| Unless required by applicable law or agreed to in writing, software |
*| distributed under the License is distributed on an &quot;AS IS&quot; BASIS,   |
*| WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or     |
*| implied.                                                            |
*| See the License for the specific language governing permissions and |
*| limitations under the License.                                      |
*\---------------------------------------------------------------------/
METHOD set_xslt_name.

  xslt_name = objname.

ENDMETHOD.</source>
  </method>
 </CLAS>
 <CLAS CLSNAME="ZSAPLINK_DOMAINS" VERSION="1" LANGU="E" DESCRIPT="SAPlink - Data Dictionary  - Domains" CATEGORY="00" EXPOSURE="2" STATE="1" RELEASE="0" CLSFINAL="X" CLSCCINCL="X" FIXPT="X" UNICODE="X" CLSBCCAT="00" DURATION_TYPE="0 " RISK_LEVEL="0 " ZSAPLINK_PLUGIN_MAJOR_VERSION="0 " ZSAPLINK_PLUGIN_MINOR_VERSION="1 " ZSAPLINK_PLUGIN_BUILD_VERSION="0 " ZSAPLINK_PLUGIN_INFO1="ZSAPLINK_CLASS is part of the main ZSAPLINK project --&gt; This plugin found there instead of ZSAPLINK_PLUGINS projects" ZSAPLINK_PLUGIN_INFO2="SAPLINK homepage: https://www.assembla.com/spaces/saplink/wiki" ZSAPLINK_PLUGIN_INFO3="Download from https://www.assembla.com/code/saplink/subversion/nodes" ZSAPLINK_PLUGIN_INFO4="and navigate to:  trunk -&gt; core -&gt; ZSAPLINK -&gt; CLAS -&gt; ZSAPLINK_CLASS.slnk" REFCLSNAME="ZSAPLINK">
  <localImplementation>*&quot;* local class implementation for public class
*&quot;* use this source file for the implementation part of
*&quot;* local helper classes</localImplementation>
  <localTypes>*&quot;* use this source file for any type declarations (class
*&quot;* definitions, interfaces or data types) you need for method
*&quot;* implementation or private method&apos;s signature</localTypes>
  <localMacros>*&quot;* use this source file for any macro definitions you need
*&quot;* in the implementation part of the class</localMacros>
  <attribute CLSNAME="ZSAPLINK_DOMAINS" CMPNAME="C_MULTILANGUAGESUPPORT" VERSION="1" LANGU="E" EXPOSURE="0" STATE="1" EDITORDER="1 " ATTDECLTYP="2" ATTVALUE="&apos;MultiLanguageSupport&apos;" ATTEXPVIRT="0" TYPTYPE="1" TYPE="STRING" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <inheritance CLSNAME="ZSAPLINK_DOMAINS" REFCLSNAME="ZSAPLINK" VERSION="1" STATE="1">
   <redefinition CLSNAME="ZSAPLINK_DOMAINS" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="CHECKEXISTS" EXPOSURE="0"/>
   <redefinition CLSNAME="ZSAPLINK_DOMAINS" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="CREATEIXMLDOCFROMOBJECT" EXPOSURE="0"/>
   <redefinition CLSNAME="ZSAPLINK_DOMAINS" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="CREATEOBJECTFROMIXMLDOC" EXPOSURE="0"/>
   <redefinition CLSNAME="ZSAPLINK_DOMAINS" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="DELETEOBJECT" EXPOSURE="0"/>
   <redefinition CLSNAME="ZSAPLINK_DOMAINS" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="GETOBJECTTYPE" EXPOSURE="0"/>
  </inheritance>
  <method CLSNAME="ZSAPLINK" CMPNAME="CHECKEXISTS" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>*/---------------------------------------------------------------------\
*| This file is part of SAPlink.                                       |
*|                                                                     |
*| Copyright 2014 SAPlink project members                              |
*|                                                                     |
*| Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);     |
*| you may not use this file except in compliance with the License.    |
*| You may obtain a copy of the License at                             |
*|                                                                     |
*|     http://www.apache.org/licenses/LICENSE-2.0                      |
*|                                                                     |
*| Unless required by applicable law or agreed to in writing, software |
*| distributed under the License is distributed on an &quot;AS IS&quot; BASIS,   |
*| WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or     |
*| implied.                                                            |
*| See the License for the specific language governing permissions and |
*| limitations under the License.                                      |
*\---------------------------------------------------------------------/
METHOD checkexists.

*      Plugin created by:
*      Thomas Jung
*      thomas.jung1@gmail.com

  DATA: l_name TYPE ddobjname,
        dd01v_wa type dd01v.
  l_name = objname.
  CALL FUNCTION &apos;DDIF_DOMA_GET&apos;
    EXPORTING
      name          = l_name
    IMPORTING
      dd01v_wa      = dd01v_wa
    EXCEPTIONS
      illegal_input = 1
      OTHERS        = 2.
  IF sy-subrc = 0 AND dd01v_wa-domname IS NOT INITIAL.
    exists = &apos;X&apos;.
  ENDIF.
ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZSAPLINK" CMPNAME="CREATEIXMLDOCFROMOBJECT" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>*/---------------------------------------------------------------------\
*| This file is part of SAPlink.                                       |
*|                                                                     |
*| Copyright 2014 SAPlink project members                              |
*|                                                                     |
*| Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);     |
*| you may not use this file except in compliance with the License.    |
*| You may obtain a copy of the License at                             |
*|                                                                     |
*|     http://www.apache.org/licenses/LICENSE-2.0                      |
*|                                                                     |
*| Unless required by applicable law or agreed to in writing, software |
*| distributed under the License is distributed on an &quot;AS IS&quot; BASIS,   |
*| WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or     |
*| implied.                                                            |
*| See the License for the specific language governing permissions and |
*| limitations under the License.                                      |
*\---------------------------------------------------------------------/
METHOD createixmldocfromobject.
*
**      Plugin created by:
**      Thomas Jung
**      thomas.jung1@gmail.com

**      Stefan Schmöcker - July 2014
**      Changed to support multilinguitiy

  DATA: lt_ddlanguage TYPE STANDARD TABLE OF ddlanguage WITH NON-UNIQUE DEFAULT KEY,
        lo_rootnode   TYPE REF TO if_ixml_element,
        lo_langunode  TYPE REF TO if_ixml_element,
        lo_dd01vnode  TYPE REF TO if_ixml_element,
        lo_dd07vnode  TYPE REF TO if_ixml_element,
        lv_objecttype TYPE string,
        lv_value      TYPE string,
        lv_ddobjname  TYPE ddobjname,
        ls_dd01v      TYPE dd01v,
        lt_dd07v      TYPE STANDARD TABLE OF dd07v WITH NON-UNIQUE DEFAULT KEY.
  FIELD-SYMBOLS: &lt;lv_ddlanguage&gt; LIKE LINE OF lt_ddlanguage,
                 &lt;ls_dd07v&gt;      LIKE LINE OF lt_dd07v.

*--------------------------------------------------------------------*
* First determine all languages that we have to take into account
* This translation could have taken place
*       for the domain description  ( DD01T )
*       or for the fix-values       ( DD07T )
* Get a list of all languages
*--------------------------------------------------------------------*
  SELECT DISTINCT ddlanguage
    INTO TABLE lt_ddlanguage
    FROM dd01t
    WHERE domname = me-&gt;objname.
  SELECT DISTINCT ddlanguage
    APPENDING TABLE lt_ddlanguage
    FROM dd07t
    WHERE domname = me-&gt;objname.
  SORT lt_ddlanguage.
  DELETE ADJACENT DUPLICATES FROM lt_ddlanguage.

*--------------------------------------------------------------------*
* Build rootnode
*--------------------------------------------------------------------*
  lv_objecttype = getobjecttype( ).
  lo_rootnode   = xmldoc-&gt;create_element( lv_objecttype ).
  lo_rootnode-&gt;set_attribute(  name  = &apos;DOMNAME&apos;
                               value = me-&gt;objname ).
  lo_rootnode-&gt;set_attribute( name  = c_multilanguagesupport
                              value = &apos;X&apos; ).
*--------------------------------------------------------------------*
* For each language add a language-node,
* and then add the relevant data from DD01L and DD07L
*--------------------------------------------------------------------*
  lv_ddobjname = me-&gt;objname.
  LOOP AT lt_ddlanguage ASSIGNING &lt;lv_ddlanguage&gt;.

*--------------------------------------------------------------------*
    lo_langunode = xmldoc-&gt;create_element( &apos;DDLANGUAGE&apos; ).
    lv_value     = &lt;lv_ddlanguage&gt;.
    lo_langunode-&gt;set_attribute(  name  = &apos;LANGU&apos;
                                  value = lv_value ).

    CLEAR: ls_dd01v,
           lt_dd07v.
    CALL FUNCTION &apos;DDIF_DOMA_GET&apos;
      EXPORTING
        name          = lv_ddobjname
        langu         = &lt;lv_ddlanguage&gt;
      IMPORTING
*      gotstate      = gotstate
        dd01v_wa      = ls_dd01v
      TABLES
        dd07v_tab     = lt_dd07v
      EXCEPTIONS
        illegal_input = 1
        OTHERS        = 2.
    IF sy-subrc &lt;&gt; 0 OR ls_dd01v-domname IS INITIAL.
      RAISE EXCEPTION TYPE zcx_saplink
        EXPORTING textid = zcx_saplink=&gt;not_found.
    ENDIF.

    lo_dd01vnode = xmldoc-&gt;create_element( &apos;DD01V&apos; ).
    setattributesfromstructure( node      = lo_dd01vnode
                                structure = ls_dd01v ).
    lo_langunode-&gt;append_child( lo_dd01vnode ).

    LOOP AT lt_dd07v ASSIGNING &lt;ls_dd07v&gt;.
      lo_dd07vnode = xmldoc-&gt;create_element( &apos;DD07V&apos; ).
      setattributesfromstructure( node      = lo_dd07vnode
                                  structure = &lt;ls_dd07v&gt; ).
      lo_langunode-&gt;append_child( lo_dd07vnode ).
    ENDLOOP.

    lo_rootnode-&gt;append_child( lo_langunode ).

  ENDLOOP.

  xmldoc-&gt;append_child( lo_rootnode ).
  ixmldocument = xmldoc.
*
*  DATA: gotstate TYPE ddgotstate,
*        dd01v_wa TYPE dd01v,
*        dd07v_tab TYPE STANDARD TABLE OF dd07v.
*
**xml nodes
*  DATA rootnode   TYPE REF TO if_ixml_element.
*  DATA dd07v_node TYPE REF TO if_ixml_element.
*  DATA rc         TYPE sysubrc.
*  DATA _domaname  TYPE ddobjname.
*  _domaname = objname.
*
*  CALL FUNCTION &apos;DDIF_DOMA_GET&apos;
*    EXPORTING
*      name          = _domaname
*      langu         = sy-langu
*    IMPORTING
*      gotstate      = gotstate
*      dd01v_wa      = dd01v_wa
*    TABLES
*      dd07v_tab     = dd07v_tab
*    EXCEPTIONS
*      illegal_input = 1
*      OTHERS        = 2.
*  IF sy-subrc &lt;&gt; 0 OR dd01v_wa-domname IS INITIAL.
*    RAISE EXCEPTION TYPE zcx_saplink
*      EXPORTING textid = zcx_saplink=&gt;not_found.
*  ENDIF.
*
** Create parent node
*  DATA _objtype TYPE string.
*  _objtype = getobjecttype( ).
*  rootnode = xmldoc-&gt;create_element( _objtype ).
*  setattributesfromstructure( node = rootnode structure = dd01v_wa ).
*
*  DATA: wa_dd07v LIKE LINE OF dd07v_tab.
*  LOOP AT dd07v_tab INTO wa_dd07v.
*    dd07v_node = xmldoc-&gt;create_element( &apos;dd07v&apos; ).
*    setattributesfromstructure( node = dd07v_node structure = wa_dd07v ).
*    rc = rootnode-&gt;append_child( dd07v_node ).
*  ENDLOOP.

*\--------------------------------------------------------------------/
*  rc = xmldoc-&gt;append_child( lo_rootnode ).
*  ixmldocument = xmldoc.
ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZSAPLINK" CMPNAME="CREATEOBJECTFROMIXMLDOC" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>*/---------------------------------------------------------------------\
*| This file is part of SAPlink.                                       |
*|                                                                     |
*| Copyright 2014 SAPlink project members                              |
*|                                                                     |
*| Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);     |
*| you may not use this file except in compliance with the License.    |
*| You may obtain a copy of the License at                             |
*|                                                                     |
*|     http://www.apache.org/licenses/LICENSE-2.0                      |
*|                                                                     |
*| Unless required by applicable law or agreed to in writing, software |
*| distributed under the License is distributed on an &quot;AS IS&quot; BASIS,   |
*| WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or     |
*| implied.                                                            |
*| See the License for the specific language governing permissions and |
*| limitations under the License.                                      |
*\---------------------------------------------------------------------/
METHOD createobjectfromixmldoc.

*      Plugin created by:
*      Thomas Jung
*      thomas.jung1@gmail.com

*      Stefan Schmöcker - July 2014
*      Changed to support multilinguitiy


  DATA: gotstate TYPE ddgotstate,
        dd01v_wa TYPE dd01v,
        dd07v_tab TYPE STANDARD TABLE OF dd07v.

*xml nodes
  DATA rootnode    TYPE REF TO if_ixml_element.
  DATA dd07v_node  TYPE REF TO if_ixml_element.
  DATA node        TYPE REF TO if_ixml_element.
  DATA filter      TYPE REF TO if_ixml_node_filter.
  DATA iterator    TYPE REF TO if_ixml_node_iterator.
  DATA rc          TYPE sysubrc.
  DATA _domaname   TYPE ddobjname.
  DATA _devclass   TYPE devclass.
  DATA checkexists TYPE flag.
  DATA _objtype    TYPE string.

  _devclass = devclass.
  _objtype = getobjecttype( ).

  xmldoc = ixmldocument.
  rootnode = xmldoc-&gt;find_from_name( _objtype ).

* begin of insertion Multilinguality - check if nugget/slinkee was exported w/o support of multilinguality
  DATA: lv_multilanguagesupport TYPE flag.
  lv_multilanguagesupport = rootnode-&gt;get_attribute( name = c_multilanguagesupport ).
  IF lv_multilanguagesupport IS INITIAL.  &quot; Not found or not set --&gt; use old version of this class
    name = createobjectfromixmldoc_nolang(  ixmldocument =  ixmldocument
                                            devclass     =  devclass
                                            overwrite    =  overwrite    ).
    RETURN.
  ENDIF.
* end of insertion Multilinguality - check if nugget/slinkee was exported w/o support of multilinguality

  CALL METHOD getstructurefromattributes
    EXPORTING
      node      = rootnode
    CHANGING
      structure = dd01v_wa.

  objname = dd01v_wa-domname.

  checkexists = checkexists( ).
  IF checkexists IS NOT INITIAL.
    IF overwrite IS INITIAL.
      RAISE EXCEPTION TYPE zcx_saplink
        EXPORTING textid = zcx_saplink=&gt;existing.
    ELSE.
*     delete object for new install
      deleteobject( ).
    ENDIF.
  ENDIF.

* begin of deletion Multilinguality - moved down and into loop
** retrieve Domain details
*  FREE: filter, iterator, node.
*  filter = xmldoc-&gt;create_filter_name( &apos;dd07v&apos; ).
*  iterator = xmldoc-&gt;create_iterator_filtered( filter ).
*  node ?= iterator-&gt;get_next( ).
*
*  DATA: wa_dd07v LIKE LINE OF dd07v_tab.
*  WHILE node IS NOT INITIAL.
*    CLEAR dd07v_node.
*    CALL METHOD getstructurefromattributes
*      EXPORTING
*        node      = node
*      CHANGING
*        structure = wa_dd07v.
*    APPEND wa_dd07v TO dd07v_tab.
*    node ?= iterator-&gt;get_next( ).
*  ENDWHILE.
* end of deletion Multilinguality - moved down and into loop

  DATA : l_pgmid         TYPE tadir-pgmid,
           l_object      TYPE tadir-object,
           l_obj_name    TYPE tadir-obj_name,
           l_dd_objname  TYPE ddobjname,
           l_srcsystem   TYPE tadir-srcsystem,
           l_author      TYPE tadir-author,
           l_devclass    TYPE tadir-devclass,
           l_masterlang  TYPE tadir-masterlang.


  l_pgmid      = &apos;R3TR&apos;.
  l_object     = _objtype.
  l_obj_name   = objname.
  l_dd_objname = objname.
  l_srcsystem  = sy-sysid.
  l_author     = sy-uname.
  l_devclass   = _devclass.
  l_masterlang = sy-langu.

  DATA: itadir TYPE tadir.
  itadir-pgmid      = l_pgmid.
  itadir-object     = l_object.
  itadir-obj_name   = l_obj_name.
  itadir-srcsystem  = l_srcsystem.
  itadir-author     = l_author.
  itadir-devclass   = l_devclass.
  itadir-masterlang = l_masterlang.
  MODIFY tadir FROM itadir.

  CALL FUNCTION &apos;TR_TADIR_INTERFACE&apos;
    EXPORTING
      wi_test_modus                  = &apos; &apos;
      wi_delete_tadir_entry          = &apos;X&apos;
      wi_tadir_pgmid                 = l_pgmid
      wi_tadir_object                = l_object
      wi_tadir_obj_name              = l_obj_name
      wi_tadir_srcsystem             = l_srcsystem
      wi_tadir_author                = l_author
      wi_tadir_devclass              = l_devclass
      wi_tadir_masterlang            = l_masterlang
      iv_set_edtflag                 = &apos;&apos;
    EXCEPTIONS
      tadir_entry_not_existing       = 1
      tadir_entry_ill_type           = 2
      no_systemname                  = 3
      no_systemtype                  = 4
      original_system_conflict       = 5
      object_reserved_for_devclass   = 6
      object_exists_global           = 7
      object_exists_local            = 8
      object_is_distributed          = 9
      obj_specification_not_unique   = 10
      no_authorization_to_delete     = 11
      devclass_not_existing          = 12
      simultanious_set_remove_repair = 13
      order_missing                  = 14
      no_modification_of_head_syst   = 15
      pgmid_object_not_allowed       = 16
      masterlanguage_not_specified   = 17
      devclass_not_specified         = 18
      specify_owner_unique           = 19
      loc_priv_objs_no_repair        = 20
      gtadir_not_reached             = 21
      object_locked_for_order        = 22
      change_of_class_not_allowed    = 23
      no_change_from_sap_to_tmp      = 24
      OTHERS                         = 25.
  IF sy-subrc NE 0.
    CASE sy-subrc.
      WHEN 1 OR 9 OR 7 OR 8. &quot;OK! - Doesn&apos;t exist yet
      WHEN 11 OR 23 OR 24.
        RAISE EXCEPTION TYPE zcx_saplink
          EXPORTING textid = zcx_saplink=&gt;not_authorized.
      WHEN 22.
        RAISE EXCEPTION TYPE zcx_saplink
          EXPORTING textid = zcx_saplink=&gt;locked.
      WHEN OTHERS.
        RAISE EXCEPTION TYPE zcx_saplink
          EXPORTING textid = zcx_saplink=&gt;system_error.
    ENDCASE.
  ENDIF.

* begin of deletion Multilinguality - moved into loop
*  CALL FUNCTION &apos;DDIF_DOMA_PUT&apos;
*    EXPORTING
*      name              = l_dd_objname
*      dd01v_wa          = dd01v_wa
*    TABLES
*      dd07v_tab         = dd07v_tab
*    EXCEPTIONS
*      doma_not_found    = 1
*      name_inconsistent = 2
*      doma_inconsistent = 3
*      put_failure       = 4
*      put_refused       = 5
*      OTHERS            = 6.
*  IF sy-subrc &lt;&gt; 0.
*    RAISE EXCEPTION TYPE zcx_saplink
*      EXPORTING textid = zcx_saplink=&gt;system_error.
*  ENDIF.
* begin of deletion Multilinguality -  moved into loop
* begin of insertion Multilinguality - loop at languages and insert them all
  DATA: lo_langunode  TYPE REF TO if_ixml_element,
        lo_dd01vnode  TYPE REF TO if_ixml_element,
        lo_dd07vnode  TYPE REF TO if_ixml_element,
        ls_dd01v      TYPE dd01v,
        lt_dd07v      TYPE STANDARD TABLE OF dd07v WITH NON-UNIQUE DEFAULT KEY.
  FIELD-SYMBOLS: &lt;ls_dd07v&gt;      LIKE LINE OF lt_dd07v.

  lo_langunode ?= rootnode-&gt;find_from_name( &apos;DDLANGUAGE&apos; ).
  WHILE lo_langunode IS BOUND.  &quot; No need to extract anything from languagenode since language is duplicated in DD01V and DD07V

    CLEAR: ls_dd01v,
           lt_dd07v.
    FREE:  lo_dd01vnode,
           lo_dd07vnode.

* DD01V
    lo_dd01vnode ?= lo_langunode-&gt;find_from_name( &apos;DD01V&apos; ).
    IF lo_dd01vnode IS BOUND.
      CALL METHOD getstructurefromattributes
        EXPORTING
          node      = lo_dd01vnode
        CHANGING
          structure = ls_dd01v.

* DD07V
      lo_dd07vnode ?= lo_langunode-&gt;find_from_name( &apos;DD07V&apos; ).
      WHILE lo_dd07vnode IS BOUND.
        APPEND INITIAL LINE TO lt_dd07v ASSIGNING &lt;ls_dd07v&gt;.
        CALL METHOD getstructurefromattributes
          EXPORTING
            node      = lo_dd07vnode
          CHANGING
            structure = &lt;ls_dd07v&gt;.
        lo_dd07vnode ?= lo_dd07vnode-&gt;get_next( ).
      ENDWHILE.


      CALL FUNCTION &apos;DDIF_DOMA_PUT&apos;
        EXPORTING
          name              = l_dd_objname
          dd01v_wa          = ls_dd01v
        TABLES
          dd07v_tab         = lt_dd07v
        EXCEPTIONS
          doma_not_found    = 1
          name_inconsistent = 2
          doma_inconsistent = 3
          put_failure       = 4
          put_refused       = 5
          OTHERS            = 6.
      IF sy-subrc &lt;&gt; 0.
        RAISE EXCEPTION TYPE zcx_saplink
          EXPORTING textid = zcx_saplink=&gt;system_error.
      ENDIF.
    ENDIF.

    lo_langunode ?= lo_langunode-&gt;get_next( ).


  ENDWHILE.
* end of insertion Multilinguality - loop at languages and insert them all



  DATA: trobjtype  TYPE trobjtype,
        trobj_name TYPE trobj_name.
  trobjtype  = l_object.
  trobj_name = l_obj_name.
  CALL FUNCTION &apos;RS_INSERT_INTO_WORKING_AREA&apos;
    EXPORTING
      object            = trobjtype
      obj_name          = trobj_name
    EXCEPTIONS
      wrong_object_name = 1.

  name = objname.

ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZSAPLINK_DOMAINS" CMPNAME="CREATEOBJECTFROMIXMLDOC_NOLANG" VERSION="1" LANGU="E" DESCRIPT="Old nugget/slinkee w/o multilanguagesupport" EXPOSURE="2" STATE="1" EDITORDER="1 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" MTDNEWEXC="X" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZSAPLINK_DOMAINS" CMPNAME="CREATEOBJECTFROMIXMLDOC_NOLANG" SCONAME="IXMLDOCUMENT" VERSION="1" LANGU="E" DESCRIPT="IF_IXML_DOCUMENT" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="3" TYPE="IF_IXML_DOCUMENT"/>
   <parameter CLSNAME="ZSAPLINK_DOMAINS" CMPNAME="CREATEOBJECTFROMIXMLDOC_NOLANG" SCONAME="DEVCLASS" VERSION="1" LANGU="E" DESCRIPT="Development class/package" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="DEVCLASS" PARVALUE="&apos;$TMP&apos;"/>
   <parameter CLSNAME="ZSAPLINK_DOMAINS" CMPNAME="CREATEOBJECTFROMIXMLDOC_NOLANG" SCONAME="OVERWRITE" VERSION="1" LANGU="E" DESCRIPT="Overwrite original objects" CMPTYPE="1" MTDTYPE="0" EDITORDER="3 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="FLAG" PAROPTIONL="X"/>
   <parameter CLSNAME="ZSAPLINK_DOMAINS" CMPNAME="CREATEOBJECTFROMIXMLDOC_NOLANG" SCONAME="NAME" VERSION="1" LANGU="E" DESCRIPT="Installed object name" CMPTYPE="1" MTDTYPE="0" EDITORDER="4 " DISPID="0 " PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="1" TYPE="STRING"/>
   <exception CLSNAME="ZSAPLINK_DOMAINS" CMPNAME="CREATEOBJECTFROMIXMLDOC_NOLANG" SCONAME="ZCX_SAPLINK" VERSION="1" LANGU="E" DESCRIPT="SAPlink exception class" MTDTYPE="0" EDITORDER="1 "/>
   <source>*/---------------------------------------------------------------------\
*| This file is part of SAPlink.                                       |
*|                                                                     |
*| Copyright 2014 SAPlink project members                              |
*|                                                                     |
*| Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);     |
*| you may not use this file except in compliance with the License.    |
*| You may obtain a copy of the License at                             |
*|                                                                     |
*|     http://www.apache.org/licenses/LICENSE-2.0                      |
*|                                                                     |
*| Unless required by applicable law or agreed to in writing, software |
*| distributed under the License is distributed on an &quot;AS IS&quot; BASIS,   |
*| WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or     |
*| implied.                                                            |
*| See the License for the specific language governing permissions and |
*| limitations under the License.                                      |
*\---------------------------------------------------------------------/
method CREATEOBJECTFROMIXMLDOC_NOLANG.

*      Plugin created by:
*      Thomas Jung
*      thomas.jung1@gmail.com

*      Stefan Schmöcker - July 2014
*      Changed to support multilinguitiy


  DATA: gotstate TYPE ddgotstate,
        dd01v_wa TYPE dd01v,
        dd07v_tab TYPE STANDARD TABLE OF dd07v.

*xml nodes
  DATA rootnode    TYPE REF TO if_ixml_element.
  DATA dd07v_node  TYPE REF TO if_ixml_element.
  DATA node        TYPE REF TO if_ixml_element.
  DATA filter      TYPE REF TO if_ixml_node_filter.
  DATA iterator    TYPE REF TO if_ixml_node_iterator.
  DATA rc          TYPE sysubrc.
  DATA _domaname   TYPE ddobjname.
  DATA _devclass   TYPE devclass.
  DATA checkexists TYPE flag.
  DATA _objtype    TYPE string.

  _devclass = devclass.
  _objtype = getobjecttype( ).

  xmldoc = ixmldocument.
  rootnode = xmldoc-&gt;find_from_name( _objtype ).

  CALL METHOD getstructurefromattributes
    EXPORTING
      node      = rootnode
    CHANGING
      structure = dd01v_wa.

  objname = dd01v_wa-domname.

  checkexists = checkexists( ).
  IF checkexists IS NOT INITIAL.
    IF overwrite IS INITIAL.
      RAISE EXCEPTION TYPE zcx_saplink
        EXPORTING textid = zcx_saplink=&gt;existing.
    ELSE.
*     delete object for new install
      deleteobject( ).
    ENDIF.
  ENDIF.

* retrieve Domain details
  FREE: filter, iterator, node.
  filter = xmldoc-&gt;create_filter_name( &apos;dd07v&apos; ).
  iterator = xmldoc-&gt;create_iterator_filtered( filter ).
  node ?= iterator-&gt;get_next( ).

  DATA: wa_dd07v LIKE LINE OF dd07v_tab.
  WHILE node IS NOT INITIAL.
    CLEAR dd07v_node.
    CALL METHOD getstructurefromattributes
      EXPORTING
        node      = node
      CHANGING
        structure = wa_dd07v.
    APPEND wa_dd07v TO dd07v_tab.
    node ?= iterator-&gt;get_next( ).
  ENDWHILE.

  DATA : l_pgmid         TYPE tadir-pgmid,
           l_object      TYPE tadir-object,
           l_obj_name    TYPE tadir-obj_name,
           l_dd_objname  TYPE ddobjname,
           l_srcsystem   TYPE tadir-srcsystem,
           l_author      TYPE tadir-author,
           l_devclass    TYPE tadir-devclass,
           l_masterlang  TYPE tadir-masterlang.


  l_pgmid      = &apos;R3TR&apos;.
  l_object     = _objtype.
  l_obj_name   = objname.
  l_dd_objname = objname.
  l_srcsystem  = sy-sysid.
  l_author     = sy-uname.
  l_devclass   = _devclass.
  l_masterlang = sy-langu.

  DATA: itadir TYPE tadir.
  itadir-pgmid      = l_pgmid.
  itadir-object     = l_object.
  itadir-obj_name   = l_obj_name.
  itadir-srcsystem  = l_srcsystem.
  itadir-author     = l_author.
  itadir-devclass   = l_devclass.
  itadir-masterlang = l_masterlang.
  MODIFY tadir FROM itadir.

  CALL FUNCTION &apos;TR_TADIR_INTERFACE&apos;
    EXPORTING
      wi_test_modus                  = &apos; &apos;
      wi_delete_tadir_entry          = &apos;X&apos;
      wi_tadir_pgmid                 = l_pgmid
      wi_tadir_object                = l_object
      wi_tadir_obj_name              = l_obj_name
      wi_tadir_srcsystem             = l_srcsystem
      wi_tadir_author                = l_author
      wi_tadir_devclass              = l_devclass
      wi_tadir_masterlang            = l_masterlang
      iv_set_edtflag                 = &apos;&apos;
    EXCEPTIONS
      tadir_entry_not_existing       = 1
      tadir_entry_ill_type           = 2
      no_systemname                  = 3
      no_systemtype                  = 4
      original_system_conflict       = 5
      object_reserved_for_devclass   = 6
      object_exists_global           = 7
      object_exists_local            = 8
      object_is_distributed          = 9
      obj_specification_not_unique   = 10
      no_authorization_to_delete     = 11
      devclass_not_existing          = 12
      simultanious_set_remove_repair = 13
      order_missing                  = 14
      no_modification_of_head_syst   = 15
      pgmid_object_not_allowed       = 16
      masterlanguage_not_specified   = 17
      devclass_not_specified         = 18
      specify_owner_unique           = 19
      loc_priv_objs_no_repair        = 20
      gtadir_not_reached             = 21
      object_locked_for_order        = 22
      change_of_class_not_allowed    = 23
      no_change_from_sap_to_tmp      = 24
      OTHERS                         = 25.
  IF sy-subrc NE 0.
    CASE sy-subrc.
      WHEN 1 OR 9 OR 7 OR 8. &quot;OK! - Doesn&apos;t exist yet
      WHEN 11 OR 23 OR 24.
        RAISE EXCEPTION TYPE zcx_saplink
          EXPORTING textid = zcx_saplink=&gt;not_authorized.
      WHEN 22.
        RAISE EXCEPTION TYPE zcx_saplink
          EXPORTING textid = zcx_saplink=&gt;locked.
      WHEN OTHERS.
        RAISE EXCEPTION TYPE zcx_saplink
          EXPORTING textid = zcx_saplink=&gt;system_error.
    ENDCASE.
  ENDIF.

  CALL FUNCTION &apos;DDIF_DOMA_PUT&apos;
    EXPORTING
      name              = l_dd_objname
      dd01v_wa          = dd01v_wa
    TABLES
      dd07v_tab         = dd07v_tab
    EXCEPTIONS
      doma_not_found    = 1
      name_inconsistent = 2
      doma_inconsistent = 3
      put_failure       = 4
      put_refused       = 5
      OTHERS            = 6.
  IF sy-subrc &lt;&gt; 0.
    RAISE EXCEPTION TYPE zcx_saplink
      EXPORTING textid = zcx_saplink=&gt;system_error.
  ENDIF.



  DATA: trobjtype  TYPE trobjtype,
        trobj_name TYPE trobj_name.
  trobjtype  = l_object.
  trobj_name = l_obj_name.
  CALL FUNCTION &apos;RS_INSERT_INTO_WORKING_AREA&apos;
    EXPORTING
      object            = trobjtype
      obj_name          = trobj_name
    EXCEPTIONS
      wrong_object_name = 1.

  name = objname.

ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZSAPLINK" CMPNAME="DELETEOBJECT" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>*/---------------------------------------------------------------------\
*| This file is part of SAPlink.                                       |
*|                                                                     |
*| Copyright 2014 SAPlink project members                              |
*|                                                                     |
*| Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);     |
*| you may not use this file except in compliance with the License.    |
*| You may obtain a copy of the License at                             |
*|                                                                     |
*|     http://www.apache.org/licenses/LICENSE-2.0                      |
*|                                                                     |
*| Unless required by applicable law or agreed to in writing, software |
*| distributed under the License is distributed on an &quot;AS IS&quot; BASIS,   |
*| WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or     |
*| implied.                                                            |
*| See the License for the specific language governing permissions and |
*| limitations under the License.                                      |
*\---------------------------------------------------------------------/
method DELETEOBJECT.

*      Plugin created by:
*      Thomas Jung
*      thomas.jung1@gmail.com

endmethod.</source>
  </method>
  <method CLSNAME="ZSAPLINK" CMPNAME="GETOBJECTTYPE" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>*/---------------------------------------------------------------------\
*| This file is part of SAPlink.                                       |
*|                                                                     |
*| Copyright 2014 SAPlink project members                              |
*|                                                                     |
*| Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);     |
*| you may not use this file except in compliance with the License.    |
*| You may obtain a copy of the License at                             |
*|                                                                     |
*|     http://www.apache.org/licenses/LICENSE-2.0                      |
*|                                                                     |
*| Unless required by applicable law or agreed to in writing, software |
*| distributed under the License is distributed on an &quot;AS IS&quot; BASIS,   |
*| WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or     |
*| implied.                                                            |
*| See the License for the specific language governing permissions and |
*| limitations under the License.                                      |
*\---------------------------------------------------------------------/
method GETOBJECTTYPE.

*      Plugin created by:
*      Thomas Jung
*      thomas.jung1@gmail.com

  objecttype = &apos;DOMA&apos;.  &quot;Domain
endmethod.</source>
  </method>
 </CLAS>
 <CLAS CLSNAME="ZSAPLINK_DATA_ELEMENTS" VERSION="1" LANGU="E" DESCRIPT="SAPlink - Data Dictionary Data Elements" CATEGORY="00" EXPOSURE="2" STATE="1" RELEASE="0" CLSFINAL="X" CLSCCINCL="X" FIXPT="X" UNICODE="X" CLSBCCAT="00" DURATION_TYPE="0 " RISK_LEVEL="0 " ZSAPLINK_PLUGIN_MAJOR_VERSION="0 " ZSAPLINK_PLUGIN_MINOR_VERSION="1 " ZSAPLINK_PLUGIN_BUILD_VERSION="0 " ZSAPLINK_PLUGIN_INFO1="ZSAPLINK_CLASS is part of the main ZSAPLINK project --&gt; This plugin found there instead of ZSAPLINK_PLUGINS projects" ZSAPLINK_PLUGIN_INFO2="SAPLINK homepage: https://www.assembla.com/spaces/saplink/wiki" ZSAPLINK_PLUGIN_INFO3="Download from https://www.assembla.com/code/saplink/subversion/nodes" ZSAPLINK_PLUGIN_INFO4="and navigate to:  trunk -&gt; core -&gt; ZSAPLINK -&gt; CLAS -&gt; ZSAPLINK_CLASS.slnk" REFCLSNAME="ZSAPLINK">
  <localImplementation>*&quot;* local class implementation for public class
*&quot;* use this source file for the implementation part of
*&quot;* local helper classes</localImplementation>
  <localTypes>*&quot;* use this source file for any type declarations (class
*&quot;* definitions, interfaces or data types) you need for method
*&quot;* implementation or private method&apos;s signature</localTypes>
  <localMacros>*&quot;* use this source file for any macro definitions you need
*&quot;* in the implementation part of the class</localMacros>
  <attribute CLSNAME="ZSAPLINK_DATA_ELEMENTS" CMPNAME="C_MULTILANGUAGESUPPORT" VERSION="1" LANGU="E" EXPOSURE="0" STATE="1" EDITORDER="1 " ATTDECLTYP="2" ATTVALUE="&apos;MultiLanguageSupport&apos;" ATTEXPVIRT="0" TYPTYPE="1" TYPE="STRING" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <inheritance CLSNAME="ZSAPLINK_DATA_ELEMENTS" REFCLSNAME="ZSAPLINK" VERSION="1" STATE="1">
   <redefinition CLSNAME="ZSAPLINK_DATA_ELEMENTS" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="CHECKEXISTS" EXPOSURE="2"/>
   <redefinition CLSNAME="ZSAPLINK_DATA_ELEMENTS" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="CREATEIXMLDOCFROMOBJECT" EXPOSURE="2"/>
   <redefinition CLSNAME="ZSAPLINK_DATA_ELEMENTS" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="CREATEOBJECTFROMIXMLDOC" EXPOSURE="2"/>
   <redefinition CLSNAME="ZSAPLINK_DATA_ELEMENTS" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="DELETEOBJECT" EXPOSURE="1"/>
   <redefinition CLSNAME="ZSAPLINK_DATA_ELEMENTS" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="GETOBJECTTYPE" EXPOSURE="1"/>
  </inheritance>
  <method CLSNAME="ZSAPLINK" CMPNAME="CHECKEXISTS" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>*/---------------------------------------------------------------------\
*| This file is part of SAPlink.                                       |
*|                                                                     |
*| Copyright 2014 SAPlink project members                              |
*|                                                                     |
*| Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);     |
*| you may not use this file except in compliance with the License.    |
*| You may obtain a copy of the License at                             |
*|                                                                     |
*|     http://www.apache.org/licenses/LICENSE-2.0                      |
*|                                                                     |
*| Unless required by applicable law or agreed to in writing, software |
*| distributed under the License is distributed on an &quot;AS IS&quot; BASIS,   |
*| WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or     |
*| implied.                                                            |
*| See the License for the specific language governing permissions and |
*| limitations under the License.                                      |
*\---------------------------------------------------------------------/
METHOD CHECKEXISTS.

*      Plugin created by:
*      Thomas Jung
*      thomas.jung1@gmail.com

  DATA: l_name TYPE ddobjname,
        dd04v_wa type dd04v.
  l_name = objname.

  CALL FUNCTION &apos;DDIF_DTEL_GET&apos;
    EXPORTING
      name                = l_name
    IMPORTING
      DD04V_WA            = DD04V_WA
    EXCEPTIONS
      ILLEGAL_INPUT       = 1
      OTHERS              = 2.
  IF sy-subrc = 0 AND dd04v_wa-ROLLNAME IS NOT INITIAL.
    exists = &apos;X&apos;.
  ENDIF.


ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZSAPLINK" CMPNAME="CREATEIXMLDOCFROMOBJECT" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>*/---------------------------------------------------------------------\
*| This file is part of SAPlink.                                       |
*|                                                                     |
*| Copyright 2014 SAPlink project members                              |
*|                                                                     |
*| Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);     |
*| you may not use this file except in compliance with the License.    |
*| You may obtain a copy of the License at                             |
*|                                                                     |
*|     http://www.apache.org/licenses/LICENSE-2.0                      |
*|                                                                     |
*| Unless required by applicable law or agreed to in writing, software |
*| distributed under the License is distributed on an &quot;AS IS&quot; BASIS,   |
*| WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or     |
*| implied.                                                            |
*| See the License for the specific language governing permissions and |
*| limitations under the License.                                      |
*\---------------------------------------------------------------------/
METHOD createixmldocfromobject.

*      Plugin created by:
*      Thomas Jung
*      thomas.jung1@gmail.com

**      Stefan Schmöcker - July 2014
**      Changed to support multilinguitiy


  DATA: lt_ddlanguage TYPE STANDARD TABLE OF ddlanguage WITH NON-UNIQUE DEFAULT KEY,
        lo_rootnode   TYPE REF TO if_ixml_element,
        lo_langunode  TYPE REF TO if_ixml_element,
        lo_tparanode  TYPE REF TO if_ixml_element,
        lo_dd04vnode  TYPE REF TO if_ixml_element,
        lv_objecttype TYPE string,
        lv_value      TYPE string,
        lv_ddobjname  TYPE ddobjname,
        ls_dd04v      TYPE dd04v.

  FIELD-SYMBOLS: &lt;lv_ddlanguage&gt; LIKE LINE OF lt_ddlanguage.

*--------------------------------------------------------------------*
* First determine all languages that we have to take into account
* This translation could have taken place
*       for the domain description  ( DD01T )
*       or for the fix-values       ( DD07T )
* Get a list of all languages
*--------------------------------------------------------------------*
  SELECT DISTINCT ddlanguage
    INTO TABLE lt_ddlanguage
    FROM dd04t
    WHERE rollname = me-&gt;objname.

*--------------------------------------------------------------------*
* Build rootnode
*--------------------------------------------------------------------*
  lv_objecttype = getobjecttype( ).
  lo_rootnode   = xmldoc-&gt;create_element( lv_objecttype ).

*--------------------------------------------------------------------*
* Simulate old structure to allow old versions of this class to import as well
*--------------------------------------------------------------------*
  DATA: gotstate TYPE ddgotstate,
        dd04v_wa TYPE dd04v,
        tpara_wa TYPE tpara.
  DATA _dtelname  TYPE ddobjname.
  DATA tpara_node TYPE REF TO if_ixml_element.
  DATA rc         TYPE sysubrc.
  _dtelname = objname.

  CALL FUNCTION &apos;DDIF_DTEL_GET&apos;
    EXPORTING
      name          = _dtelname
      langu         = sy-langu
    IMPORTING
      gotstate      = gotstate
      dd04v_wa      = dd04v_wa
      tpara_wa      = tpara_wa
    EXCEPTIONS
      illegal_input = 1
      OTHERS        = 2.

  IF sy-subrc &lt;&gt; 0 OR dd04v_wa-rollname IS INITIAL.
    RAISE EXCEPTION TYPE zcx_saplink
      EXPORTING
        textid = zcx_saplink=&gt;not_found.
  ENDIF.

* Create parent node
  setattributesfromstructure( node = lo_rootnode structure = dd04v_wa ).

  tpara_node = xmldoc-&gt;create_element( &apos;tpara&apos; ).
  setattributesfromstructure( node = tpara_node structure = tpara_wa ).
  rc = lo_rootnode-&gt;append_child( tpara_node ).

  lo_rootnode-&gt;set_attribute( name  = c_multilanguagesupport
                              value = &apos;X&apos; ).

*--------------------------------------------------------------------*
* For each language add a language-node,
* and then add the relevant data from DD04
*--------------------------------------------------------------------*
  lv_ddobjname = me-&gt;objname.
  LOOP AT lt_ddlanguage ASSIGNING &lt;lv_ddlanguage&gt;.

    lo_langunode = xmldoc-&gt;create_element( &apos;DDLANGUAGE&apos; ).
    lv_value     = &lt;lv_ddlanguage&gt;.
    lo_langunode-&gt;set_attribute(  name  = &apos;LANGU&apos;
                                  value = lv_value ).

    CLEAR: ls_dd04v.
    CALL FUNCTION &apos;DDIF_DTEL_GET&apos;
      EXPORTING
        name          = lv_ddobjname
        langu         = &lt;lv_ddlanguage&gt;
      IMPORTING
        dd04v_wa      = ls_dd04v
      EXCEPTIONS
        illegal_input = 1
        OTHERS        = 2.
    IF sy-subrc &lt;&gt; 0 OR ls_dd04v-rollname IS INITIAL.
      RAISE EXCEPTION TYPE zcx_saplink
        EXPORTING
          textid = zcx_saplink=&gt;not_found.
    ENDIF.

    lo_dd04vnode = xmldoc-&gt;create_element( &apos;DD04V&apos; ).
    setattributesfromstructure( node      = lo_dd04vnode
                                structure = ls_dd04v ).
    lo_langunode-&gt;append_child( lo_dd04vnode ).


    lo_rootnode-&gt;append_child( lo_langunode ).

  ENDLOOP.

  xmldoc-&gt;append_child( lo_rootnode ).
  ixmldocument = xmldoc.


*
*  DATA: gotstate TYPE ddgotstate,
*        dd04v_wa TYPE dd04v,
*        tpara_wa TYPE tpara.
*
**xml nodes
*  DATA rootnode   TYPE REF TO if_ixml_element.
*  DATA tpara_node TYPE REF TO if_ixml_element.
*  DATA rc         TYPE sysubrc.
*  DATA _dtelname  TYPE ddobjname.
*  _dtelname = objname.
*
*  CALL FUNCTION &apos;DDIF_DTEL_GET&apos;
*    EXPORTING
*      name          = _dtelname
*      langu         = sy-langu
*    IMPORTING
*      gotstate      = gotstate
*      dd04v_wa      = dd04v_wa
*      tpara_wa      = tpara_wa
*    EXCEPTIONS
*      illegal_input = 1
*      OTHERS        = 2.
*
*  IF sy-subrc &lt;&gt; 0 OR dd04v_wa-rollname IS INITIAL.
*    RAISE EXCEPTION TYPE zcx_saplink
*      EXPORTING textid = zcx_saplink=&gt;not_found.
*  ENDIF.
*
** Create parent node
*  DATA _objtype TYPE string.
*  _objtype = getobjecttype( ).
*  rootnode = xmldoc-&gt;create_element( _objtype ).
*  setattributesfromstructure( node = rootnode structure = dd04v_wa ).
*
*  tpara_node = xmldoc-&gt;create_element( &apos;tpara&apos; ).
*  setattributesfromstructure( node = tpara_node structure = tpara_wa ).
*  rc = rootnode-&gt;append_child( tpara_node ).
*
**\--------------------------------------------------------------------/
*  rc = xmldoc-&gt;append_child( rootnode ).
*  ixmldocument = xmldoc.
ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZSAPLINK" CMPNAME="CREATEOBJECTFROMIXMLDOC" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>*/---------------------------------------------------------------------\
*| This file is part of SAPlink.                                       |
*|                                                                     |
*| Copyright 2014 SAPlink project members                              |
*|                                                                     |
*| Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);     |
*| you may not use this file except in compliance with the License.    |
*| You may obtain a copy of the License at                             |
*|                                                                     |
*|     http://www.apache.org/licenses/LICENSE-2.0                      |
*|                                                                     |
*| Unless required by applicable law or agreed to in writing, software |
*| distributed under the License is distributed on an &quot;AS IS&quot; BASIS,   |
*| WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or     |
*| implied.                                                            |
*| See the License for the specific language governing permissions and |
*| limitations under the License.                                      |
*\---------------------------------------------------------------------/
METHOD createobjectfromixmldoc.

*      Plugin created by:
*      Thomas Jung
*      thomas.jung1@gmail.com

*      Stefan Schmöcker - July 2014
*      Changed to support multilinguitiy

  DATA: gotstate TYPE ddgotstate,
        dd04v_wa TYPE dd04v,
        tpara_wa TYPE tpara.

*xml nodes
  DATA rootnode    TYPE REF TO if_ixml_element.
  DATA tpara_node  TYPE REF TO if_ixml_element.
  DATA node        TYPE REF TO if_ixml_element.
  DATA filter      TYPE REF TO if_ixml_node_filter.
  DATA iterator    TYPE REF TO if_ixml_node_iterator.
  DATA rc          TYPE sysubrc.
  DATA _dtelname   TYPE ddobjname.
  DATA _devclass   TYPE devclass.
  DATA checkexists TYPE flag.
  DATA _objtype    TYPE string.

  _devclass = devclass.
  _objtype = getobjecttype( ).

  xmldoc = ixmldocument.
  rootnode = xmldoc-&gt;find_from_name( _objtype ).


* begin of insertion Multilinguality - check if nugget/slinkee was exported w/o support of multilinguality
  DATA: lv_multilanguagesupport TYPE flag.
  lv_multilanguagesupport = rootnode-&gt;get_attribute( name = c_multilanguagesupport ).
  IF lv_multilanguagesupport IS INITIAL.  &quot; Not found or not set --&gt; use old version of this class
    name = createobjectfromixmldoc_nolang(  ixmldocument =  ixmldocument
                                            devclass     =  devclass
                                            overwrite    =  overwrite    ).
    RETURN.
  ENDIF.
* end of insertion Multilinguality - check if nugget/slinkee was exported w/o support of multilinguality

  CALL METHOD getstructurefromattributes
    EXPORTING
      node      = rootnode
    CHANGING
      structure = dd04v_wa.

  objname = dd04v_wa-rollname.

  checkexists = checkexists( ).
  IF checkexists IS NOT INITIAL.
    IF overwrite IS INITIAL.
      RAISE EXCEPTION TYPE zcx_saplink
        EXPORTING
          textid = zcx_saplink=&gt;existing.
    ELSE.
*     delete object for new install
      deleteobject( ).
    ENDIF.
  ENDIF.

* retrieve data element details
  FREE: filter, iterator, node.
  filter = xmldoc-&gt;create_filter_name( &apos;tpara&apos; ).
  iterator = xmldoc-&gt;create_iterator_filtered( filter ).
  node ?= iterator-&gt;get_next( ).

  IF node IS NOT INITIAL.
    CALL METHOD getstructurefromattributes
      EXPORTING
        node      = node
      CHANGING
        structure = tpara_wa.
  ENDIF.

  DATA : l_pgmid      TYPE tadir-pgmid,
         l_object     TYPE tadir-object,
         l_obj_name   TYPE tadir-obj_name,
         l_dd_objname TYPE ddobjname,
         l_srcsystem  TYPE tadir-srcsystem,
         l_author     TYPE tadir-author,
         l_devclass   TYPE tadir-devclass,
         l_masterlang TYPE tadir-masterlang.


  l_pgmid      = &apos;R3TR&apos;.
  l_object     = _objtype.
  l_obj_name   = objname.
  l_dd_objname = objname.
  l_srcsystem  = sy-sysid.
  l_author     = sy-uname.
  l_devclass   = _devclass.
  l_masterlang = sy-langu.

  DATA: itadir TYPE tadir.
  itadir-pgmid      = l_pgmid.
  itadir-object     = l_object.
  itadir-obj_name   = l_obj_name.
  itadir-srcsystem  = l_srcsystem.
  itadir-author     = l_author.
  itadir-devclass   = l_devclass.
  itadir-masterlang = l_masterlang.
  MODIFY tadir FROM itadir.

  CALL FUNCTION &apos;TR_TADIR_INTERFACE&apos;
    EXPORTING
      wi_test_modus                  = &apos; &apos;
      wi_delete_tadir_entry          = &apos;X&apos;
      wi_tadir_pgmid                 = l_pgmid
      wi_tadir_object                = l_object
      wi_tadir_obj_name              = l_obj_name
      wi_tadir_srcsystem             = l_srcsystem
      wi_tadir_author                = l_author
      wi_tadir_devclass              = l_devclass
      wi_tadir_masterlang            = l_masterlang
      iv_set_edtflag                 = &apos;&apos;
    EXCEPTIONS
      tadir_entry_not_existing       = 1
      tadir_entry_ill_type           = 2
      no_systemname                  = 3
      no_systemtype                  = 4
      original_system_conflict       = 5
      object_reserved_for_devclass   = 6
      object_exists_global           = 7
      object_exists_local            = 8
      object_is_distributed          = 9
      obj_specification_not_unique   = 10
      no_authorization_to_delete     = 11
      devclass_not_existing          = 12
      simultanious_set_remove_repair = 13
      order_missing                  = 14
      no_modification_of_head_syst   = 15
      pgmid_object_not_allowed       = 16
      masterlanguage_not_specified   = 17
      devclass_not_specified         = 18
      specify_owner_unique           = 19
      loc_priv_objs_no_repair        = 20
      gtadir_not_reached             = 21
      object_locked_for_order        = 22
      change_of_class_not_allowed    = 23
      no_change_from_sap_to_tmp      = 24
      OTHERS                         = 25.
  IF sy-subrc NE 0.
    CASE sy-subrc.
      WHEN 1 OR 9 OR 7 OR 8. &quot;OK! - Doesn&apos;t exist yet
      WHEN 11 OR 23 OR 24.
        RAISE EXCEPTION TYPE zcx_saplink
          EXPORTING
            textid = zcx_saplink=&gt;not_authorized.
      WHEN 22.
        RAISE EXCEPTION TYPE zcx_saplink
          EXPORTING
            textid = zcx_saplink=&gt;locked.
      WHEN OTHERS.
        RAISE EXCEPTION TYPE zcx_saplink
          EXPORTING
            textid = zcx_saplink=&gt;system_error.
    ENDCASE.
  ENDIF.

* begin of deletion Multilinguality - moved into loop
*  CALL FUNCTION &apos;DDIF_DTEL_PUT&apos;
*    EXPORTING
*      name              = l_dd_objname
*      dd04v_wa          = dd04v_wa
*    EXCEPTIONS
*      dtel_not_found    = 1
*      name_inconsistent = 2
*      dtel_inconsistent = 3
*      put_failure       = 4
*      put_refused       = 5
*      OTHERS            = 6.
*
*  IF sy-subrc &lt;&gt; 0.
*    RAISE EXCEPTION TYPE zcx_saplink
*      EXPORTING textid = zcx_saplink=&gt;system_error.
*  ENDIF.
* begin of deletion Multilinguality -  moved into loop
* begin of insertion Multilinguality - loop at languages and insert them all
  DATA: lo_langunode TYPE REF TO if_ixml_element,
        lo_dd04vnode TYPE REF TO if_ixml_element,
        ls_dd04v     TYPE dd04v.

  lo_langunode ?= rootnode-&gt;find_from_name( &apos;DDLANGUAGE&apos; ).
  WHILE lo_langunode IS BOUND.  &quot; No need to extract anything from languagenode since language is duplicated in DD01V and DD07V

    CLEAR: ls_dd04v.
    FREE:  lo_dd04vnode.

* DD04V
    lo_dd04vnode ?= lo_langunode-&gt;find_from_name( &apos;DD04V&apos; ).
    IF lo_dd04vnode IS BOUND.
      CALL METHOD getstructurefromattributes
        EXPORTING
          node      = lo_dd04vnode
        CHANGING
          structure = ls_dd04v.

      CALL FUNCTION &apos;DDIF_DTEL_PUT&apos;
        EXPORTING
          name              = l_dd_objname
          dd04v_wa          = ls_dd04v
        EXCEPTIONS
          dtel_not_found    = 1
          name_inconsistent = 2
          dtel_inconsistent = 3
          put_failure       = 4
          put_refused       = 5
          OTHERS            = 6.

      IF sy-subrc &lt;&gt; 0.
        RAISE EXCEPTION TYPE zcx_saplink
          EXPORTING
            textid = zcx_saplink=&gt;system_error.
      ENDIF.
    ENDIF.

    lo_langunode ?= lo_langunode-&gt;get_next( ).

  ENDWHILE.

* end of insertion Multilinguality - loop at languages and insert them all

  DATA: trobjtype  TYPE trobjtype,
        trobj_name TYPE trobj_name.
  trobjtype  = l_object.
  trobj_name = l_obj_name.
  CALL FUNCTION &apos;RS_INSERT_INTO_WORKING_AREA&apos;
    EXPORTING
      object            = trobjtype
      obj_name          = trobj_name
    EXCEPTIONS
      wrong_object_name = 1.

  name = objname.
ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZSAPLINK_DATA_ELEMENTS" CMPNAME="CREATEOBJECTFROMIXMLDOC_NOLANG" VERSION="1" LANGU="E" DESCRIPT="Old nugget/slinkee w/o multilanguagesupport" EXPOSURE="2" STATE="1" EDITORDER="1 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" MTDNEWEXC="X" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZSAPLINK_DATA_ELEMENTS" CMPNAME="CREATEOBJECTFROMIXMLDOC_NOLANG" SCONAME="IXMLDOCUMENT" VERSION="1" LANGU="E" DESCRIPT="IF_IXML_DOCUMENT" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="3" TYPE="IF_IXML_DOCUMENT"/>
   <parameter CLSNAME="ZSAPLINK_DATA_ELEMENTS" CMPNAME="CREATEOBJECTFROMIXMLDOC_NOLANG" SCONAME="DEVCLASS" VERSION="1" LANGU="E" DESCRIPT="Development class/package" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="DEVCLASS" PARVALUE="&apos;$TMP&apos;"/>
   <parameter CLSNAME="ZSAPLINK_DATA_ELEMENTS" CMPNAME="CREATEOBJECTFROMIXMLDOC_NOLANG" SCONAME="OVERWRITE" VERSION="1" LANGU="E" DESCRIPT="Overwrite original objects" CMPTYPE="1" MTDTYPE="0" EDITORDER="3 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="FLAG" PAROPTIONL="X"/>
   <parameter CLSNAME="ZSAPLINK_DATA_ELEMENTS" CMPNAME="CREATEOBJECTFROMIXMLDOC_NOLANG" SCONAME="NAME" VERSION="1" LANGU="E" DESCRIPT="Installed object name" CMPTYPE="1" MTDTYPE="0" EDITORDER="4 " DISPID="0 " PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="1" TYPE="STRING"/>
   <exception CLSNAME="ZSAPLINK_DATA_ELEMENTS" CMPNAME="CREATEOBJECTFROMIXMLDOC_NOLANG" SCONAME="ZCX_SAPLINK" VERSION="1" LANGU="E" DESCRIPT="SAPlink exception class" MTDTYPE="0" EDITORDER="1 "/>
   <source>method CREATEOBJECTFROMIXMLDOC_NOLANG.
*/---------------------------------------------------------------------\
*| This file is part of SAPlink.                                       |
*|                                                                     |
*| Copyright 2014 SAPlink project members                              |
*|                                                                     |
*| Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);     |
*| you may not use this file except in compliance with the License.    |
*| You may obtain a copy of the License at                             |
*|                                                                     |
*|     http://www.apache.org/licenses/LICENSE-2.0                      |
*|                                                                     |
*| Unless required by applicable law or agreed to in writing, software |
*| distributed under the License is distributed on an &quot;AS IS&quot; BASIS,   |
*| WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or     |
*| implied.                                                            |
*| See the License for the specific language governing permissions and |
*| limitations under the License.                                      |
*\---------------------------------------------------------------------/

*      Plugin created by:
*      Thomas Jung
*      thomas.jung1@gmail.com

  DATA: gotstate TYPE ddgotstate,
        dd04v_wa TYPE dd04v,
        tpara_wa TYPE tpara.

*xml nodes
  DATA rootnode    TYPE REF TO if_ixml_element.
  DATA tpara_node  TYPE REF TO if_ixml_element.
  DATA node        TYPE REF TO if_ixml_element.
  DATA filter      TYPE REF TO if_ixml_node_filter.
  DATA iterator    TYPE REF TO if_ixml_node_iterator.
  DATA rc          TYPE sysubrc.
  DATA _dtelname   TYPE ddobjname.
  DATA _devclass   TYPE devclass.
  DATA checkexists TYPE flag.
  DATA _objtype    TYPE string.

  _devclass = devclass.
  _objtype = getobjecttype( ).

  xmldoc = ixmldocument.
  rootnode = xmldoc-&gt;find_from_name( _objtype ).

  CALL METHOD getstructurefromattributes
    EXPORTING
      node      = rootnode
    CHANGING
      structure = dd04v_wa.

  objname = dd04v_wa-rollname.

  checkexists = checkexists( ).
  IF checkexists IS NOT INITIAL.
    IF overwrite IS INITIAL.
      RAISE EXCEPTION TYPE zcx_saplink
        EXPORTING textid = zcx_saplink=&gt;existing.
    ELSE.
*     delete object for new install
      deleteobject( ).
    ENDIF.
  ENDIF.

* retrieve Domain details
  FREE: filter, iterator, node.
  filter = xmldoc-&gt;create_filter_name( &apos;tpara&apos; ).
  iterator = xmldoc-&gt;create_iterator_filtered( filter ).
  node ?= iterator-&gt;get_next( ).

  IF node IS NOT INITIAL.
    CALL METHOD getstructurefromattributes
      EXPORTING
        node      = node
      CHANGING
        structure = tpara_wa.
  ENDIF.

  DATA : l_pgmid         TYPE tadir-pgmid,
           l_object      TYPE tadir-object,
           l_obj_name    TYPE tadir-obj_name,
           l_dd_objname  TYPE ddobjname,
           l_srcsystem   TYPE tadir-srcsystem,
           l_author      TYPE tadir-author,
           l_devclass    TYPE tadir-devclass,
           l_masterlang  TYPE tadir-masterlang.


  l_pgmid      = &apos;R3TR&apos;.
  l_object     = _objtype.
  l_obj_name   = objname.
  l_dd_objname = objname.
  l_srcsystem  = sy-sysid.
  l_author     = sy-uname.
  l_devclass   = _devclass.
  l_masterlang = sy-langu.

  DATA: itadir TYPE tadir.
  itadir-pgmid      = l_pgmid.
  itadir-object     = l_object.
  itadir-obj_name   = l_obj_name.
  itadir-srcsystem  = l_srcsystem.
  itadir-author     = l_author.
  itadir-devclass   = l_devclass.
  itadir-masterlang = l_masterlang.
  MODIFY tadir FROM itadir.

  CALL FUNCTION &apos;TR_TADIR_INTERFACE&apos;
    EXPORTING
      wi_test_modus                  = &apos; &apos;
      wi_delete_tadir_entry          = &apos;X&apos;
      wi_tadir_pgmid                 = l_pgmid
      wi_tadir_object                = l_object
      wi_tadir_obj_name              = l_obj_name
      wi_tadir_srcsystem             = l_srcsystem
      wi_tadir_author                = l_author
      wi_tadir_devclass              = l_devclass
      wi_tadir_masterlang            = l_masterlang
      iv_set_edtflag                 = &apos;&apos;
    EXCEPTIONS
      tadir_entry_not_existing       = 1
      tadir_entry_ill_type           = 2
      no_systemname                  = 3
      no_systemtype                  = 4
      original_system_conflict       = 5
      object_reserved_for_devclass   = 6
      object_exists_global           = 7
      object_exists_local            = 8
      object_is_distributed          = 9
      obj_specification_not_unique   = 10
      no_authorization_to_delete     = 11
      devclass_not_existing          = 12
      simultanious_set_remove_repair = 13
      order_missing                  = 14
      no_modification_of_head_syst   = 15
      pgmid_object_not_allowed       = 16
      masterlanguage_not_specified   = 17
      devclass_not_specified         = 18
      specify_owner_unique           = 19
      loc_priv_objs_no_repair        = 20
      gtadir_not_reached             = 21
      object_locked_for_order        = 22
      change_of_class_not_allowed    = 23
      no_change_from_sap_to_tmp      = 24
      OTHERS                         = 25.
  IF sy-subrc NE 0.
    CASE sy-subrc.
      WHEN 1 OR 9 OR 7 OR 8. &quot;OK! - Doesn&apos;t exist yet
      WHEN 11 OR 23 OR 24.
        RAISE EXCEPTION TYPE zcx_saplink
          EXPORTING textid = zcx_saplink=&gt;not_authorized.
      WHEN 22.
        RAISE EXCEPTION TYPE zcx_saplink
          EXPORTING textid = zcx_saplink=&gt;locked.
      WHEN OTHERS.
        RAISE EXCEPTION TYPE zcx_saplink
          EXPORTING textid = zcx_saplink=&gt;system_error.
    ENDCASE.
  ENDIF.

  CALL FUNCTION &apos;DDIF_DTEL_PUT&apos;
    EXPORTING
      name              = l_dd_objname
      dd04v_wa          = dd04v_wa
    EXCEPTIONS
      dtel_not_found    = 1
      name_inconsistent = 2
      dtel_inconsistent = 3
      put_failure       = 4
      put_refused       = 5
      OTHERS            = 6.

  IF sy-subrc &lt;&gt; 0.
    RAISE EXCEPTION TYPE zcx_saplink
      EXPORTING textid = zcx_saplink=&gt;system_error.
  ENDIF.

  DATA: trobjtype  TYPE trobjtype,
        trobj_name TYPE trobj_name.
  trobjtype  = l_object.
  trobj_name = l_obj_name.
  CALL FUNCTION &apos;RS_INSERT_INTO_WORKING_AREA&apos;
    EXPORTING
      object            = trobjtype
      obj_name          = trobj_name
    EXCEPTIONS
      wrong_object_name = 1.

  name = objName.
endmethod.</source>
  </method>
  <method CLSNAME="ZSAPLINK" CMPNAME="DELETEOBJECT" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>*/---------------------------------------------------------------------\
*| This file is part of SAPlink.                                       |
*|                                                                     |
*| Copyright 2014 SAPlink project members                              |
*|                                                                     |
*| Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);     |
*| you may not use this file except in compliance with the License.    |
*| You may obtain a copy of the License at                             |
*|                                                                     |
*|     http://www.apache.org/licenses/LICENSE-2.0                      |
*|                                                                     |
*| Unless required by applicable law or agreed to in writing, software |
*| distributed under the License is distributed on an &quot;AS IS&quot; BASIS,   |
*| WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or     |
*| implied.                                                            |
*| See the License for the specific language governing permissions and |
*| limitations under the License.                                      |
*\---------------------------------------------------------------------/
method DELETEOBJECT.

*      Plugin created by:
*      Thomas Jung
*      thomas.jung1@gmail.com

endmethod.</source>
  </method>
  <method CLSNAME="ZSAPLINK" CMPNAME="GETOBJECTTYPE" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>*/---------------------------------------------------------------------\
*| This file is part of SAPlink.                                       |
*|                                                                     |
*| Copyright 2014 SAPlink project members                              |
*|                                                                     |
*| Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);     |
*| you may not use this file except in compliance with the License.    |
*| You may obtain a copy of the License at                             |
*|                                                                     |
*|     http://www.apache.org/licenses/LICENSE-2.0                      |
*|                                                                     |
*| Unless required by applicable law or agreed to in writing, software |
*| distributed under the License is distributed on an &quot;AS IS&quot; BASIS,   |
*| WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or     |
*| implied.                                                            |
*| See the License for the specific language governing permissions and |
*| limitations under the License.                                      |
*\---------------------------------------------------------------------/
method GETOBJECTTYPE.

*      Plugin created by:
*      Thomas Jung
*      thomas.jung1@gmail.com

  objecttype = &apos;DTEL&apos;.  &quot;Data Elements
endmethod.</source>
  </method>
 </CLAS>
 <CLAS CLSNAME="ZSAPLINK_TABLE_TYPES" VERSION="1" LANGU="E" DESCRIPT="SAPlink - Data Dictionary  - Table Types" CATEGORY="00" EXPOSURE="2" STATE="1" RELEASE="0" CLSFINAL="X" CLSCCINCL="X" FIXPT="X" UNICODE="X" CLSBCCAT="00" DURATION_TYPE="0 " RISK_LEVEL="0 " REFCLSNAME="ZSAPLINK">
  <localImplementation>*&quot;* local class implementation for public class
*&quot;* use this source file for the implementation part of
*&quot;* local helper classes</localImplementation>
  <localTypes>*&quot;* use this source file for any type declarations (class
*&quot;* definitions, interfaces or data types) you need for method
*&quot;* implementation or private method&apos;s signature</localTypes>
  <localMacros>*&quot;* use this source file for any macro definitions you need
*&quot;* in the implementation part of the class</localMacros>
  <inheritance CLSNAME="ZSAPLINK_TABLE_TYPES" REFCLSNAME="ZSAPLINK" VERSION="1" STATE="1">
   <redefinition CLSNAME="ZSAPLINK_TABLE_TYPES" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="CHECKEXISTS" EXPOSURE="2"/>
   <redefinition CLSNAME="ZSAPLINK_TABLE_TYPES" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="CREATEIXMLDOCFROMOBJECT" EXPOSURE="2"/>
   <redefinition CLSNAME="ZSAPLINK_TABLE_TYPES" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="CREATEOBJECTFROMIXMLDOC" EXPOSURE="2"/>
   <redefinition CLSNAME="ZSAPLINK_TABLE_TYPES" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="DELETEOBJECT" EXPOSURE="1"/>
   <redefinition CLSNAME="ZSAPLINK_TABLE_TYPES" REFCLSNAME="ZSAPLINK" VERSION="1" MTDNAME="GETOBJECTTYPE" EXPOSURE="1"/>
  </inheritance>
  <method CLSNAME="ZSAPLINK" CMPNAME="CHECKEXISTS" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>*/---------------------------------------------------------------------\
*| This file is part of SAPlink.                                       |
*|                                                                     |
*| Copyright 2014-2015 SAPlink project members                              |
*|                                                                     |
*| Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);     |
*| you may not use this file except in compliance with the License.    |
*| You may obtain a copy of the License at                             |
*|                                                                     |
*|     http://www.apache.org/licenses/LICENSE-2.0                      |
*|                                                                     |
*| Unless required by applicable law or agreed to in writing, software |
*| distributed under the License is distributed on an &quot;AS IS&quot; BASIS,   |
*| WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or     |
*| implied.                                                            |
*| See the License for the specific language governing permissions and |
*| limitations under the License.                                      |
*\---------------------------------------------------------------------/
METHOD CHECKEXISTS.

*      Plugin created by:
*      Thomas Jung
*      thomas.jung1@gmail.com

  DATA: l_name   TYPE ddobjname,
        dd40v_wa TYPE dd40v.
  l_name = objname.
  CALL FUNCTION &apos;DDIF_TTYP_GET&apos;
    EXPORTING
      name          = l_name
    IMPORTING
      dd40v_wa      = dd40v_wa
    EXCEPTIONS
      illegal_input = 1
      OTHERS        = 2.
  IF sy-subrc = 0 AND dd40v_wa-typename IS NOT INITIAL.
    exists = &apos;X&apos;.
  ENDIF.
ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZSAPLINK" CMPNAME="CREATEIXMLDOCFROMOBJECT" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>*/---------------------------------------------------------------------\
*| This file is part of SAPlink.                                       |
*|                                                                     |
*| Copyright 2014-2015 SAPlink project members                              |
*|                                                                     |
*| Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);     |
*| you may not use this file except in compliance with the License.    |
*| You may obtain a copy of the License at                             |
*|                                                                     |
*|     http://www.apache.org/licenses/LICENSE-2.0                      |
*|                                                                     |
*| Unless required by applicable law or agreed to in writing, software |
*| distributed under the License is distributed on an &quot;AS IS&quot; BASIS,   |
*| WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or     |
*| implied.                                                            |
*| See the License for the specific language governing permissions and |
*| limitations under the License.                                      |
*\---------------------------------------------------------------------/
METHOD createixmldocfromobject.

*      Plugin created by:
*      Thomas Jung
*      thomas.jung1@gmail.com

  DATA: gotstate   TYPE ddgotstate,
        dd40v_wa   TYPE dd40v,
        lt_dd42v   TYPE STANDARD TABLE OF dd42v WITH NON-UNIQUE DEFAULT KEY,
        ls_dd42v   LIKE LINE OF lt_dd42v,
        lt_dd43v   TYPE STANDARD TABLE OF dd43v WITH NON-UNIQUE DEFAULT KEY,
        ls_dd43v   LIKE LINE OF lt_dd43v,

        _objtype   TYPE string,

*xml nodes
        rootnode   TYPE REF TO if_ixml_element,
        dd42v_node TYPE REF TO if_ixml_element,
        dd43v_node TYPE REF TO if_ixml_element,
        rc         TYPE sysubrc,
        _ttypname  TYPE ddobjname.


  _ttypname  = objname.

  CALL FUNCTION &apos;DDIF_TTYP_GET&apos;
    EXPORTING
      name          = _ttypname
      langu         = sy-langu
    IMPORTING
      gotstate      = gotstate
      dd40v_wa      = dd40v_wa
    TABLES
      dd42v_tab     = lt_dd42v
      dd43v_tab     = lt_dd43v
    EXCEPTIONS
      illegal_input = 1
      OTHERS        = 2.
  IF sy-subrc &lt;&gt; 0 OR dd40v_wa-typename IS INITIAL.
    RAISE EXCEPTION TYPE zcx_saplink
      EXPORTING
        textid = zcx_saplink=&gt;not_found.
  ENDIF.

* Create parent node
  _objtype = getobjecttype( ).
  rootnode = xmldoc-&gt;create_element( _objtype ).
  setattributesfromstructure( node = rootnode structure = dd40v_wa ).

  LOOP AT lt_dd42v INTO ls_dd42v.
    dd42v_node = xmldoc-&gt;create_element( &apos;dd42v&apos; ).
    setattributesfromstructure( node = dd42v_node structure = ls_dd42v ).
    rc = rootnode-&gt;append_child( dd42v_node ).
  ENDLOOP.

  LOOP AT lt_dd43v INTO ls_dd43v.
    dd43v_node = xmldoc-&gt;create_element( &apos;dd43v&apos; ).
    setattributesfromstructure( node = dd43v_node structure = ls_dd43v ).
    rc = rootnode-&gt;append_child( dd43v_node ).
  ENDLOOP.

*\--------------------------------------------------------------------/
  rc = xmldoc-&gt;append_child( rootnode ).
  ixmldocument = xmldoc.
ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZSAPLINK" CMPNAME="CREATEOBJECTFROMIXMLDOC" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>*/---------------------------------------------------------------------\
*| This file is part of SAPlink.                                       |
*|                                                                     |
*| Copyright 2014-2015 SAPlink project members                              |
*|                                                                     |
*| Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);     |
*| you may not use this file except in compliance with the License.    |
*| You may obtain a copy of the License at                             |
*|                                                                     |
*|     http://www.apache.org/licenses/LICENSE-2.0                      |
*|                                                                     |
*| Unless required by applicable law or agreed to in writing, software |
*| distributed under the License is distributed on an &quot;AS IS&quot; BASIS,   |
*| WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or     |
*| implied.                                                            |
*| See the License for the specific language governing permissions and |
*| limitations under the License.                                      |
*\---------------------------------------------------------------------/
METHOD createobjectfromixmldoc.

*      Plugin created by:
*      Thomas Jung
*      thomas.jung1@gmail.com

  DATA: gotstate     TYPE ddgotstate,
        dd40v_wa     TYPE dd40v,
        lt_dd42v     TYPE STANDARD TABLE OF dd42v WITH NON-UNIQUE DEFAULT KEY,
        ls_dd42v     LIKE LINE OF lt_dd42v,
        lt_dd43v     TYPE STANDARD TABLE OF dd43v WITH NON-UNIQUE DEFAULT KEY,
        ls_dd43v     LIKE LINE OF lt_dd43v,

*xml nodes
        rootnode     TYPE REF TO if_ixml_element,
        dd42v_node   TYPE REF TO if_ixml_element,
        dd43v_node   TYPE REF TO if_ixml_element,
        node         TYPE REF TO if_ixml_element,
        filter       TYPE REF TO if_ixml_node_filter,
        iterator     TYPE REF TO if_ixml_node_iterator,
        rc           TYPE sysubrc,
        _ttypname    TYPE ddobjname,
        _devclass    TYPE devclass,
        checkexists  TYPE flag,
        _objtype     TYPE string,
* putting object into ddic
        l_pgmid      TYPE tadir-pgmid,
        l_object     TYPE tadir-object,
        l_obj_name   TYPE tadir-obj_name,
        l_dd_objname TYPE ddobjname,
        l_srcsystem  TYPE tadir-srcsystem,
        l_author     TYPE tadir-author,
        l_devclass   TYPE tadir-devclass,
        l_masterlang TYPE tadir-masterlang.


  _devclass   = devclass.
  _objtype = getobjecttype( ).

  xmldoc = ixmldocument.
  rootnode = xmldoc-&gt;find_from_name( _objtype ).

  CALL METHOD getstructurefromattributes
    EXPORTING
      node      = rootnode
    CHANGING
      structure = dd40v_wa.

  objname = dd40v_wa-typename.

  checkexists = checkexists( ).
  IF checkexists IS NOT INITIAL.
    IF overwrite IS INITIAL.
      RAISE EXCEPTION TYPE zcx_saplink
        EXPORTING
          textid = zcx_saplink=&gt;existing.
    ELSE.
*     delete object for new install
      deleteobject( ).
    ENDIF.
  ENDIF.

* retrieve table type details
  FREE: filter, iterator, node.
  filter = xmldoc-&gt;create_filter_name( &apos;dd42v&apos; ).
  iterator = xmldoc-&gt;create_iterator_filtered( filter ).
  node ?= iterator-&gt;get_next( ).

  WHILE node IS NOT INITIAL.
    CLEAR dd42v_node.
    CALL METHOD getstructurefromattributes
      EXPORTING
        node      = node
      CHANGING
        structure = ls_dd42v.
    APPEND ls_dd42v TO lt_dd42v.
    node ?= iterator-&gt;get_next( ).
  ENDWHILE.

  FREE: filter, iterator, node.
  filter = xmldoc-&gt;create_filter_name( &apos;dd43v&apos; ).
  iterator = xmldoc-&gt;create_iterator_filtered( filter ).
  node ?= iterator-&gt;get_next( ).

  WHILE node IS NOT INITIAL.
    CLEAR dd43v_node.
    CALL METHOD getstructurefromattributes
      EXPORTING
        node      = node
      CHANGING
        structure = ls_dd43v.
    APPEND ls_dd43v TO lt_dd43v.
    node ?= iterator-&gt;get_next( ).
  ENDWHILE.


  l_pgmid      = &apos;R3TR&apos;.
  l_object     = _objtype.
  l_obj_name   = objname.
  l_dd_objname = objname.
  l_srcsystem  = sy-sysid.
  l_author     = sy-uname.
  l_devclass   = _devclass.
  l_masterlang = sy-langu.

  DATA: itadir TYPE tadir.
  itadir-pgmid      = l_pgmid.
  itadir-object     = l_object.
  itadir-obj_name   = l_obj_name.
  itadir-srcsystem  = l_srcsystem.
  itadir-author     = l_author.
  itadir-devclass   = l_devclass.
  itadir-masterlang = l_masterlang.
  MODIFY tadir FROM itadir.

  CALL FUNCTION &apos;TR_TADIR_INTERFACE&apos;
    EXPORTING
      wi_test_modus                  = &apos; &apos;
      wi_delete_tadir_entry          = &apos;X&apos;
      wi_tadir_pgmid                 = l_pgmid
      wi_tadir_object                = l_object
      wi_tadir_obj_name              = l_obj_name
      wi_tadir_srcsystem             = l_srcsystem
      wi_tadir_author                = l_author
      wi_tadir_devclass              = l_devclass
      wi_tadir_masterlang            = l_masterlang
      iv_set_edtflag                 = &apos;&apos;
    EXCEPTIONS
      tadir_entry_not_existing       = 1
      tadir_entry_ill_type           = 2
      no_systemname                  = 3
      no_systemtype                  = 4
      original_system_conflict       = 5
      object_reserved_for_devclass   = 6
      object_exists_global           = 7
      object_exists_local            = 8
      object_is_distributed          = 9
      obj_specification_not_unique   = 10
      no_authorization_to_delete     = 11
      devclass_not_existing          = 12
      simultanious_set_remove_repair = 13
      order_missing                  = 14
      no_modification_of_head_syst   = 15
      pgmid_object_not_allowed       = 16
      masterlanguage_not_specified   = 17
      devclass_not_specified         = 18
      specify_owner_unique           = 19
      loc_priv_objs_no_repair        = 20
      gtadir_not_reached             = 21
      object_locked_for_order        = 22
      change_of_class_not_allowed    = 23
      no_change_from_sap_to_tmp      = 24
      OTHERS                         = 25.
  IF sy-subrc NE 0.
    CASE sy-subrc.
      WHEN 1 OR 9 OR 7 OR 8. &quot;OK! - Doesn&apos;t exist yet
      WHEN 11 OR 23 OR 24.
        RAISE EXCEPTION TYPE zcx_saplink
          EXPORTING
            textid = zcx_saplink=&gt;not_authorized.
      WHEN 22.
        RAISE EXCEPTION TYPE zcx_saplink
          EXPORTING
            textid = zcx_saplink=&gt;locked.
      WHEN OTHERS.
        RAISE EXCEPTION TYPE zcx_saplink
          EXPORTING
            textid = zcx_saplink=&gt;system_error.
    ENDCASE.
  ENDIF.

  CALL FUNCTION &apos;DDIF_TTYP_PUT&apos;
    EXPORTING
      name              = l_dd_objname
      dd40v_wa          = dd40v_wa
    TABLES
      dd42v_tab         = lt_dd42v
      dd43v_tab         = lt_dd43v
    EXCEPTIONS
      ttyp_not_found    = 1
      name_inconsistent = 2
      ttyp_inconsistent = 3
      put_failure       = 4
      put_refused       = 5
      OTHERS            = 6.
  IF sy-subrc &lt;&gt; 0.
    RAISE EXCEPTION TYPE zcx_saplink
      EXPORTING
        textid = zcx_saplink=&gt;system_error.
  ENDIF.



  DATA: trobjtype  TYPE trobjtype,
        trobj_name TYPE trobj_name.
  trobjtype  = l_object.
  trobj_name = l_obj_name.
  CALL FUNCTION &apos;RS_INSERT_INTO_WORKING_AREA&apos;
    EXPORTING
      object            = trobjtype
      obj_name          = trobj_name
    EXCEPTIONS
      wrong_object_name = 1.

  name = objname.

ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZSAPLINK" CMPNAME="DELETEOBJECT" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>*/---------------------------------------------------------------------\
*| This file is part of SAPlink.                                       |
*|                                                                     |
*| Copyright 2014-2015 SAPlink project members                              |
*|                                                                     |
*| Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);     |
*| you may not use this file except in compliance with the License.    |
*| You may obtain a copy of the License at                             |
*|                                                                     |
*|     http://www.apache.org/licenses/LICENSE-2.0                      |
*|                                                                     |
*| Unless required by applicable law or agreed to in writing, software |
*| distributed under the License is distributed on an &quot;AS IS&quot; BASIS,   |
*| WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or     |
*| implied.                                                            |
*| See the License for the specific language governing permissions and |
*| limitations under the License.                                      |
*\---------------------------------------------------------------------/
METHOD DELETEOBJECT.

*      Plugin created by:
*      Thomas Jung
*      thomas.jung1@gmail.com

ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZSAPLINK" CMPNAME="GETOBJECTTYPE" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>*/---------------------------------------------------------------------\
*| This file is part of SAPlink.                                       |
*|                                                                     |
*| Copyright 2014-2015 SAPlink project members                              |
*|                                                                     |
*| Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);     |
*| you may not use this file except in compliance with the License.    |
*| You may obtain a copy of the License at                             |
*|                                                                     |
*|     http://www.apache.org/licenses/LICENSE-2.0                      |
*|                                                                     |
*| Unless required by applicable law or agreed to in writing, software |
*| distributed under the License is distributed on an &quot;AS IS&quot; BASIS,   |
*| WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or     |
*| implied.                                                            |
*| See the License for the specific language governing permissions and |
*| limitations under the License.                                      |
*\---------------------------------------------------------------------/
METHOD GETOBJECTTYPE.

*      Plugin created by:
*      Thomas Jung
*      thomas.jung1@gmail.com

  objecttype = &apos;TTYP&apos;.  &quot;Table Type
ENDMETHOD.</source>
  </method>
 </CLAS>
</nugget>
